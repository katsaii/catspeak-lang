# Catspeak cartridge layout #
# ========================= #

# The header comes first. In the order they are defined below, these values are
# written to the start of the buffer.

head-order: [signal, title, version]
head:
  signal:
    value: 0xC7544E # the colour of Wanda, if you know you know
    type: u32
  title:
    value: "CATSPEAK CART"
    type: string
  version:
    value: 1
    type: u8

# Directly after the header are byte offsets, relative to the start of the
# Catspeak cartridge, each pointing to a specialised chunk of the Catspeak
# cartridge.
#
# In the order defined below, these are:

chunk-order: [instr, data]
chunk:
  instr: u32 #< The offset of the program section.
  data: u32  #< The offset of the data section.

# The program section contains the executable code, encoding in reverse-polish
# notation. Each instruction is prefixed with an instruction opcode followed by
# diagnostic information, and finally any operands associated with the
# instruction.

instr-opcode: u8 #< The underlying type used for instruction opcodes.
instr-dbg: u32   #< The approximate location of an instruction in the source code.
instr:

# - name: "example"                     #< The name of the instruction.
#   name-short: "ex_1"                  #< A shorter name for the instruction.
#   desc: "just an example instruction" #< Instruction description.
#   repr: 0x0F                          #< Underlying opcode representation.
#   args:
#     - name: "n"                                   #< Operand name.
#       desc: "the number of hoops to jump through" #< Operand description.
#       type: u8                                    #< Operand type.
#   stackargs:
#     - name: "m" #< Pop value off the stack, and associate it with a name.
#       desc: "the number of additional hoops to jump through" 

  - name: "const number"
    name-short: "get_n"
    desc: "push a numeric constant onto the stack"
    repr: 0x00
    args:
      - name: "n"
        desc: "the number to emit"
        type: f64

  - name: "const bool"
    name-short: "get_b"
    desc: "push a boolean constant onto the stack"
    repr: 0x01
    args:
      - name: "condition"
        desc: "the bool to emit"
        type: u8

  - name: "const string"
    name-short: "get_s"
    desc: "push a string constant onto the stack"
    repr: 0x02
    args:
      - name: "string_"
        desc: "the string to emit"
        type: string

  - name: "return"
    name-short: "ret"
    desc: "pop the top value off of the stack, and return it from the current function"
    repr: 0x03
    stackargs:
      - name: "value"
        desc: "the value to return"

# The data section stores a variety of information. Most importantly, it stores
# information about the main function (and function literals), such as how
# many local variables they contain.
#
# In the order defined below, these are:

data-order: [func, meta]
data:

  func-order: [locals, params]
  func:
    locals: u32 #< The max number of local variables this function can have.
    params: u32 #< The number of named parameters this function has.

  meta-order: [path, author]
  meta:
    path: string   #< The path to the file containing source code for this Cartridge.
    author: string #< The author of this Cartridge.