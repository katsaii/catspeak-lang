//! AUTO GENERATED, DON'T MODIFY THIS FILE
//! DELETE THIS FILE IF YOU DO NOT USE
//!
//! ```gml
//! Catspeak.interface.exposeEverythingIDontCareIfModdersCanEditUsersSaveFilesJustLetMeDoThis = true;
//! ```

//# feather use syntax-errors

/// @ignore
function __catspeak_get_gml_interface() {
    static db = undefined;
    if (db == undefined) {
        db = { };
        with ({ }) { // protects from incorrectly reading a missing function from an instance variable
            try {
                db[$ "all"] = all;
                db[$ "noone"] = noone;
                db[$ "global"] = catspeak_special_to_struct(global);
                db[$ "undefined"] = undefined;
                db[$ "pointer_invalid"] = pointer_invalid;
                db[$ "pointer_null"] = pointer_null;
                db[$ "path_action_stop"] = path_action_stop;
                db[$ "path_action_restart"] = path_action_restart;
                db[$ "path_action_continue"] = path_action_continue;
                db[$ "path_action_reverse"] = path_action_reverse;
                db[$ "true"] = true;
                db[$ "false"] = false;
                db[$ "pi"] = pi;
                db[$ "NaN"] = NaN;
                db[$ "infinity"] = infinity;
                db[$ "GM_build_date"] = GM_build_date;
                db[$ "GM_version"] = GM_version;
                db[$ "GM_runtime_version"] = GM_runtime_version;
                db[$ "GM_project_filename"] = GM_project_filename;
                db[$ "GM_build_type"] = GM_build_type;
                db[$ "is_real"] = method(undefined, is_real);
                db[$ "is_numeric"] = method(undefined, is_numeric);
                db[$ "is_string"] = method(undefined, is_string);
                db[$ "is_array"] = method(undefined, is_array);
                db[$ "is_undefined"] = method(undefined, is_undefined);
                db[$ "is_int32"] = method(undefined, is_int32);
                db[$ "is_int64"] = method(undefined, is_int64);
                db[$ "is_ptr"] = method(undefined, is_ptr);
                db[$ "is_bool"] = method(undefined, is_bool);
                db[$ "is_nan"] = method(undefined, is_nan);
                db[$ "is_infinity"] = method(undefined, is_infinity);
                db[$ "is_struct"] = method(undefined, is_struct);
                db[$ "is_method"] = method(undefined, is_method);
                db[$ "typeof"] = method(undefined, typeof);
                db[$ "instanceof"] = method(undefined, instanceof);
                db[$ "exception_unhandled_handler"] = method(undefined, exception_unhandled_handler);
                db[$ "variable_global_exists"] = method(undefined, variable_global_exists);
                db[$ "variable_global_get"] = method(undefined, variable_global_get);
                db[$ "variable_global_set"] = method(undefined, variable_global_set);
                db[$ "variable_instance_exists"] = method(undefined, variable_instance_exists);
                db[$ "variable_instance_get"] = method(undefined, variable_instance_get);
                db[$ "variable_instance_set"] = method(undefined, variable_instance_set);
                db[$ "variable_instance_get_names"] = method(undefined, variable_instance_get_names);
                db[$ "variable_instance_names_count"] = method(undefined, variable_instance_names_count);
                db[$ "variable_struct_exists"] = method(undefined, variable_struct_exists);
                db[$ "variable_struct_get"] = method(undefined, variable_struct_get);
                db[$ "variable_struct_set"] = method(undefined, variable_struct_set);
                db[$ "variable_struct_get_names"] = method(undefined, variable_struct_get_names);
                db[$ "variable_struct_names_count"] = method(undefined, variable_struct_names_count);
                db[$ "variable_struct_remove"] = method(undefined, variable_struct_remove);
                db[$ "array_length"] = method(undefined, array_length);
                db[$ "array_equals"] = method(undefined, array_equals);
                db[$ "array_create"] = method(undefined, array_create);
                db[$ "array_copy"] = method(undefined, array_copy);
                db[$ "array_resize"] = method(undefined, array_resize);
                db[$ "array_get"] = method(undefined, array_get);
                db[$ "array_set"] = method(undefined, array_set);
                db[$ "array_push"] = method(undefined, array_push);
                db[$ "array_pop"] = method(undefined, array_pop);
                db[$ "array_insert"] = method(undefined, array_insert);
                db[$ "array_delete"] = method(undefined, array_delete);
                db[$ "array_sort"] = method(undefined, array_sort);
                db[$ "random"] = method(undefined, random);
                db[$ "random_range"] = method(undefined, random_range);
                db[$ "irandom"] = method(undefined, irandom);
                db[$ "irandom_range"] = method(undefined, irandom_range);
                db[$ "random_set_seed"] = method(undefined, random_set_seed);
                db[$ "random_get_seed"] = method(undefined, random_get_seed);
                db[$ "randomize"] = method(undefined, randomize);
                db[$ "randomise"] = method(undefined, randomise);
                db[$ "choose"] = method(undefined, choose);
                db[$ "abs"] = method(undefined, abs);
                db[$ "round"] = method(undefined, round);
                db[$ "floor"] = method(undefined, floor);
                db[$ "ceil"] = method(undefined, ceil);
                db[$ "sign"] = method(undefined, sign);
                db[$ "frac"] = method(undefined, frac);
                db[$ "sqrt"] = method(undefined, sqrt);
                db[$ "sqr"] = method(undefined, sqr);
                db[$ "exp"] = method(undefined, exp);
                db[$ "ln"] = method(undefined, ln);
                db[$ "log2"] = method(undefined, log2);
                db[$ "log10"] = method(undefined, log10);
                db[$ "sin"] = method(undefined, sin);
                db[$ "cos"] = method(undefined, cos);
                db[$ "tan"] = method(undefined, tan);
                db[$ "arcsin"] = method(undefined, arcsin);
                db[$ "arccos"] = method(undefined, arccos);
                db[$ "arctan"] = method(undefined, arctan);
                db[$ "arctan2"] = method(undefined, arctan2);
                db[$ "dsin"] = method(undefined, dsin);
                db[$ "dcos"] = method(undefined, dcos);
                db[$ "dtan"] = method(undefined, dtan);
                db[$ "darcsin"] = method(undefined, darcsin);
                db[$ "darccos"] = method(undefined, darccos);
                db[$ "darctan"] = method(undefined, darctan);
                db[$ "darctan2"] = method(undefined, darctan2);
                db[$ "degtorad"] = method(undefined, degtorad);
                db[$ "radtodeg"] = method(undefined, radtodeg);
                db[$ "power"] = method(undefined, power);
                db[$ "logn"] = method(undefined, logn);
                db[$ "min"] = method(undefined, min);
                db[$ "max"] = method(undefined, max);
                db[$ "mean"] = method(undefined, mean);
                db[$ "median"] = method(undefined, median);
                db[$ "clamp"] = method(undefined, clamp);
                db[$ "lerp"] = method(undefined, lerp);
                db[$ "dot_product"] = method(undefined, dot_product);
                db[$ "dot_product_3d"] = method(undefined, dot_product_3d);
                db[$ "dot_product_normalised"] = method(undefined, dot_product_normalised);
                db[$ "dot_product_3d_normalised"] = method(undefined, dot_product_3d_normalised);
                db[$ "dot_product_normalized"] = method(undefined, dot_product_normalized);
                db[$ "dot_product_3d_normalized"] = method(undefined, dot_product_3d_normalized);
                db[$ "math_set_epsilon"] = method(undefined, math_set_epsilon);
                db[$ "math_get_epsilon"] = method(undefined, math_get_epsilon);
                db[$ "angle_difference"] = method(undefined, angle_difference);
                db[$ "point_distance_3d"] = method(undefined, point_distance_3d);
                db[$ "point_distance"] = method(undefined, point_distance);
                db[$ "point_direction"] = method(undefined, point_direction);
                db[$ "lengthdir_x"] = method(undefined, lengthdir_x);
                db[$ "lengthdir_y"] = method(undefined, lengthdir_y);
                db[$ "real"] = method(undefined, real);
                db[$ "bool"] = method(undefined, bool);
                db[$ "string"] = method(undefined, string);
                db[$ "int64"] = method(undefined, int64);
                db[$ "ptr"] = method(undefined, ptr);
                db[$ "string_format"] = method(undefined, string_format);
                db[$ "chr"] = method(undefined, chr);
                db[$ "ansi_char"] = method(undefined, ansi_char);
                db[$ "ord"] = method(undefined, ord);
                db[$ "method"] = method(undefined, catspeak_method);
                db[$ "method_get_index"] = method(undefined, catspeak_get_index);
                db[$ "method_get_self"] = method(undefined, catspeak_get_self);
                db[$ "string_length"] = method(undefined, string_length);
                db[$ "string_byte_length"] = method(undefined, string_byte_length);
                db[$ "string_pos"] = method(undefined, string_pos);
                db[$ "string_pos_ext"] = method(undefined, string_pos_ext);
                db[$ "string_last_pos"] = method(undefined, string_last_pos);
                db[$ "string_last_pos_ext"] = method(undefined, string_last_pos_ext);
                db[$ "string_copy"] = method(undefined, string_copy);
                db[$ "string_char_at"] = method(undefined, string_char_at);
                db[$ "string_ord_at"] = method(undefined, string_ord_at);
                db[$ "string_byte_at"] = method(undefined, string_byte_at);
                db[$ "string_set_byte_at"] = method(undefined, string_set_byte_at);
                db[$ "string_delete"] = method(undefined, string_delete);
                db[$ "string_insert"] = method(undefined, string_insert);
                db[$ "string_lower"] = method(undefined, string_lower);
                db[$ "string_upper"] = method(undefined, string_upper);
                db[$ "string_repeat"] = method(undefined, string_repeat);
                db[$ "string_letters"] = method(undefined, string_letters);
                db[$ "string_digits"] = method(undefined, string_digits);
                db[$ "string_lettersdigits"] = method(undefined, string_lettersdigits);
                db[$ "string_replace"] = method(undefined, string_replace);
                db[$ "string_replace_all"] = method(undefined, string_replace_all);
                db[$ "string_count"] = method(undefined, string_count);
                db[$ "string_hash_to_newline"] = method(undefined, string_hash_to_newline);
                db[$ "string_ext"] = method(undefined, string_ext);
                db[$ "string_trim_start"] = method(undefined, string_trim_start);
                db[$ "string_trim_end"] = method(undefined, string_trim_end);
                db[$ "string_trim"] = method(undefined, string_trim);
                db[$ "string_starts_with"] = method(undefined, string_starts_with);
                db[$ "string_ends_with"] = method(undefined, string_ends_with);
                db[$ "string_split"] = method(undefined, string_split);
                db[$ "string_split_ext"] = method(undefined, string_split_ext);
                db[$ "string_join"] = method(undefined, string_join);
                db[$ "string_join_ext"] = method(undefined, string_join_ext);
                db[$ "string_concat"] = method(undefined, string_concat);
                db[$ "string_concat_ext"] = method(undefined, string_concat_ext);
                db[$ "string_foreach"] = method(undefined, string_foreach);
                db[$ "clipboard_has_text"] = method(undefined, clipboard_has_text);
                db[$ "clipboard_set_text"] = method(undefined, clipboard_set_text);
                db[$ "clipboard_get_text"] = method(undefined, clipboard_get_text);
                db[$ "date_current_datetime"] = method(undefined, date_current_datetime);
                db[$ "date_create_datetime"] = method(undefined, date_create_datetime);
                db[$ "date_valid_datetime"] = method(undefined, date_valid_datetime);
                db[$ "date_inc_year"] = method(undefined, date_inc_year);
                db[$ "date_inc_month"] = method(undefined, date_inc_month);
                db[$ "date_inc_week"] = method(undefined, date_inc_week);
                db[$ "date_inc_day"] = method(undefined, date_inc_day);
                db[$ "date_inc_hour"] = method(undefined, date_inc_hour);
                db[$ "date_inc_minute"] = method(undefined, date_inc_minute);
                db[$ "date_inc_second"] = method(undefined, date_inc_second);
                db[$ "date_get_year"] = method(undefined, date_get_year);
                db[$ "date_get_month"] = method(undefined, date_get_month);
                db[$ "date_get_week"] = method(undefined, date_get_week);
                db[$ "date_get_day"] = method(undefined, date_get_day);
                db[$ "date_get_hour"] = method(undefined, date_get_hour);
                db[$ "date_get_minute"] = method(undefined, date_get_minute);
                db[$ "date_get_second"] = method(undefined, date_get_second);
                db[$ "date_get_weekday"] = method(undefined, date_get_weekday);
                db[$ "date_get_day_of_year"] = method(undefined, date_get_day_of_year);
                db[$ "date_get_hour_of_year"] = method(undefined, date_get_hour_of_year);
                db[$ "date_get_minute_of_year"] = method(undefined, date_get_minute_of_year);
                db[$ "date_get_second_of_year"] = method(undefined, date_get_second_of_year);
                db[$ "date_year_span"] = method(undefined, date_year_span);
                db[$ "date_month_span"] = method(undefined, date_month_span);
                db[$ "date_week_span"] = method(undefined, date_week_span);
                db[$ "date_day_span"] = method(undefined, date_day_span);
                db[$ "date_hour_span"] = method(undefined, date_hour_span);
                db[$ "date_minute_span"] = method(undefined, date_minute_span);
                db[$ "date_second_span"] = method(undefined, date_second_span);
                db[$ "date_compare_datetime"] = method(undefined, date_compare_datetime);
                db[$ "date_compare_date"] = method(undefined, date_compare_date);
                db[$ "date_compare_time"] = method(undefined, date_compare_time);
                db[$ "date_date_of"] = method(undefined, date_date_of);
                db[$ "date_time_of"] = method(undefined, date_time_of);
                db[$ "date_datetime_string"] = method(undefined, date_datetime_string);
                db[$ "date_date_string"] = method(undefined, date_date_string);
                db[$ "date_time_string"] = method(undefined, date_time_string);
                db[$ "date_days_in_month"] = method(undefined, date_days_in_month);
                db[$ "date_days_in_year"] = method(undefined, date_days_in_year);
                db[$ "date_leap_year"] = method(undefined, date_leap_year);
                db[$ "date_is_today"] = method(undefined, date_is_today);
                db[$ "date_set_timezone"] = method(undefined, date_set_timezone);
                db[$ "date_get_timezone"] = method(undefined, date_get_timezone);
                db[$ "timezone_local"] = timezone_local;
                db[$ "timezone_utc"] = timezone_utc;
                db[$ "game_set_speed"] = method(undefined, game_set_speed);
                db[$ "game_get_speed"] = method(undefined, game_get_speed);
                db[$ "gamespeed_fps"] = gamespeed_fps;
                db[$ "gamespeed_microseconds"] = gamespeed_microseconds;
                db[$ "motion_set"] = method(undefined, motion_set);
                db[$ "motion_add"] = method(undefined, motion_add);
                db[$ "place_free"] = method(undefined, place_free);
                db[$ "place_empty"] = method(undefined, place_empty);
                db[$ "place_meeting"] = method(undefined, place_meeting);
                db[$ "place_snapped"] = method(undefined, place_snapped);
                db[$ "move_random"] = method(undefined, move_random);
                db[$ "move_snap"] = method(undefined, move_snap);
                db[$ "move_towards_point"] = method(undefined, move_towards_point);
                db[$ "move_contact_solid"] = method(undefined, move_contact_solid);
                db[$ "move_contact_all"] = method(undefined, move_contact_all);
                db[$ "move_outside_solid"] = method(undefined, move_outside_solid);
                db[$ "move_outside_all"] = method(undefined, move_outside_all);
                db[$ "move_bounce_solid"] = method(undefined, move_bounce_solid);
                db[$ "move_bounce_all"] = method(undefined, move_bounce_all);
                db[$ "move_wrap"] = method(undefined, move_wrap);
                db[$ "move_and_collide"] = method(undefined, move_and_collide);
                db[$ "distance_to_point"] = method(undefined, distance_to_point);
                db[$ "distance_to_object"] = method(undefined, distance_to_object);
                db[$ "position_empty"] = method(undefined, position_empty);
                db[$ "position_meeting"] = method(undefined, position_meeting);
                db[$ "path_start"] = method(undefined, path_start);
                db[$ "path_end"] = method(undefined, path_end);
                db[$ "mp_linear_step"] = method(undefined, mp_linear_step);
                db[$ "mp_potential_step"] = method(undefined, mp_potential_step);
                db[$ "mp_linear_step_object"] = method(undefined, mp_linear_step_object);
                db[$ "mp_potential_step_object"] = method(undefined, mp_potential_step_object);
                db[$ "mp_potential_settings"] = method(undefined, mp_potential_settings);
                db[$ "mp_linear_path"] = method(undefined, mp_linear_path);
                db[$ "mp_potential_path"] = method(undefined, mp_potential_path);
                db[$ "mp_linear_path_object"] = method(undefined, mp_linear_path_object);
                db[$ "mp_potential_path_object"] = method(undefined, mp_potential_path_object);
                db[$ "mp_grid_create"] = method(undefined, mp_grid_create);
                db[$ "mp_grid_destroy"] = method(undefined, mp_grid_destroy);
                db[$ "mp_grid_clear_all"] = method(undefined, mp_grid_clear_all);
                db[$ "mp_grid_clear_cell"] = method(undefined, mp_grid_clear_cell);
                db[$ "mp_grid_clear_rectangle"] = method(undefined, mp_grid_clear_rectangle);
                db[$ "mp_grid_add_cell"] = method(undefined, mp_grid_add_cell);
                db[$ "mp_grid_get_cell"] = method(undefined, mp_grid_get_cell);
                db[$ "mp_grid_add_rectangle"] = method(undefined, mp_grid_add_rectangle);
                db[$ "mp_grid_add_instances"] = method(undefined, mp_grid_add_instances);
                db[$ "mp_grid_path"] = method(undefined, mp_grid_path);
                db[$ "mp_grid_draw"] = method(undefined, mp_grid_draw);
                db[$ "mp_grid_to_ds_grid"] = method(undefined, mp_grid_to_ds_grid);
                db[$ "collision_point"] = method(undefined, collision_point);
                db[$ "collision_rectangle"] = method(undefined, collision_rectangle);
                db[$ "collision_circle"] = method(undefined, collision_circle);
                db[$ "collision_ellipse"] = method(undefined, collision_ellipse);
                db[$ "collision_line"] = method(undefined, collision_line);
                db[$ "collision_point_list"] = method(undefined, collision_point_list);
                db[$ "collision_rectangle_list"] = method(undefined, collision_rectangle_list);
                db[$ "collision_circle_list"] = method(undefined, collision_circle_list);
                db[$ "collision_ellipse_list"] = method(undefined, collision_ellipse_list);
                db[$ "collision_line_list"] = method(undefined, collision_line_list);
                db[$ "instance_position_list"] = method(undefined, instance_position_list);
                db[$ "instance_place_list"] = method(undefined, instance_place_list);
                db[$ "point_in_rectangle"] = method(undefined, point_in_rectangle);
                db[$ "point_in_triangle"] = method(undefined, point_in_triangle);
                db[$ "point_in_circle"] = method(undefined, point_in_circle);
                db[$ "rectangle_in_rectangle"] = method(undefined, rectangle_in_rectangle);
                db[$ "rectangle_in_triangle"] = method(undefined, rectangle_in_triangle);
                db[$ "rectangle_in_circle"] = method(undefined, rectangle_in_circle);
                db[$ "instance_find"] = method(undefined, instance_find);
                db[$ "instance_exists"] = method(undefined, instance_exists);
                db[$ "instance_number"] = method(undefined, instance_number);
                db[$ "instance_position"] = method(undefined, instance_position);
                db[$ "instance_nearest"] = method(undefined, instance_nearest);
                db[$ "instance_furthest"] = method(undefined, instance_furthest);
                db[$ "instance_place"] = method(undefined, instance_place);
                db[$ "instance_create_depth"] = method(undefined, instance_create_depth);
                db[$ "instance_create_layer"] = method(undefined, instance_create_layer);
                db[$ "instance_copy"] = method(undefined, instance_copy);
                db[$ "instance_change"] = method(undefined, instance_change);
                db[$ "instance_destroy"] = method(undefined, instance_destroy);
                db[$ "position_destroy"] = method(undefined, position_destroy);
                db[$ "position_change"] = method(undefined, position_change);
                db[$ "instance_id_get"] = method(undefined, instance_id_get);
                db[$ "instance_deactivate_all"] = method(undefined, instance_deactivate_all);
                db[$ "instance_deactivate_object"] = method(undefined, instance_deactivate_object);
                db[$ "instance_deactivate_region"] = method(undefined, instance_deactivate_region);
                db[$ "instance_activate_all"] = method(undefined, instance_activate_all);
                db[$ "instance_activate_object"] = method(undefined, instance_activate_object);
                db[$ "instance_activate_region"] = method(undefined, instance_activate_region);
                db[$ "room_speed_get"] = method(undefined, function () { return room_speed });
                db[$ "room_speed_set"] = method(undefined, function (__val) { room_speed = __val });
                db[$ "fps_get"] = method(undefined, function () { return fps });
                db[$ "fps_real_get"] = method(undefined, function () { return fps_real });
                db[$ "current_time_get"] = method(undefined, function () { return current_time });
                db[$ "current_year_get"] = method(undefined, function () { return current_year });
                db[$ "current_month_get"] = method(undefined, function () { return current_month });
                db[$ "current_day_get"] = method(undefined, function () { return current_day });
                db[$ "current_weekday_get"] = method(undefined, function () { return current_weekday });
                db[$ "current_hour_get"] = method(undefined, function () { return current_hour });
                db[$ "current_minute_get"] = method(undefined, function () { return current_minute });
                db[$ "current_second_get"] = method(undefined, function () { return current_second });
                db[$ "room_get"] = method(undefined, function () { return room });
                db[$ "room_set"] = method(undefined, function (__val) { room = __val });
                db[$ "room_first_get"] = method(undefined, function () { return room_first });
                db[$ "room_last_get"] = method(undefined, function () { return room_last });
                db[$ "room_width_get"] = method(undefined, function () { return room_width });
                db[$ "room_height_get"] = method(undefined, function () { return room_height });
                db[$ "room_persistent_get"] = method(undefined, function () { return room_persistent });
                db[$ "room_persistent_set"] = method(undefined, function (__val) { room_persistent = __val });
                db[$ "room_goto"] = method(undefined, room_goto);
                db[$ "room_goto_previous"] = method(undefined, room_goto_previous);
                db[$ "room_goto_next"] = method(undefined, room_goto_next);
                db[$ "room_previous"] = method(undefined, room_previous);
                db[$ "room_next"] = method(undefined, room_next);
                db[$ "room_restart"] = method(undefined, room_restart);
                db[$ "game_end"] = method(undefined, game_end);
                db[$ "game_restart"] = method(undefined, game_restart);
                db[$ "game_load"] = method(undefined, game_load);
                db[$ "game_save"] = method(undefined, game_save);
                db[$ "game_save_buffer"] = method(undefined, game_save_buffer);
                db[$ "game_load_buffer"] = method(undefined, game_load_buffer);
                db[$ "scheduler_resolution_set"] = method(undefined, scheduler_resolution_set);
                db[$ "scheduler_resolution_get"] = method(undefined, scheduler_resolution_get);
                db[$ "score_get"] = method(undefined, function () { return score });
                db[$ "score_set"] = method(undefined, function (__val) { score = __val });
                db[$ "lives_get"] = method(undefined, function () { return lives });
                db[$ "lives_set"] = method(undefined, function (__val) { lives = __val });
                db[$ "health_get"] = method(undefined, function () { return health });
                db[$ "health_set"] = method(undefined, function (__val) { health = __val });
                db[$ "event_perform"] = method(undefined, event_perform);
                db[$ "event_perform_async"] = method(undefined, event_perform_async);
                db[$ "event_user"] = method(undefined, event_user);
                db[$ "event_perform_object"] = method(undefined, event_perform_object);
                db[$ "event_inherited"] = method(undefined, event_inherited);
                db[$ "event_type_get"] = method(undefined, function () { return event_type });
                db[$ "event_number_get"] = method(undefined, function () { return event_number });
                db[$ "event_object_get"] = method(undefined, function () { return event_object });
                db[$ "event_action_get"] = method(undefined, function () { return event_action });
                db[$ "ev_create"] = ev_create;
                db[$ "ev_pre_create"] = ev_pre_create;
                db[$ "ev_destroy"] = ev_destroy;
                db[$ "ev_step"] = ev_step;
                db[$ "ev_alarm"] = ev_alarm;
                db[$ "ev_keyboard"] = ev_keyboard;
                db[$ "ev_mouse"] = ev_mouse;
                db[$ "ev_collision"] = ev_collision;
                db[$ "ev_other"] = ev_other;
                db[$ "ev_draw"] = ev_draw;
                db[$ "ev_draw_begin"] = ev_draw_begin;
                db[$ "ev_draw_end"] = ev_draw_end;
                db[$ "ev_draw_pre"] = ev_draw_pre;
                db[$ "ev_draw_post"] = ev_draw_post;
                db[$ "ev_keypress"] = ev_keypress;
                db[$ "ev_keyrelease"] = ev_keyrelease;
                db[$ "ev_trigger"] = ev_trigger;
                db[$ "ev_left_button"] = ev_left_button;
                db[$ "ev_right_button"] = ev_right_button;
                db[$ "ev_middle_button"] = ev_middle_button;
                db[$ "ev_no_button"] = ev_no_button;
                db[$ "ev_left_press"] = ev_left_press;
                db[$ "ev_right_press"] = ev_right_press;
                db[$ "ev_middle_press"] = ev_middle_press;
                db[$ "ev_left_release"] = ev_left_release;
                db[$ "ev_right_release"] = ev_right_release;
                db[$ "ev_middle_release"] = ev_middle_release;
                db[$ "ev_mouse_enter"] = ev_mouse_enter;
                db[$ "ev_mouse_leave"] = ev_mouse_leave;
                db[$ "ev_mouse_wheel_up"] = ev_mouse_wheel_up;
                db[$ "ev_mouse_wheel_down"] = ev_mouse_wheel_down;
                db[$ "ev_global_left_button"] = ev_global_left_button;
                db[$ "ev_global_right_button"] = ev_global_right_button;
                db[$ "ev_global_middle_button"] = ev_global_middle_button;
                db[$ "ev_global_left_press"] = ev_global_left_press;
                db[$ "ev_global_right_press"] = ev_global_right_press;
                db[$ "ev_global_middle_press"] = ev_global_middle_press;
                db[$ "ev_global_left_release"] = ev_global_left_release;
                db[$ "ev_global_right_release"] = ev_global_right_release;
                db[$ "ev_global_middle_release"] = ev_global_middle_release;
                db[$ "ev_joystick1_left"] = ev_joystick1_left;
                db[$ "ev_joystick1_right"] = ev_joystick1_right;
                db[$ "ev_joystick1_up"] = ev_joystick1_up;
                db[$ "ev_joystick1_down"] = ev_joystick1_down;
                db[$ "ev_joystick1_button1"] = ev_joystick1_button1;
                db[$ "ev_joystick1_button2"] = ev_joystick1_button2;
                db[$ "ev_joystick1_button3"] = ev_joystick1_button3;
                db[$ "ev_joystick1_button4"] = ev_joystick1_button4;
                db[$ "ev_joystick1_button5"] = ev_joystick1_button5;
                db[$ "ev_joystick1_button6"] = ev_joystick1_button6;
                db[$ "ev_joystick1_button7"] = ev_joystick1_button7;
                db[$ "ev_joystick1_button8"] = ev_joystick1_button8;
                db[$ "ev_joystick2_left"] = ev_joystick2_left;
                db[$ "ev_joystick2_right"] = ev_joystick2_right;
                db[$ "ev_joystick2_up"] = ev_joystick2_up;
                db[$ "ev_joystick2_down"] = ev_joystick2_down;
                db[$ "ev_joystick2_button1"] = ev_joystick2_button1;
                db[$ "ev_joystick2_button2"] = ev_joystick2_button2;
                db[$ "ev_joystick2_button3"] = ev_joystick2_button3;
                db[$ "ev_joystick2_button4"] = ev_joystick2_button4;
                db[$ "ev_joystick2_button5"] = ev_joystick2_button5;
                db[$ "ev_joystick2_button6"] = ev_joystick2_button6;
                db[$ "ev_joystick2_button7"] = ev_joystick2_button7;
                db[$ "ev_joystick2_button8"] = ev_joystick2_button8;
                db[$ "ev_outside"] = ev_outside;
                db[$ "ev_boundary"] = ev_boundary;
                db[$ "ev_game_start"] = ev_game_start;
                db[$ "ev_game_end"] = ev_game_end;
                db[$ "ev_room_start"] = ev_room_start;
                db[$ "ev_room_end"] = ev_room_end;
                db[$ "ev_no_more_lives"] = ev_no_more_lives;
                db[$ "ev_animation_end"] = ev_animation_end;
                db[$ "ev_end_of_path"] = ev_end_of_path;
                db[$ "ev_no_more_health"] = ev_no_more_health;
                db[$ "ev_user0"] = ev_user0;
                db[$ "ev_user1"] = ev_user1;
                db[$ "ev_user2"] = ev_user2;
                db[$ "ev_user3"] = ev_user3;
                db[$ "ev_user4"] = ev_user4;
                db[$ "ev_user5"] = ev_user5;
                db[$ "ev_user6"] = ev_user6;
                db[$ "ev_user7"] = ev_user7;
                db[$ "ev_user8"] = ev_user8;
                db[$ "ev_user9"] = ev_user9;
                db[$ "ev_user10"] = ev_user10;
                db[$ "ev_user11"] = ev_user11;
                db[$ "ev_user12"] = ev_user12;
                db[$ "ev_user13"] = ev_user13;
                db[$ "ev_user14"] = ev_user14;
                db[$ "ev_user15"] = ev_user15;
                db[$ "ev_outside_view0"] = ev_outside_view0;
                db[$ "ev_outside_view1"] = ev_outside_view1;
                db[$ "ev_outside_view2"] = ev_outside_view2;
                db[$ "ev_outside_view3"] = ev_outside_view3;
                db[$ "ev_outside_view4"] = ev_outside_view4;
                db[$ "ev_outside_view5"] = ev_outside_view5;
                db[$ "ev_outside_view6"] = ev_outside_view6;
                db[$ "ev_outside_view7"] = ev_outside_view7;
                db[$ "ev_boundary_view0"] = ev_boundary_view0;
                db[$ "ev_boundary_view1"] = ev_boundary_view1;
                db[$ "ev_boundary_view2"] = ev_boundary_view2;
                db[$ "ev_boundary_view3"] = ev_boundary_view3;
                db[$ "ev_boundary_view4"] = ev_boundary_view4;
                db[$ "ev_boundary_view5"] = ev_boundary_view5;
                db[$ "ev_boundary_view6"] = ev_boundary_view6;
                db[$ "ev_boundary_view7"] = ev_boundary_view7;
                db[$ "ev_animation_update"] = ev_animation_update;
                db[$ "ev_animation_event"] = ev_animation_event;
                db[$ "ev_web_image_load"] = ev_web_image_load;
                db[$ "ev_web_sound_load"] = ev_web_sound_load;
                db[$ "ev_web_async"] = ev_web_async;
                db[$ "ev_dialog_async"] = ev_dialog_async;
                db[$ "ev_web_iap"] = ev_web_iap;
                db[$ "ev_web_cloud"] = ev_web_cloud;
                db[$ "ev_web_networking"] = ev_web_networking;
                db[$ "ev_web_steam"] = ev_web_steam;
                db[$ "ev_social"] = ev_social;
                db[$ "ev_push_notification"] = ev_push_notification;
                db[$ "ev_async_save_load"] = ev_async_save_load;
                db[$ "ev_audio_recording"] = ev_audio_recording;
                db[$ "ev_audio_playback"] = ev_audio_playback;
                db[$ "ev_system_event"] = ev_system_event;
                db[$ "ev_broadcast_message"] = ev_broadcast_message;
                db[$ "ev_step_normal"] = ev_step_normal;
                db[$ "ev_step_begin"] = ev_step_begin;
                db[$ "ev_step_end"] = ev_step_end;
                db[$ "ev_gui"] = ev_gui;
                db[$ "ev_gui_begin"] = ev_gui_begin;
                db[$ "ev_gui_end"] = ev_gui_end;
                db[$ "ev_cleanup"] = ev_cleanup;
                db[$ "ev_gesture"] = ev_gesture;
                db[$ "ev_gesture_tap"] = ev_gesture_tap;
                db[$ "ev_gesture_double_tap"] = ev_gesture_double_tap;
                db[$ "ev_gesture_drag_start"] = ev_gesture_drag_start;
                db[$ "ev_gesture_dragging"] = ev_gesture_dragging;
                db[$ "ev_gesture_drag_end"] = ev_gesture_drag_end;
                db[$ "ev_gesture_flick"] = ev_gesture_flick;
                db[$ "ev_gesture_pinch_start"] = ev_gesture_pinch_start;
                db[$ "ev_gesture_pinch_in"] = ev_gesture_pinch_in;
                db[$ "ev_gesture_pinch_out"] = ev_gesture_pinch_out;
                db[$ "ev_gesture_pinch_end"] = ev_gesture_pinch_end;
                db[$ "ev_gesture_rotate_start"] = ev_gesture_rotate_start;
                db[$ "ev_gesture_rotating"] = ev_gesture_rotating;
                db[$ "ev_gesture_rotate_end"] = ev_gesture_rotate_end;
                db[$ "ev_global_gesture_tap"] = ev_global_gesture_tap;
                db[$ "ev_global_gesture_double_tap"] = ev_global_gesture_double_tap;
                db[$ "ev_global_gesture_drag_start"] = ev_global_gesture_drag_start;
                db[$ "ev_global_gesture_dragging"] = ev_global_gesture_dragging;
                db[$ "ev_global_gesture_drag_end"] = ev_global_gesture_drag_end;
                db[$ "ev_global_gesture_flick"] = ev_global_gesture_flick;
                db[$ "ev_global_gesture_pinch_start"] = ev_global_gesture_pinch_start;
                db[$ "ev_global_gesture_pinch_in"] = ev_global_gesture_pinch_in;
                db[$ "ev_global_gesture_pinch_out"] = ev_global_gesture_pinch_out;
                db[$ "ev_global_gesture_pinch_end"] = ev_global_gesture_pinch_end;
                db[$ "ev_global_gesture_rotate_start"] = ev_global_gesture_rotate_start;
                db[$ "ev_global_gesture_rotating"] = ev_global_gesture_rotating;
                db[$ "ev_global_gesture_rotate_end"] = ev_global_gesture_rotate_end;
                db[$ "ev_async_web_image_load"] = ev_async_web_image_load;
                db[$ "ev_async_web"] = ev_async_web;
                db[$ "ev_async_dialog"] = ev_async_dialog;
                db[$ "ev_async_web_iap"] = ev_async_web_iap;
                db[$ "ev_async_web_cloud"] = ev_async_web_cloud;
                db[$ "ev_async_web_networking"] = ev_async_web_networking;
                db[$ "ev_async_web_steam"] = ev_async_web_steam;
                db[$ "ev_async_social"] = ev_async_social;
                db[$ "ev_async_push_notification"] = ev_async_push_notification;
                db[$ "ev_async_audio_recording"] = ev_async_audio_recording;
                db[$ "ev_async_audio_playback"] = ev_async_audio_playback;
                db[$ "ev_async_system_event"] = ev_async_system_event;
                db[$ "application_surface_get"] = method(undefined, function () { return application_surface });
                db[$ "show_debug_message"] = method(undefined, show_debug_message);
                db[$ "show_debug_overlay"] = method(undefined, show_debug_overlay);
                db[$ "debug_mode_get"] = method(undefined, function () { return debug_mode });
                db[$ "debug_event"] = method(undefined, debug_event);
                db[$ "debug_get_callstack"] = method(undefined, debug_get_callstack);
                db[$ "alarm_get"] = method(undefined, alarm_get);
                db[$ "alarm_set"] = method(undefined, alarm_set);
                db[$ "font_texture_page_size_get"] = method(undefined, function () { return font_texture_page_size });
                db[$ "font_texture_page_size_set"] = method(undefined, function (__val) { font_texture_page_size = __val });
                db[$ "keyboard_key_get"] = method(undefined, function () { return keyboard_key });
                db[$ "keyboard_key_set"] = method(undefined, function (__val) { keyboard_key = __val });
                db[$ "keyboard_lastkey_get"] = method(undefined, function () { return keyboard_lastkey });
                db[$ "keyboard_lastkey_set"] = method(undefined, function (__val) { keyboard_lastkey = __val });
                db[$ "keyboard_lastchar_get"] = method(undefined, function () { return keyboard_lastchar });
                db[$ "keyboard_lastchar_set"] = method(undefined, function (__val) { keyboard_lastchar = __val });
                db[$ "keyboard_string_get"] = method(undefined, function () { return keyboard_string });
                db[$ "keyboard_string_set"] = method(undefined, function (__val) { keyboard_string = __val });
                db[$ "keyboard_set_map"] = method(undefined, keyboard_set_map);
                db[$ "keyboard_get_map"] = method(undefined, keyboard_get_map);
                db[$ "keyboard_unset_map"] = method(undefined, keyboard_unset_map);
                db[$ "keyboard_check"] = method(undefined, keyboard_check);
                db[$ "keyboard_check_pressed"] = method(undefined, keyboard_check_pressed);
                db[$ "keyboard_check_released"] = method(undefined, keyboard_check_released);
                db[$ "keyboard_check_direct"] = method(undefined, keyboard_check_direct);
                db[$ "keyboard_get_numlock"] = method(undefined, keyboard_get_numlock);
                db[$ "keyboard_set_numlock"] = method(undefined, keyboard_set_numlock);
                db[$ "keyboard_key_press"] = method(undefined, keyboard_key_press);
                db[$ "keyboard_key_release"] = method(undefined, keyboard_key_release);
                db[$ "vk_nokey"] = vk_nokey;
                db[$ "vk_anykey"] = vk_anykey;
                db[$ "vk_enter"] = vk_enter;
                db[$ "vk_return"] = vk_return;
                db[$ "vk_shift"] = vk_shift;
                db[$ "vk_control"] = vk_control;
                db[$ "vk_alt"] = vk_alt;
                db[$ "vk_escape"] = vk_escape;
                db[$ "vk_space"] = vk_space;
                db[$ "vk_backspace"] = vk_backspace;
                db[$ "vk_tab"] = vk_tab;
                db[$ "vk_pause"] = vk_pause;
                db[$ "vk_printscreen"] = vk_printscreen;
                db[$ "vk_left"] = vk_left;
                db[$ "vk_right"] = vk_right;
                db[$ "vk_up"] = vk_up;
                db[$ "vk_down"] = vk_down;
                db[$ "vk_home"] = vk_home;
                db[$ "vk_end"] = vk_end;
                db[$ "vk_delete"] = vk_delete;
                db[$ "vk_insert"] = vk_insert;
                db[$ "vk_pageup"] = vk_pageup;
                db[$ "vk_pagedown"] = vk_pagedown;
                db[$ "vk_f1"] = vk_f1;
                db[$ "vk_f2"] = vk_f2;
                db[$ "vk_f3"] = vk_f3;
                db[$ "vk_f4"] = vk_f4;
                db[$ "vk_f5"] = vk_f5;
                db[$ "vk_f6"] = vk_f6;
                db[$ "vk_f7"] = vk_f7;
                db[$ "vk_f8"] = vk_f8;
                db[$ "vk_f9"] = vk_f9;
                db[$ "vk_f10"] = vk_f10;
                db[$ "vk_f11"] = vk_f11;
                db[$ "vk_f12"] = vk_f12;
                db[$ "vk_numpad0"] = vk_numpad0;
                db[$ "vk_numpad1"] = vk_numpad1;
                db[$ "vk_numpad2"] = vk_numpad2;
                db[$ "vk_numpad3"] = vk_numpad3;
                db[$ "vk_numpad4"] = vk_numpad4;
                db[$ "vk_numpad5"] = vk_numpad5;
                db[$ "vk_numpad6"] = vk_numpad6;
                db[$ "vk_numpad7"] = vk_numpad7;
                db[$ "vk_numpad8"] = vk_numpad8;
                db[$ "vk_numpad9"] = vk_numpad9;
                db[$ "vk_divide"] = vk_divide;
                db[$ "vk_multiply"] = vk_multiply;
                db[$ "vk_subtract"] = vk_subtract;
                db[$ "vk_add"] = vk_add;
                db[$ "vk_decimal"] = vk_decimal;
                db[$ "vk_lshift"] = vk_lshift;
                db[$ "vk_lcontrol"] = vk_lcontrol;
                db[$ "vk_lalt"] = vk_lalt;
                db[$ "vk_rshift"] = vk_rshift;
                db[$ "vk_rcontrol"] = vk_rcontrol;
                db[$ "vk_ralt"] = vk_ralt;
                db[$ "keyboard_clear"] = method(undefined, keyboard_clear);
                db[$ "io_clear"] = method(undefined, io_clear);
                db[$ "mouse_x_get"] = method(undefined, function () { return mouse_x });
                db[$ "mouse_y_get"] = method(undefined, function () { return mouse_y });
                db[$ "mouse_button_get"] = method(undefined, function () { return mouse_button });
                db[$ "mouse_button_set"] = method(undefined, function (__val) { mouse_button = __val });
                db[$ "mouse_lastbutton_get"] = method(undefined, function () { return mouse_lastbutton });
                db[$ "mouse_lastbutton_set"] = method(undefined, function (__val) { mouse_lastbutton = __val });
                db[$ "mb_any"] = mb_any;
                db[$ "mb_none"] = mb_none;
                db[$ "mb_left"] = mb_left;
                db[$ "mb_right"] = mb_right;
                db[$ "mb_middle"] = mb_middle;
                db[$ "mb_side1"] = mb_side1;
                db[$ "mb_side2"] = mb_side2;
                db[$ "m_axisx"] = m_axisx;
                db[$ "m_axisy"] = m_axisy;
                db[$ "m_axisx_gui"] = m_axisx_gui;
                db[$ "m_axisy_gui"] = m_axisy_gui;
                db[$ "m_scroll_up"] = m_scroll_up;
                db[$ "m_scroll_down"] = m_scroll_down;
                db[$ "mouse_check_button"] = method(undefined, mouse_check_button);
                db[$ "mouse_check_button_pressed"] = method(undefined, mouse_check_button_pressed);
                db[$ "mouse_check_button_released"] = method(undefined, mouse_check_button_released);
                db[$ "mouse_wheel_up"] = method(undefined, mouse_wheel_up);
                db[$ "mouse_wheel_down"] = method(undefined, mouse_wheel_down);
                db[$ "mouse_clear"] = method(undefined, mouse_clear);
                db[$ "cursor_sprite_get"] = method(undefined, function () { return cursor_sprite });
                db[$ "cursor_sprite_set"] = method(undefined, function (__val) { cursor_sprite = __val });
                db[$ "bboxmode_automatic"] = bboxmode_automatic;
                db[$ "bboxmode_fullimage"] = bboxmode_fullimage;
                db[$ "bboxmode_manual"] = bboxmode_manual;
                db[$ "bboxkind_precise"] = bboxkind_precise;
                db[$ "bboxkind_rectangular"] = bboxkind_rectangular;
                db[$ "bboxkind_ellipse"] = bboxkind_ellipse;
                db[$ "bboxkind_diamond"] = bboxkind_diamond;
                db[$ "background_colour_get"] = method(undefined, function () { return background_colour });
                db[$ "background_colour_set"] = method(undefined, function (__val) { background_colour = __val });
                db[$ "background_showcolour_get"] = method(undefined, function () { return background_showcolour });
                db[$ "background_showcolour_set"] = method(undefined, function (__val) { background_showcolour = __val });
                db[$ "background_color_get"] = method(undefined, function () { return background_color });
                db[$ "background_color_set"] = method(undefined, function (__val) { background_color = __val });
                db[$ "background_showcolor_get"] = method(undefined, function () { return background_showcolor });
                db[$ "background_showcolor_set"] = method(undefined, function (__val) { background_showcolor = __val });
                db[$ "draw_self"] = method(undefined, draw_self);
                db[$ "draw_sprite"] = method(undefined, draw_sprite);
                db[$ "draw_sprite_pos"] = method(undefined, draw_sprite_pos);
                db[$ "draw_sprite_ext"] = method(undefined, draw_sprite_ext);
                db[$ "draw_sprite_stretched"] = method(undefined, draw_sprite_stretched);
                db[$ "draw_sprite_stretched_ext"] = method(undefined, draw_sprite_stretched_ext);
                db[$ "draw_sprite_tiled"] = method(undefined, draw_sprite_tiled);
                db[$ "draw_sprite_tiled_ext"] = method(undefined, draw_sprite_tiled_ext);
                db[$ "draw_sprite_part"] = method(undefined, draw_sprite_part);
                db[$ "draw_sprite_part_ext"] = method(undefined, draw_sprite_part_ext);
                db[$ "draw_sprite_general"] = method(undefined, draw_sprite_general);
                db[$ "draw_clear"] = method(undefined, draw_clear);
                db[$ "draw_clear_alpha"] = method(undefined, draw_clear_alpha);
                db[$ "draw_point"] = method(undefined, draw_point);
                db[$ "draw_line"] = method(undefined, draw_line);
                db[$ "draw_line_width"] = method(undefined, draw_line_width);
                db[$ "draw_rectangle"] = method(undefined, draw_rectangle);
                db[$ "draw_roundrect"] = method(undefined, draw_roundrect);
                db[$ "draw_roundrect_ext"] = method(undefined, draw_roundrect_ext);
                db[$ "draw_triangle"] = method(undefined, draw_triangle);
                db[$ "draw_circle"] = method(undefined, draw_circle);
                db[$ "draw_ellipse"] = method(undefined, draw_ellipse);
                db[$ "draw_set_circle_precision"] = method(undefined, draw_set_circle_precision);
                db[$ "draw_arrow"] = method(undefined, draw_arrow);
                db[$ "draw_button"] = method(undefined, draw_button);
                db[$ "draw_path"] = method(undefined, draw_path);
                db[$ "draw_healthbar"] = method(undefined, draw_healthbar);
                db[$ "draw_getpixel"] = method(undefined, draw_getpixel);
                db[$ "draw_getpixel_ext"] = method(undefined, draw_getpixel_ext);
                db[$ "draw_set_colour"] = method(undefined, draw_set_colour);
                db[$ "draw_set_color"] = method(undefined, draw_set_color);
                db[$ "draw_set_alpha"] = method(undefined, draw_set_alpha);
                db[$ "draw_get_colour"] = method(undefined, draw_get_colour);
                db[$ "draw_get_color"] = method(undefined, draw_get_color);
                db[$ "draw_get_alpha"] = method(undefined, draw_get_alpha);
                db[$ "c_aqua"] = c_aqua;
                db[$ "c_black"] = c_black;
                db[$ "c_blue"] = c_blue;
                db[$ "c_dkgray"] = c_dkgray;
                db[$ "c_dkgrey"] = c_dkgrey;
                db[$ "c_fuchsia"] = c_fuchsia;
                db[$ "c_gray"] = c_gray;
                db[$ "c_grey"] = c_grey;
                db[$ "c_green"] = c_green;
                db[$ "c_lime"] = c_lime;
                db[$ "c_ltgray"] = c_ltgray;
                db[$ "c_ltgrey"] = c_ltgrey;
                db[$ "c_maroon"] = c_maroon;
                db[$ "c_navy"] = c_navy;
                db[$ "c_olive"] = c_olive;
                db[$ "c_purple"] = c_purple;
                db[$ "c_red"] = c_red;
                db[$ "c_silver"] = c_silver;
                db[$ "c_teal"] = c_teal;
                db[$ "c_white"] = c_white;
                db[$ "c_yellow"] = c_yellow;
                db[$ "c_orange"] = c_orange;
                db[$ "merge_colour"] = method(undefined, merge_colour);
                db[$ "make_colour_rgb"] = method(undefined, make_colour_rgb);
                db[$ "make_colour_hsv"] = method(undefined, make_colour_hsv);
                db[$ "colour_get_red"] = method(undefined, colour_get_red);
                db[$ "colour_get_green"] = method(undefined, colour_get_green);
                db[$ "colour_get_blue"] = method(undefined, colour_get_blue);
                db[$ "colour_get_hue"] = method(undefined, colour_get_hue);
                db[$ "colour_get_saturation"] = method(undefined, colour_get_saturation);
                db[$ "colour_get_value"] = method(undefined, colour_get_value);
                db[$ "merge_color"] = method(undefined, merge_color);
                db[$ "make_color_rgb"] = method(undefined, make_color_rgb);
                db[$ "make_color_hsv"] = method(undefined, make_color_hsv);
                db[$ "color_get_red"] = method(undefined, color_get_red);
                db[$ "color_get_green"] = method(undefined, color_get_green);
                db[$ "color_get_blue"] = method(undefined, color_get_blue);
                db[$ "color_get_hue"] = method(undefined, color_get_hue);
                db[$ "color_get_saturation"] = method(undefined, color_get_saturation);
                db[$ "color_get_value"] = method(undefined, color_get_value);
                db[$ "screen_save"] = method(undefined, screen_save);
                db[$ "screen_save_part"] = method(undefined, screen_save_part);
                db[$ "gif_open"] = method(undefined, gif_open);
                db[$ "gif_add_surface"] = method(undefined, gif_add_surface);
                db[$ "gif_save"] = method(undefined, gif_save);
                db[$ "gif_save_buffer"] = method(undefined, gif_save_buffer);
                db[$ "draw_set_font"] = method(undefined, draw_set_font);
                db[$ "draw_get_font"] = method(undefined, draw_get_font);
                db[$ "draw_set_halign"] = method(undefined, draw_set_halign);
                db[$ "draw_get_halign"] = method(undefined, draw_get_halign);
                db[$ "fa_left"] = fa_left;
                db[$ "fa_center"] = fa_center;
                db[$ "fa_right"] = fa_right;
                db[$ "draw_set_valign"] = method(undefined, draw_set_valign);
                db[$ "draw_get_valign"] = method(undefined, draw_get_valign);
                db[$ "fa_top"] = fa_top;
                db[$ "fa_middle"] = fa_middle;
                db[$ "fa_bottom"] = fa_bottom;
                db[$ "draw_text"] = method(undefined, draw_text);
                db[$ "draw_text_ext"] = method(undefined, draw_text_ext);
                db[$ "string_width"] = method(undefined, string_width);
                db[$ "string_height"] = method(undefined, string_height);
                db[$ "string_width_ext"] = method(undefined, string_width_ext);
                db[$ "string_height_ext"] = method(undefined, string_height_ext);
                db[$ "draw_text_transformed"] = method(undefined, draw_text_transformed);
                db[$ "draw_text_ext_transformed"] = method(undefined, draw_text_ext_transformed);
                db[$ "draw_text_colour"] = method(undefined, draw_text_colour);
                db[$ "draw_text_ext_colour"] = method(undefined, draw_text_ext_colour);
                db[$ "draw_text_transformed_colour"] = method(undefined, draw_text_transformed_colour);
                db[$ "draw_text_ext_transformed_colour"] = method(undefined, draw_text_ext_transformed_colour);
                db[$ "draw_text_color"] = method(undefined, draw_text_color);
                db[$ "draw_text_ext_color"] = method(undefined, draw_text_ext_color);
                db[$ "draw_text_transformed_color"] = method(undefined, draw_text_transformed_color);
                db[$ "draw_text_ext_transformed_color"] = method(undefined, draw_text_ext_transformed_color);
                db[$ "draw_point_colour"] = method(undefined, draw_point_colour);
                db[$ "draw_line_colour"] = method(undefined, draw_line_colour);
                db[$ "draw_line_width_colour"] = method(undefined, draw_line_width_colour);
                db[$ "draw_rectangle_colour"] = method(undefined, draw_rectangle_colour);
                db[$ "draw_roundrect_colour"] = method(undefined, draw_roundrect_colour);
                db[$ "draw_roundrect_colour_ext"] = method(undefined, draw_roundrect_colour_ext);
                db[$ "draw_triangle_colour"] = method(undefined, draw_triangle_colour);
                db[$ "draw_circle_colour"] = method(undefined, draw_circle_colour);
                db[$ "draw_ellipse_colour"] = method(undefined, draw_ellipse_colour);
                db[$ "draw_point_color"] = method(undefined, draw_point_color);
                db[$ "draw_line_color"] = method(undefined, draw_line_color);
                db[$ "draw_line_width_color"] = method(undefined, draw_line_width_color);
                db[$ "draw_rectangle_color"] = method(undefined, draw_rectangle_color);
                db[$ "draw_roundrect_color"] = method(undefined, draw_roundrect_color);
                db[$ "draw_roundrect_color_ext"] = method(undefined, draw_roundrect_color_ext);
                db[$ "draw_triangle_color"] = method(undefined, draw_triangle_color);
                db[$ "draw_circle_color"] = method(undefined, draw_circle_color);
                db[$ "draw_ellipse_color"] = method(undefined, draw_ellipse_color);
                db[$ "pr_pointlist"] = pr_pointlist;
                db[$ "pr_linelist"] = pr_linelist;
                db[$ "pr_linestrip"] = pr_linestrip;
                db[$ "pr_trianglelist"] = pr_trianglelist;
                db[$ "pr_trianglestrip"] = pr_trianglestrip;
                db[$ "pr_trianglefan"] = pr_trianglefan;
                db[$ "draw_primitive_begin"] = method(undefined, draw_primitive_begin);
                db[$ "draw_vertex"] = method(undefined, draw_vertex);
                db[$ "draw_vertex_colour"] = method(undefined, draw_vertex_colour);
                db[$ "draw_vertex_color"] = method(undefined, draw_vertex_color);
                db[$ "draw_primitive_end"] = method(undefined, draw_primitive_end);
                db[$ "sprite_get_uvs"] = method(undefined, sprite_get_uvs);
                db[$ "font_get_uvs"] = method(undefined, font_get_uvs);
                db[$ "font_get_info"] = method(undefined, font_get_info);
                db[$ "font_cache_glyph"] = method(undefined, font_cache_glyph);
                db[$ "sprite_get_texture"] = method(undefined, sprite_get_texture);
                db[$ "font_get_texture"] = method(undefined, font_get_texture);
                db[$ "texture_get_width"] = method(undefined, texture_get_width);
                db[$ "texture_get_height"] = method(undefined, texture_get_height);
                db[$ "texture_get_uvs"] = method(undefined, texture_get_uvs);
                db[$ "draw_primitive_begin_texture"] = method(undefined, draw_primitive_begin_texture);
                db[$ "draw_vertex_texture"] = method(undefined, draw_vertex_texture);
                db[$ "draw_vertex_texture_colour"] = method(undefined, draw_vertex_texture_colour);
                db[$ "draw_vertex_texture_color"] = method(undefined, draw_vertex_texture_color);
                db[$ "texture_global_scale"] = method(undefined, texture_global_scale);
                db[$ "bm_normal"] = bm_normal;
                db[$ "bm_add"] = bm_add;
                db[$ "bm_max"] = bm_max;
                db[$ "bm_subtract"] = bm_subtract;
                db[$ "bm_zero"] = bm_zero;
                db[$ "bm_one"] = bm_one;
                db[$ "bm_src_colour"] = bm_src_colour;
                db[$ "bm_inv_src_colour"] = bm_inv_src_colour;
                db[$ "bm_src_color"] = bm_src_color;
                db[$ "bm_inv_src_color"] = bm_inv_src_color;
                db[$ "bm_src_alpha"] = bm_src_alpha;
                db[$ "bm_inv_src_alpha"] = bm_inv_src_alpha;
                db[$ "bm_dest_alpha"] = bm_dest_alpha;
                db[$ "bm_inv_dest_alpha"] = bm_inv_dest_alpha;
                db[$ "bm_dest_colour"] = bm_dest_colour;
                db[$ "bm_inv_dest_colour"] = bm_inv_dest_colour;
                db[$ "bm_dest_color"] = bm_dest_color;
                db[$ "bm_inv_dest_color"] = bm_inv_dest_color;
                db[$ "bm_src_alpha_sat"] = bm_src_alpha_sat;
                db[$ "tf_point"] = tf_point;
                db[$ "tf_linear"] = tf_linear;
                db[$ "tf_anisotropic"] = tf_anisotropic;
                db[$ "mip_off"] = mip_off;
                db[$ "mip_on"] = mip_on;
                db[$ "mip_markedonly"] = mip_markedonly;
                db[$ "audio_falloff_none"] = audio_falloff_none;
                db[$ "audio_falloff_inverse_distance"] = audio_falloff_inverse_distance;
                db[$ "audio_falloff_inverse_distance_clamped"] = audio_falloff_inverse_distance_clamped;
                db[$ "audio_falloff_inverse_distance_scaled"] = audio_falloff_inverse_distance_scaled;
                db[$ "audio_falloff_linear_distance"] = audio_falloff_linear_distance;
                db[$ "audio_falloff_linear_distance_clamped"] = audio_falloff_linear_distance_clamped;
                db[$ "audio_falloff_exponent_distance"] = audio_falloff_exponent_distance;
                db[$ "audio_falloff_exponent_distance_clamped"] = audio_falloff_exponent_distance_clamped;
                db[$ "audio_falloff_exponent_distance_scaled"] = audio_falloff_exponent_distance_scaled;
                db[$ "audio_mono"] = audio_mono;
                db[$ "audio_stereo"] = audio_stereo;
                db[$ "surface_create"] = method(undefined, surface_create);
                db[$ "surface_create_ext"] = method(undefined, surface_create_ext);
                db[$ "surface_resize"] = method(undefined, surface_resize);
                db[$ "surface_free"] = method(undefined, surface_free);
                db[$ "surface_exists"] = method(undefined, surface_exists);
                db[$ "surface_get_width"] = method(undefined, surface_get_width);
                db[$ "surface_get_height"] = method(undefined, surface_get_height);
                db[$ "surface_get_texture"] = method(undefined, surface_get_texture);
                db[$ "surface_set_target"] = method(undefined, surface_set_target);
                db[$ "surface_set_target_ext"] = method(undefined, surface_set_target_ext);
                db[$ "surface_get_target"] = method(undefined, surface_get_target);
                db[$ "surface_get_target_ext"] = method(undefined, surface_get_target_ext);
                db[$ "surface_reset_target"] = method(undefined, surface_reset_target);
                db[$ "surface_depth_disable"] = method(undefined, surface_depth_disable);
                db[$ "surface_get_depth_disable"] = method(undefined, surface_get_depth_disable);
                db[$ "draw_surface"] = method(undefined, draw_surface);
                db[$ "draw_surface_stretched"] = method(undefined, draw_surface_stretched);
                db[$ "draw_surface_tiled"] = method(undefined, draw_surface_tiled);
                db[$ "draw_surface_part"] = method(undefined, draw_surface_part);
                db[$ "draw_surface_ext"] = method(undefined, draw_surface_ext);
                db[$ "draw_surface_stretched_ext"] = method(undefined, draw_surface_stretched_ext);
                db[$ "draw_surface_tiled_ext"] = method(undefined, draw_surface_tiled_ext);
                db[$ "draw_surface_part_ext"] = method(undefined, draw_surface_part_ext);
                db[$ "draw_surface_general"] = method(undefined, draw_surface_general);
                db[$ "surface_getpixel"] = method(undefined, surface_getpixel);
                db[$ "surface_getpixel_ext"] = method(undefined, surface_getpixel_ext);
                db[$ "surface_save"] = method(undefined, surface_save);
                db[$ "surface_save_part"] = method(undefined, surface_save_part);
                db[$ "surface_copy"] = method(undefined, surface_copy);
                db[$ "surface_copy_part"] = method(undefined, surface_copy_part);
                db[$ "application_surface_draw_enable"] = method(undefined, application_surface_draw_enable);
                db[$ "application_get_position"] = method(undefined, application_get_position);
                db[$ "application_surface_enable"] = method(undefined, application_surface_enable);
                db[$ "application_surface_is_enabled"] = method(undefined, application_surface_is_enabled);
                db[$ "video_open"] = method(undefined, video_open);
                db[$ "video_close"] = method(undefined, video_close);
                db[$ "video_set_volume"] = method(undefined, video_set_volume);
                db[$ "video_draw"] = method(undefined, video_draw);
                db[$ "video_pause"] = method(undefined, video_pause);
                db[$ "video_resume"] = method(undefined, video_resume);
                db[$ "video_enable_loop"] = method(undefined, video_enable_loop);
                db[$ "video_seek_to"] = method(undefined, video_seek_to);
                db[$ "video_get_duration"] = method(undefined, video_get_duration);
                db[$ "video_get_position"] = method(undefined, video_get_position);
                db[$ "video_get_status"] = method(undefined, video_get_status);
                db[$ "video_get_format"] = method(undefined, video_get_format);
                db[$ "video_is_looping"] = method(undefined, video_is_looping);
                db[$ "video_get_volume"] = method(undefined, video_get_volume);
                db[$ "video_format_rgba"] = video_format_rgba;
                db[$ "video_format_yuv"] = video_format_yuv;
                db[$ "video_status_closed"] = video_status_closed;
                db[$ "video_status_preparing"] = video_status_preparing;
                db[$ "video_status_playing"] = video_status_playing;
                db[$ "video_status_paused"] = video_status_paused;
                db[$ "display_get_width"] = method(undefined, display_get_width);
                db[$ "display_get_height"] = method(undefined, display_get_height);
                db[$ "display_get_orientation"] = method(undefined, display_get_orientation);
                db[$ "display_get_gui_width"] = method(undefined, display_get_gui_width);
                db[$ "display_get_gui_height"] = method(undefined, display_get_gui_height);
                db[$ "display_get_frequency"] = method(undefined, display_get_frequency);
                db[$ "display_reset"] = method(undefined, display_reset);
                db[$ "display_mouse_get_x"] = method(undefined, display_mouse_get_x);
                db[$ "display_mouse_get_y"] = method(undefined, display_mouse_get_y);
                db[$ "display_mouse_set"] = method(undefined, display_mouse_set);
                db[$ "display_set_ui_visibility"] = method(undefined, display_set_ui_visibility);
                db[$ "window_set_fullscreen"] = method(undefined, window_set_fullscreen);
                db[$ "window_get_fullscreen"] = method(undefined, window_get_fullscreen);
                db[$ "window_set_caption"] = method(undefined, window_set_caption);
                db[$ "window_set_min_width"] = method(undefined, window_set_min_width);
                db[$ "window_set_max_width"] = method(undefined, window_set_max_width);
                db[$ "window_set_min_height"] = method(undefined, window_set_min_height);
                db[$ "window_set_max_height"] = method(undefined, window_set_max_height);
                db[$ "window_get_visible_rects"] = method(undefined, window_get_visible_rects);
                db[$ "window_get_caption"] = method(undefined, window_get_caption);
                db[$ "window_set_cursor"] = method(undefined, window_set_cursor);
                db[$ "cr_default"] = cr_default;
                db[$ "cr_none"] = cr_none;
                db[$ "cr_arrow"] = cr_arrow;
                db[$ "cr_cross"] = cr_cross;
                db[$ "cr_beam"] = cr_beam;
                db[$ "cr_size_nesw"] = cr_size_nesw;
                db[$ "cr_size_ns"] = cr_size_ns;
                db[$ "cr_size_nwse"] = cr_size_nwse;
                db[$ "cr_size_we"] = cr_size_we;
                db[$ "cr_uparrow"] = cr_uparrow;
                db[$ "cr_hourglass"] = cr_hourglass;
                db[$ "cr_drag"] = cr_drag;
                db[$ "cr_appstart"] = cr_appstart;
                db[$ "cr_handpoint"] = cr_handpoint;
                db[$ "cr_size_all"] = cr_size_all;
                db[$ "window_get_cursor"] = method(undefined, window_get_cursor);
                db[$ "window_set_colour"] = method(undefined, window_set_colour);
                db[$ "window_get_colour"] = method(undefined, window_get_colour);
                db[$ "window_set_color"] = method(undefined, window_set_color);
                db[$ "window_get_color"] = method(undefined, window_get_color);
                db[$ "window_set_position"] = method(undefined, window_set_position);
                db[$ "window_set_size"] = method(undefined, window_set_size);
                db[$ "window_set_rectangle"] = method(undefined, window_set_rectangle);
                db[$ "window_center"] = method(undefined, window_center);
                db[$ "window_get_x"] = method(undefined, window_get_x);
                db[$ "window_get_y"] = method(undefined, window_get_y);
                db[$ "window_get_width"] = method(undefined, window_get_width);
                db[$ "window_get_height"] = method(undefined, window_get_height);
                db[$ "window_mouse_get_x"] = method(undefined, window_mouse_get_x);
                db[$ "window_mouse_get_y"] = method(undefined, window_mouse_get_y);
                db[$ "window_mouse_set"] = method(undefined, window_mouse_set);
                db[$ "view_enabled_get"] = method(undefined, function () { return view_enabled });
                db[$ "view_enabled_set"] = method(undefined, function (__val) { view_enabled = __val });
                db[$ "view_current_get"] = method(undefined, function () { return view_current });
                db[$ "view_visible_get"] = method(undefined, function (__idx) { return view_visible[__idx] });
                db[$ "view_visible_set"] = method(undefined, function (__idx, __val) { view_visible[__idx] = __val });
                db[$ "view_xport_get"] = method(undefined, function (__idx) { return view_xport[__idx] });
                db[$ "view_xport_set"] = method(undefined, function (__idx, __val) { view_xport[__idx] = __val });
                db[$ "view_yport_get"] = method(undefined, function (__idx) { return view_yport[__idx] });
                db[$ "view_yport_set"] = method(undefined, function (__idx, __val) { view_yport[__idx] = __val });
                db[$ "view_wport_get"] = method(undefined, function (__idx) { return view_wport[__idx] });
                db[$ "view_wport_set"] = method(undefined, function (__idx, __val) { view_wport[__idx] = __val });
                db[$ "view_hport_get"] = method(undefined, function (__idx) { return view_hport[__idx] });
                db[$ "view_hport_set"] = method(undefined, function (__idx, __val) { view_hport[__idx] = __val });
                db[$ "view_surface_id_get"] = method(undefined, function (__idx) { return view_surface_id[__idx] });
                db[$ "view_surface_id_set"] = method(undefined, function (__idx, __val) { view_surface_id[__idx] = __val });
                db[$ "view_camera_get"] = method(undefined, function (__idx) { return view_camera[__idx] });
                db[$ "view_camera_set"] = method(undefined, function (__idx, __val) { view_camera[__idx] = __val });
                db[$ "window_view_mouse_get_x"] = method(undefined, window_view_mouse_get_x);
                db[$ "window_view_mouse_get_y"] = method(undefined, window_view_mouse_get_y);
                db[$ "window_views_mouse_get_x"] = method(undefined, window_views_mouse_get_x);
                db[$ "window_views_mouse_get_y"] = method(undefined, window_views_mouse_get_y);
                db[$ "audio_listener_position"] = method(undefined, audio_listener_position);
                db[$ "audio_listener_velocity"] = method(undefined, audio_listener_velocity);
                db[$ "audio_listener_orientation"] = method(undefined, audio_listener_orientation);
                db[$ "audio_emitter_position"] = method(undefined, audio_emitter_position);
                db[$ "audio_emitter_create"] = method(undefined, audio_emitter_create);
                db[$ "audio_emitter_free"] = method(undefined, audio_emitter_free);
                db[$ "audio_emitter_exists"] = method(undefined, audio_emitter_exists);
                db[$ "audio_emitter_pitch"] = method(undefined, audio_emitter_pitch);
                db[$ "audio_emitter_velocity"] = method(undefined, audio_emitter_velocity);
                db[$ "audio_emitter_falloff"] = method(undefined, audio_emitter_falloff);
                db[$ "audio_emitter_gain"] = method(undefined, audio_emitter_gain);
                db[$ "audio_play_sound"] = method(undefined, audio_play_sound);
                db[$ "audio_play_sound_on"] = method(undefined, audio_play_sound_on);
                db[$ "audio_play_sound_at"] = method(undefined, audio_play_sound_at);
                db[$ "audio_stop_sound"] = method(undefined, audio_stop_sound);
                db[$ "audio_resume_sound"] = method(undefined, audio_resume_sound);
                db[$ "audio_pause_sound"] = method(undefined, audio_pause_sound);
                db[$ "audio_channel_num"] = method(undefined, audio_channel_num);
                db[$ "audio_sound_length"] = method(undefined, audio_sound_length);
                db[$ "audio_get_type"] = method(undefined, audio_get_type);
                db[$ "audio_falloff_set_model"] = method(undefined, audio_falloff_set_model);
                db[$ "audio_master_gain"] = method(undefined, audio_master_gain);
                db[$ "audio_sound_gain"] = method(undefined, audio_sound_gain);
                db[$ "audio_sound_pitch"] = method(undefined, audio_sound_pitch);
                db[$ "audio_stop_all"] = method(undefined, audio_stop_all);
                db[$ "audio_resume_all"] = method(undefined, audio_resume_all);
                db[$ "audio_pause_all"] = method(undefined, audio_pause_all);
                db[$ "audio_is_playing"] = method(undefined, audio_is_playing);
                db[$ "audio_is_paused"] = method(undefined, audio_is_paused);
                db[$ "audio_exists"] = method(undefined, audio_exists);
                db[$ "audio_system_is_available"] = method(undefined, audio_system_is_available);
                db[$ "audio_sound_is_playable"] = method(undefined, audio_sound_is_playable);
                db[$ "audio_emitter_get_gain"] = method(undefined, audio_emitter_get_gain);
                db[$ "audio_emitter_get_pitch"] = method(undefined, audio_emitter_get_pitch);
                db[$ "audio_emitter_get_x"] = method(undefined, audio_emitter_get_x);
                db[$ "audio_emitter_get_y"] = method(undefined, audio_emitter_get_y);
                db[$ "audio_emitter_get_z"] = method(undefined, audio_emitter_get_z);
                db[$ "audio_emitter_get_vx"] = method(undefined, audio_emitter_get_vx);
                db[$ "audio_emitter_get_vy"] = method(undefined, audio_emitter_get_vy);
                db[$ "audio_emitter_get_vz"] = method(undefined, audio_emitter_get_vz);
                db[$ "audio_listener_set_position"] = method(undefined, audio_listener_set_position);
                db[$ "audio_listener_set_velocity"] = method(undefined, audio_listener_set_velocity);
                db[$ "audio_listener_set_orientation"] = method(undefined, audio_listener_set_orientation);
                db[$ "audio_listener_get_data"] = method(undefined, audio_listener_get_data);
                db[$ "audio_set_master_gain"] = method(undefined, audio_set_master_gain);
                db[$ "audio_get_master_gain"] = method(undefined, audio_get_master_gain);
                db[$ "audio_sound_get_gain"] = method(undefined, audio_sound_get_gain);
                db[$ "audio_sound_get_pitch"] = method(undefined, audio_sound_get_pitch);
                db[$ "audio_get_name"] = method(undefined, audio_get_name);
                db[$ "audio_sound_set_track_position"] = method(undefined, audio_sound_set_track_position);
                db[$ "audio_sound_get_track_position"] = method(undefined, audio_sound_get_track_position);
                db[$ "audio_create_stream"] = method(undefined, audio_create_stream);
                db[$ "audio_destroy_stream"] = method(undefined, audio_destroy_stream);
                db[$ "audio_create_sync_group"] = method(undefined, audio_create_sync_group);
                db[$ "audio_destroy_sync_group"] = method(undefined, audio_destroy_sync_group);
                db[$ "audio_play_in_sync_group"] = method(undefined, audio_play_in_sync_group);
                db[$ "audio_start_sync_group"] = method(undefined, audio_start_sync_group);
                db[$ "audio_stop_sync_group"] = method(undefined, audio_stop_sync_group);
                db[$ "audio_pause_sync_group"] = method(undefined, audio_pause_sync_group);
                db[$ "audio_resume_sync_group"] = method(undefined, audio_resume_sync_group);
                db[$ "audio_sync_group_get_track_pos"] = method(undefined, audio_sync_group_get_track_pos);
                db[$ "audio_sync_group_debug"] = method(undefined, audio_sync_group_debug);
                db[$ "audio_sync_group_is_playing"] = method(undefined, audio_sync_group_is_playing);
                db[$ "audio_debug"] = method(undefined, audio_debug);
                db[$ "audio_group_load"] = method(undefined, audio_group_load);
                db[$ "audio_group_unload"] = method(undefined, audio_group_unload);
                db[$ "audio_group_is_loaded"] = method(undefined, audio_group_is_loaded);
                db[$ "audio_group_load_progress"] = method(undefined, audio_group_load_progress);
                db[$ "audio_group_name"] = method(undefined, audio_group_name);
                db[$ "audio_group_stop_all"] = method(undefined, audio_group_stop_all);
                db[$ "audio_group_set_gain"] = method(undefined, audio_group_set_gain);
                db[$ "audio_create_buffer_sound"] = method(undefined, audio_create_buffer_sound);
                db[$ "audio_free_buffer_sound"] = method(undefined, audio_free_buffer_sound);
                db[$ "audio_create_play_queue"] = method(undefined, audio_create_play_queue);
                db[$ "audio_free_play_queue"] = method(undefined, audio_free_play_queue);
                db[$ "audio_queue_sound"] = method(undefined, audio_queue_sound);
                db[$ "audio_get_recorder_count"] = method(undefined, audio_get_recorder_count);
                db[$ "audio_get_recorder_info"] = method(undefined, audio_get_recorder_info);
                db[$ "audio_start_recording"] = method(undefined, audio_start_recording);
                db[$ "audio_stop_recording"] = method(undefined, audio_stop_recording);
                db[$ "audio_sound_get_listener_mask"] = method(undefined, audio_sound_get_listener_mask);
                db[$ "audio_emitter_get_listener_mask"] = method(undefined, audio_emitter_get_listener_mask);
                db[$ "audio_get_listener_mask"] = method(undefined, audio_get_listener_mask);
                db[$ "audio_sound_set_listener_mask"] = method(undefined, audio_sound_set_listener_mask);
                db[$ "audio_emitter_set_listener_mask"] = method(undefined, audio_emitter_set_listener_mask);
                db[$ "audio_set_listener_mask"] = method(undefined, audio_set_listener_mask);
                db[$ "audio_get_listener_count"] = method(undefined, audio_get_listener_count);
                db[$ "audio_get_listener_info"] = method(undefined, audio_get_listener_info);
                db[$ "show_message"] = method(undefined, show_message);
                db[$ "show_message_async"] = method(undefined, show_message_async);
                db[$ "clickable_add"] = method(undefined, clickable_add);
                db[$ "clickable_add_ext"] = method(undefined, clickable_add_ext);
                db[$ "clickable_change"] = method(undefined, clickable_change);
                db[$ "clickable_change_ext"] = method(undefined, clickable_change_ext);
                db[$ "clickable_delete"] = method(undefined, clickable_delete);
                db[$ "clickable_exists"] = method(undefined, clickable_exists);
                db[$ "clickable_set_style"] = method(undefined, clickable_set_style);
                db[$ "show_question"] = method(undefined, show_question);
                db[$ "show_question_async"] = method(undefined, show_question_async);
                db[$ "get_integer_async"] = method(undefined, get_integer_async);
                db[$ "get_string_async"] = method(undefined, get_string_async);
                db[$ "get_login_async"] = method(undefined, get_login_async);
                db[$ "get_open_filename"] = method(undefined, get_open_filename);
                db[$ "get_save_filename"] = method(undefined, get_save_filename);
                db[$ "get_open_filename_ext"] = method(undefined, get_open_filename_ext);
                db[$ "get_save_filename_ext"] = method(undefined, get_save_filename_ext);
                db[$ "show_error"] = method(undefined, show_error);
                db[$ "highscore_clear"] = method(undefined, highscore_clear);
                db[$ "highscore_add"] = method(undefined, highscore_add);
                db[$ "highscore_value"] = method(undefined, highscore_value);
                db[$ "highscore_name"] = method(undefined, highscore_name);
                db[$ "draw_highscore"] = method(undefined, draw_highscore);
                db[$ "sprite_exists"] = method(undefined, sprite_exists);
                db[$ "sprite_get_name"] = method(undefined, sprite_get_name);
                db[$ "sprite_get_number"] = method(undefined, sprite_get_number);
                db[$ "sprite_get_width"] = method(undefined, sprite_get_width);
                db[$ "sprite_get_height"] = method(undefined, sprite_get_height);
                db[$ "sprite_get_xoffset"] = method(undefined, sprite_get_xoffset);
                db[$ "sprite_get_yoffset"] = method(undefined, sprite_get_yoffset);
                db[$ "sprite_get_bbox_mode"] = method(undefined, sprite_get_bbox_mode);
                db[$ "sprite_get_bbox_left"] = method(undefined, sprite_get_bbox_left);
                db[$ "sprite_get_bbox_right"] = method(undefined, sprite_get_bbox_right);
                db[$ "sprite_get_bbox_top"] = method(undefined, sprite_get_bbox_top);
                db[$ "sprite_get_bbox_bottom"] = method(undefined, sprite_get_bbox_bottom);
                db[$ "sprite_set_bbox_mode"] = method(undefined, sprite_set_bbox_mode);
                db[$ "sprite_set_bbox"] = method(undefined, sprite_set_bbox);
                db[$ "sprite_save"] = method(undefined, sprite_save);
                db[$ "sprite_save_strip"] = method(undefined, sprite_save_strip);
                db[$ "sprite_set_cache_size"] = method(undefined, sprite_set_cache_size);
                db[$ "sprite_set_cache_size_ext"] = method(undefined, sprite_set_cache_size_ext);
                db[$ "sprite_get_tpe"] = method(undefined, sprite_get_tpe);
                db[$ "sprite_prefetch"] = method(undefined, sprite_prefetch);
                db[$ "sprite_prefetch_multi"] = method(undefined, sprite_prefetch_multi);
                db[$ "sprite_flush"] = method(undefined, sprite_flush);
                db[$ "sprite_flush_multi"] = method(undefined, sprite_flush_multi);
                db[$ "sprite_set_speed"] = method(undefined, sprite_set_speed);
                db[$ "sprite_get_speed_type"] = method(undefined, sprite_get_speed_type);
                db[$ "sprite_get_speed"] = method(undefined, sprite_get_speed);
                db[$ "sprite_get_info"] = method(undefined, sprite_get_info);
                db[$ "sprite_get_nineslice"] = method(undefined, sprite_get_nineslice);
                db[$ "sprite_set_nineslice"] = method(undefined, sprite_set_nineslice);
                db[$ "sprite_nineslice_create"] = method(undefined, sprite_nineslice_create);
                db[$ "texture_is_ready"] = method(undefined, texture_is_ready);
                db[$ "texture_prefetch"] = method(undefined, texture_prefetch);
                db[$ "texture_flush"] = method(undefined, texture_flush);
                db[$ "texturegroup_get_textures"] = method(undefined, texturegroup_get_textures);
                db[$ "texturegroup_get_sprites"] = method(undefined, texturegroup_get_sprites);
                db[$ "texturegroup_get_fonts"] = method(undefined, texturegroup_get_fonts);
                db[$ "texturegroup_get_tilesets"] = method(undefined, texturegroup_get_tilesets);
                db[$ "texturegroup_load"] = method(undefined, texturegroup_load);
                db[$ "texturegroup_unload"] = method(undefined, texturegroup_unload);
                db[$ "texturegroup_get_status"] = method(undefined, texturegroup_get_status);
                db[$ "texturegroup_set_mode"] = method(undefined, texturegroup_set_mode);
                db[$ "texture_debug_messages"] = method(undefined, texture_debug_messages);
                db[$ "spritespeed_framespersecond"] = spritespeed_framespersecond;
                db[$ "spritespeed_framespergameframe"] = spritespeed_framespergameframe;
                db[$ "font_exists"] = method(undefined, font_exists);
                db[$ "font_get_name"] = method(undefined, font_get_name);
                db[$ "font_get_fontname"] = method(undefined, font_get_fontname);
                db[$ "font_get_bold"] = method(undefined, font_get_bold);
                db[$ "font_get_italic"] = method(undefined, font_get_italic);
                db[$ "font_get_first"] = method(undefined, font_get_first);
                db[$ "font_get_last"] = method(undefined, font_get_last);
                db[$ "font_get_size"] = method(undefined, font_get_size);
                db[$ "font_set_cache_size"] = method(undefined, font_set_cache_size);
                db[$ "path_exists"] = method(undefined, path_exists);
                db[$ "path_get_name"] = method(undefined, path_get_name);
                db[$ "path_get_length"] = method(undefined, path_get_length);
                db[$ "path_get_kind"] = method(undefined, path_get_kind);
                db[$ "path_get_closed"] = method(undefined, path_get_closed);
                db[$ "path_get_precision"] = method(undefined, path_get_precision);
                db[$ "path_get_number"] = method(undefined, path_get_number);
                db[$ "path_get_point_x"] = method(undefined, path_get_point_x);
                db[$ "path_get_point_y"] = method(undefined, path_get_point_y);
                db[$ "path_get_point_speed"] = method(undefined, path_get_point_speed);
                db[$ "path_get_x"] = method(undefined, path_get_x);
                db[$ "path_get_y"] = method(undefined, path_get_y);
                db[$ "path_get_speed"] = method(undefined, path_get_speed);
                db[$ "script_exists"] = method(undefined, script_exists);
                db[$ "script_get_name"] = method(undefined, script_get_name);
                db[$ "timeline_add"] = method(undefined, timeline_add);
                db[$ "timeline_delete"] = method(undefined, timeline_delete);
                db[$ "timeline_clear"] = method(undefined, timeline_clear);
                db[$ "timeline_exists"] = method(undefined, timeline_exists);
                db[$ "timeline_get_name"] = method(undefined, timeline_get_name);
                db[$ "timeline_moment_clear"] = method(undefined, timeline_moment_clear);
                db[$ "timeline_moment_add_script"] = method(undefined, timeline_moment_add_script);
                db[$ "timeline_size"] = method(undefined, timeline_size);
                db[$ "timeline_max_moment"] = method(undefined, timeline_max_moment);
                db[$ "object_exists"] = method(undefined, object_exists);
                db[$ "object_get_name"] = method(undefined, object_get_name);
                db[$ "object_get_sprite"] = method(undefined, object_get_sprite);
                db[$ "object_get_solid"] = method(undefined, object_get_solid);
                db[$ "object_get_visible"] = method(undefined, object_get_visible);
                db[$ "object_get_persistent"] = method(undefined, object_get_persistent);
                db[$ "object_get_mask"] = method(undefined, object_get_mask);
                db[$ "object_get_parent"] = method(undefined, object_get_parent);
                db[$ "object_get_physics"] = method(undefined, object_get_physics);
                db[$ "object_is_ancestor"] = method(undefined, object_is_ancestor);
                db[$ "room_exists"] = method(undefined, room_exists);
                db[$ "room_get_name"] = method(undefined, room_get_name);
                db[$ "sprite_set_offset"] = method(undefined, sprite_set_offset);
                db[$ "sprite_duplicate"] = method(undefined, sprite_duplicate);
                db[$ "sprite_assign"] = method(undefined, sprite_assign);
                db[$ "sprite_merge"] = method(undefined, sprite_merge);
                db[$ "sprite_add"] = method(undefined, sprite_add);
                db[$ "sprite_replace"] = method(undefined, sprite_replace);
                db[$ "sprite_create_from_surface"] = method(undefined, sprite_create_from_surface);
                db[$ "sprite_add_from_surface"] = method(undefined, sprite_add_from_surface);
                db[$ "sprite_delete"] = method(undefined, sprite_delete);
                db[$ "sprite_set_alpha_from_sprite"] = method(undefined, sprite_set_alpha_from_sprite);
                db[$ "sprite_collision_mask"] = method(undefined, sprite_collision_mask);
                db[$ "font_add_enable_aa"] = method(undefined, font_add_enable_aa);
                db[$ "font_add_get_enable_aa"] = method(undefined, font_add_get_enable_aa);
                db[$ "font_add"] = method(undefined, font_add);
                db[$ "font_add_sprite"] = method(undefined, font_add_sprite);
                db[$ "font_add_sprite_ext"] = method(undefined, font_add_sprite_ext);
                db[$ "font_replace_sprite"] = method(undefined, font_replace_sprite);
                db[$ "font_replace_sprite_ext"] = method(undefined, font_replace_sprite_ext);
                db[$ "font_delete"] = method(undefined, font_delete);
                db[$ "path_set_kind"] = method(undefined, path_set_kind);
                db[$ "path_set_closed"] = method(undefined, path_set_closed);
                db[$ "path_set_precision"] = method(undefined, path_set_precision);
                db[$ "path_add"] = method(undefined, path_add);
                db[$ "path_assign"] = method(undefined, path_assign);
                db[$ "path_duplicate"] = method(undefined, path_duplicate);
                db[$ "path_append"] = method(undefined, path_append);
                db[$ "path_delete"] = method(undefined, path_delete);
                db[$ "path_add_point"] = method(undefined, path_add_point);
                db[$ "path_insert_point"] = method(undefined, path_insert_point);
                db[$ "path_change_point"] = method(undefined, path_change_point);
                db[$ "path_delete_point"] = method(undefined, path_delete_point);
                db[$ "path_clear_points"] = method(undefined, path_clear_points);
                db[$ "path_reverse"] = method(undefined, path_reverse);
                db[$ "path_mirror"] = method(undefined, path_mirror);
                db[$ "path_flip"] = method(undefined, path_flip);
                db[$ "path_rotate"] = method(undefined, path_rotate);
                db[$ "path_rescale"] = method(undefined, path_rescale);
                db[$ "path_shift"] = method(undefined, path_shift);
                db[$ "script_execute"] = method(undefined, script_execute);
                db[$ "script_execute_ext"] = method(undefined, script_execute_ext);
                db[$ "object_set_sprite"] = method(undefined, object_set_sprite);
                db[$ "object_set_solid"] = method(undefined, object_set_solid);
                db[$ "object_set_visible"] = method(undefined, object_set_visible);
                db[$ "object_set_persistent"] = method(undefined, object_set_persistent);
                db[$ "object_set_mask"] = method(undefined, object_set_mask);
                db[$ "room_set_width"] = method(undefined, room_set_width);
                db[$ "room_set_height"] = method(undefined, room_set_height);
                db[$ "room_set_persistent"] = method(undefined, room_set_persistent);
                db[$ "room_set_viewport"] = method(undefined, room_set_viewport);
                db[$ "room_get_viewport"] = method(undefined, room_get_viewport);
                db[$ "room_set_view_enabled"] = method(undefined, room_set_view_enabled);
                db[$ "room_add"] = method(undefined, room_add);
                db[$ "room_duplicate"] = method(undefined, room_duplicate);
                db[$ "room_assign"] = method(undefined, room_assign);
                db[$ "room_instance_add"] = method(undefined, room_instance_add);
                db[$ "room_instance_clear"] = method(undefined, room_instance_clear);
                db[$ "room_get_camera"] = method(undefined, room_get_camera);
                db[$ "room_set_camera"] = method(undefined, room_set_camera);
                db[$ "asset_get_index"] = method(undefined, asset_get_index);
                db[$ "asset_get_type"] = method(undefined, asset_get_type);
                db[$ "asset_object"] = asset_object;
                db[$ "asset_unknown"] = asset_unknown;
                db[$ "asset_sprite"] = asset_sprite;
                db[$ "asset_sound"] = asset_sound;
                db[$ "asset_room"] = asset_room;
                db[$ "asset_path"] = asset_path;
                db[$ "asset_script"] = asset_script;
                db[$ "asset_font"] = asset_font;
                db[$ "asset_timeline"] = asset_timeline;
                db[$ "asset_tiles"] = asset_tiles;
                db[$ "asset_shader"] = asset_shader;
                db[$ "asset_sequence"] = asset_sequence;
                db[$ "asset_animationcurve"] = asset_animationcurve;
                db[$ "file_text_open_from_string"] = method(undefined, file_text_open_from_string);
                db[$ "file_text_open_read"] = method(undefined, file_text_open_read);
                db[$ "file_text_open_write"] = method(undefined, file_text_open_write);
                db[$ "file_text_open_append"] = method(undefined, file_text_open_append);
                db[$ "file_text_close"] = method(undefined, file_text_close);
                db[$ "file_text_write_string"] = method(undefined, file_text_write_string);
                db[$ "file_text_write_real"] = method(undefined, file_text_write_real);
                db[$ "file_text_writeln"] = method(undefined, file_text_writeln);
                db[$ "file_text_read_string"] = method(undefined, file_text_read_string);
                db[$ "file_text_read_real"] = method(undefined, file_text_read_real);
                db[$ "file_text_readln"] = method(undefined, file_text_readln);
                db[$ "file_text_eof"] = method(undefined, file_text_eof);
                db[$ "file_text_eoln"] = method(undefined, file_text_eoln);
                db[$ "file_exists"] = method(undefined, file_exists);
                db[$ "file_delete"] = method(undefined, file_delete);
                db[$ "file_rename"] = method(undefined, file_rename);
                db[$ "file_copy"] = method(undefined, file_copy);
                db[$ "directory_exists"] = method(undefined, directory_exists);
                db[$ "directory_create"] = method(undefined, directory_create);
                db[$ "directory_destroy"] = method(undefined, directory_destroy);
                db[$ "file_find_first"] = method(undefined, file_find_first);
                db[$ "file_find_next"] = method(undefined, file_find_next);
                db[$ "file_find_close"] = method(undefined, file_find_close);
                db[$ "file_attributes"] = method(undefined, file_attributes);
                db[$ "filename_name"] = method(undefined, filename_name);
                db[$ "filename_path"] = method(undefined, filename_path);
                db[$ "filename_dir"] = method(undefined, filename_dir);
                db[$ "filename_drive"] = method(undefined, filename_drive);
                db[$ "filename_ext"] = method(undefined, filename_ext);
                db[$ "filename_change_ext"] = method(undefined, filename_change_ext);
                db[$ "file_bin_open"] = method(undefined, file_bin_open);
                db[$ "file_bin_rewrite"] = method(undefined, file_bin_rewrite);
                db[$ "file_bin_close"] = method(undefined, file_bin_close);
                db[$ "file_bin_position"] = method(undefined, file_bin_position);
                db[$ "file_bin_size"] = method(undefined, file_bin_size);
                db[$ "file_bin_seek"] = method(undefined, file_bin_seek);
                db[$ "file_bin_write_byte"] = method(undefined, file_bin_write_byte);
                db[$ "file_bin_read_byte"] = method(undefined, file_bin_read_byte);
                db[$ "parameter_count"] = method(undefined, parameter_count);
                db[$ "parameter_string"] = method(undefined, parameter_string);
                db[$ "environment_get_variable"] = method(undefined, environment_get_variable);
                db[$ "fa_readonly"] = fa_readonly;
                db[$ "fa_hidden"] = fa_hidden;
                db[$ "fa_sysfile"] = fa_sysfile;
                db[$ "fa_volumeid"] = fa_volumeid;
                db[$ "fa_directory"] = fa_directory;
                db[$ "fa_archive"] = fa_archive;
                db[$ "game_id_get"] = method(undefined, function () { return game_id });
                db[$ "game_display_name_get"] = method(undefined, function () { return game_display_name });
                db[$ "game_project_name_get"] = method(undefined, function () { return game_project_name });
                db[$ "game_save_id_get"] = method(undefined, function () { return game_save_id });
                db[$ "working_directory_get"] = method(undefined, function () { return working_directory });
                db[$ "temp_directory_get"] = method(undefined, function () { return temp_directory });
                db[$ "program_directory_get"] = method(undefined, function () { return program_directory });
                db[$ "ini_open_from_string"] = method(undefined, ini_open_from_string);
                db[$ "ini_open"] = method(undefined, ini_open);
                db[$ "ini_close"] = method(undefined, ini_close);
                db[$ "ini_read_string"] = method(undefined, ini_read_string);
                db[$ "ini_read_real"] = method(undefined, ini_read_real);
                db[$ "ini_write_string"] = method(undefined, ini_write_string);
                db[$ "ini_write_real"] = method(undefined, ini_write_real);
                db[$ "ini_key_exists"] = method(undefined, ini_key_exists);
                db[$ "ini_section_exists"] = method(undefined, ini_section_exists);
                db[$ "ini_key_delete"] = method(undefined, ini_key_delete);
                db[$ "ini_section_delete"] = method(undefined, ini_section_delete);
                db[$ "ds_set_precision"] = method(undefined, ds_set_precision);
                db[$ "ds_exists"] = method(undefined, ds_exists);
                db[$ "ds_type_map"] = ds_type_map;
                db[$ "ds_type_list"] = ds_type_list;
                db[$ "ds_type_stack"] = ds_type_stack;
                db[$ "ds_type_queue"] = ds_type_queue;
                db[$ "ds_type_grid"] = ds_type_grid;
                db[$ "ds_type_priority"] = ds_type_priority;
                db[$ "ds_stack_create"] = method(undefined, ds_stack_create);
                db[$ "ds_stack_destroy"] = method(undefined, ds_stack_destroy);
                db[$ "ds_stack_clear"] = method(undefined, ds_stack_clear);
                db[$ "ds_stack_copy"] = method(undefined, ds_stack_copy);
                db[$ "ds_stack_size"] = method(undefined, ds_stack_size);
                db[$ "ds_stack_empty"] = method(undefined, ds_stack_empty);
                db[$ "ds_stack_push"] = method(undefined, ds_stack_push);
                db[$ "ds_stack_pop"] = method(undefined, ds_stack_pop);
                db[$ "ds_stack_top"] = method(undefined, ds_stack_top);
                db[$ "ds_stack_write"] = method(undefined, ds_stack_write);
                db[$ "ds_stack_read"] = method(undefined, ds_stack_read);
                db[$ "ds_queue_create"] = method(undefined, ds_queue_create);
                db[$ "ds_queue_destroy"] = method(undefined, ds_queue_destroy);
                db[$ "ds_queue_clear"] = method(undefined, ds_queue_clear);
                db[$ "ds_queue_copy"] = method(undefined, ds_queue_copy);
                db[$ "ds_queue_size"] = method(undefined, ds_queue_size);
                db[$ "ds_queue_empty"] = method(undefined, ds_queue_empty);
                db[$ "ds_queue_enqueue"] = method(undefined, ds_queue_enqueue);
                db[$ "ds_queue_dequeue"] = method(undefined, ds_queue_dequeue);
                db[$ "ds_queue_head"] = method(undefined, ds_queue_head);
                db[$ "ds_queue_tail"] = method(undefined, ds_queue_tail);
                db[$ "ds_queue_write"] = method(undefined, ds_queue_write);
                db[$ "ds_queue_read"] = method(undefined, ds_queue_read);
                db[$ "ds_list_create"] = method(undefined, ds_list_create);
                db[$ "ds_list_destroy"] = method(undefined, ds_list_destroy);
                db[$ "ds_list_clear"] = method(undefined, ds_list_clear);
                db[$ "ds_list_copy"] = method(undefined, ds_list_copy);
                db[$ "ds_list_size"] = method(undefined, ds_list_size);
                db[$ "ds_list_empty"] = method(undefined, ds_list_empty);
                db[$ "ds_list_add"] = method(undefined, ds_list_add);
                db[$ "ds_list_insert"] = method(undefined, ds_list_insert);
                db[$ "ds_list_replace"] = method(undefined, ds_list_replace);
                db[$ "ds_list_delete"] = method(undefined, ds_list_delete);
                db[$ "ds_list_find_index"] = method(undefined, ds_list_find_index);
                db[$ "ds_list_find_value"] = method(undefined, ds_list_find_value);
                db[$ "ds_list_is_map"] = method(undefined, ds_list_is_map);
                db[$ "ds_list_is_list"] = method(undefined, ds_list_is_list);
                db[$ "ds_list_mark_as_list"] = method(undefined, ds_list_mark_as_list);
                db[$ "ds_list_mark_as_map"] = method(undefined, ds_list_mark_as_map);
                db[$ "ds_list_sort"] = method(undefined, ds_list_sort);
                db[$ "ds_list_shuffle"] = method(undefined, ds_list_shuffle);
                db[$ "ds_list_write"] = method(undefined, ds_list_write);
                db[$ "ds_list_read"] = method(undefined, ds_list_read);
                db[$ "ds_list_set"] = method(undefined, ds_list_set);
                db[$ "ds_map_create"] = method(undefined, ds_map_create);
                db[$ "ds_map_destroy"] = method(undefined, ds_map_destroy);
                db[$ "ds_map_clear"] = method(undefined, ds_map_clear);
                db[$ "ds_map_copy"] = method(undefined, ds_map_copy);
                db[$ "ds_map_size"] = method(undefined, ds_map_size);
                db[$ "ds_map_empty"] = method(undefined, ds_map_empty);
                db[$ "ds_map_add"] = method(undefined, ds_map_add);
                db[$ "ds_map_add_list"] = method(undefined, ds_map_add_list);
                db[$ "ds_map_add_map"] = method(undefined, ds_map_add_map);
                db[$ "ds_map_replace"] = method(undefined, ds_map_replace);
                db[$ "ds_map_replace_map"] = method(undefined, ds_map_replace_map);
                db[$ "ds_map_replace_list"] = method(undefined, ds_map_replace_list);
                db[$ "ds_map_delete"] = method(undefined, ds_map_delete);
                db[$ "ds_map_exists"] = method(undefined, ds_map_exists);
                db[$ "ds_map_values_to_array"] = method(undefined, ds_map_values_to_array);
                db[$ "ds_map_keys_to_array"] = method(undefined, ds_map_keys_to_array);
                db[$ "ds_map_find_value"] = method(undefined, ds_map_find_value);
                db[$ "ds_map_is_map"] = method(undefined, ds_map_is_map);
                db[$ "ds_map_is_list"] = method(undefined, ds_map_is_list);
                db[$ "ds_map_find_previous"] = method(undefined, ds_map_find_previous);
                db[$ "ds_map_find_next"] = method(undefined, ds_map_find_next);
                db[$ "ds_map_find_first"] = method(undefined, ds_map_find_first);
                db[$ "ds_map_find_last"] = method(undefined, ds_map_find_last);
                db[$ "ds_map_write"] = method(undefined, ds_map_write);
                db[$ "ds_map_read"] = method(undefined, ds_map_read);
                db[$ "ds_map_secure_save"] = method(undefined, ds_map_secure_save);
                db[$ "ds_map_secure_load"] = method(undefined, ds_map_secure_load);
                db[$ "ds_map_secure_load_buffer"] = method(undefined, ds_map_secure_load_buffer);
                db[$ "ds_map_secure_save_buffer"] = method(undefined, ds_map_secure_save_buffer);
                db[$ "ds_map_set"] = method(undefined, ds_map_set);
                db[$ "ds_priority_create"] = method(undefined, ds_priority_create);
                db[$ "ds_priority_destroy"] = method(undefined, ds_priority_destroy);
                db[$ "ds_priority_clear"] = method(undefined, ds_priority_clear);
                db[$ "ds_priority_copy"] = method(undefined, ds_priority_copy);
                db[$ "ds_priority_size"] = method(undefined, ds_priority_size);
                db[$ "ds_priority_empty"] = method(undefined, ds_priority_empty);
                db[$ "ds_priority_add"] = method(undefined, ds_priority_add);
                db[$ "ds_priority_change_priority"] = method(undefined, ds_priority_change_priority);
                db[$ "ds_priority_find_priority"] = method(undefined, ds_priority_find_priority);
                db[$ "ds_priority_delete_value"] = method(undefined, ds_priority_delete_value);
                db[$ "ds_priority_delete_min"] = method(undefined, ds_priority_delete_min);
                db[$ "ds_priority_find_min"] = method(undefined, ds_priority_find_min);
                db[$ "ds_priority_delete_max"] = method(undefined, ds_priority_delete_max);
                db[$ "ds_priority_find_max"] = method(undefined, ds_priority_find_max);
                db[$ "ds_priority_write"] = method(undefined, ds_priority_write);
                db[$ "ds_priority_read"] = method(undefined, ds_priority_read);
                db[$ "ds_grid_create"] = method(undefined, ds_grid_create);
                db[$ "ds_grid_destroy"] = method(undefined, ds_grid_destroy);
                db[$ "ds_grid_copy"] = method(undefined, ds_grid_copy);
                db[$ "ds_grid_resize"] = method(undefined, ds_grid_resize);
                db[$ "ds_grid_width"] = method(undefined, ds_grid_width);
                db[$ "ds_grid_height"] = method(undefined, ds_grid_height);
                db[$ "ds_grid_clear"] = method(undefined, ds_grid_clear);
                db[$ "ds_grid_add"] = method(undefined, ds_grid_add);
                db[$ "ds_grid_multiply"] = method(undefined, ds_grid_multiply);
                db[$ "ds_grid_set_region"] = method(undefined, ds_grid_set_region);
                db[$ "ds_grid_add_region"] = method(undefined, ds_grid_add_region);
                db[$ "ds_grid_multiply_region"] = method(undefined, ds_grid_multiply_region);
                db[$ "ds_grid_set_disk"] = method(undefined, ds_grid_set_disk);
                db[$ "ds_grid_add_disk"] = method(undefined, ds_grid_add_disk);
                db[$ "ds_grid_multiply_disk"] = method(undefined, ds_grid_multiply_disk);
                db[$ "ds_grid_set_grid_region"] = method(undefined, ds_grid_set_grid_region);
                db[$ "ds_grid_add_grid_region"] = method(undefined, ds_grid_add_grid_region);
                db[$ "ds_grid_multiply_grid_region"] = method(undefined, ds_grid_multiply_grid_region);
                db[$ "ds_grid_get_sum"] = method(undefined, ds_grid_get_sum);
                db[$ "ds_grid_get_max"] = method(undefined, ds_grid_get_max);
                db[$ "ds_grid_get_min"] = method(undefined, ds_grid_get_min);
                db[$ "ds_grid_get_mean"] = method(undefined, ds_grid_get_mean);
                db[$ "ds_grid_get_disk_sum"] = method(undefined, ds_grid_get_disk_sum);
                db[$ "ds_grid_get_disk_min"] = method(undefined, ds_grid_get_disk_min);
                db[$ "ds_grid_get_disk_max"] = method(undefined, ds_grid_get_disk_max);
                db[$ "ds_grid_get_disk_mean"] = method(undefined, ds_grid_get_disk_mean);
                db[$ "ds_grid_value_exists"] = method(undefined, ds_grid_value_exists);
                db[$ "ds_grid_value_x"] = method(undefined, ds_grid_value_x);
                db[$ "ds_grid_value_y"] = method(undefined, ds_grid_value_y);
                db[$ "ds_grid_value_disk_exists"] = method(undefined, ds_grid_value_disk_exists);
                db[$ "ds_grid_value_disk_x"] = method(undefined, ds_grid_value_disk_x);
                db[$ "ds_grid_value_disk_y"] = method(undefined, ds_grid_value_disk_y);
                db[$ "ds_grid_shuffle"] = method(undefined, ds_grid_shuffle);
                db[$ "ds_grid_write"] = method(undefined, ds_grid_write);
                db[$ "ds_grid_read"] = method(undefined, ds_grid_read);
                db[$ "ds_grid_sort"] = method(undefined, ds_grid_sort);
                db[$ "ds_grid_set"] = method(undefined, ds_grid_set);
                db[$ "ds_grid_get"] = method(undefined, ds_grid_get);
                db[$ "effect_create_below"] = method(undefined, effect_create_below);
                db[$ "effect_create_above"] = method(undefined, effect_create_above);
                db[$ "effect_clear"] = method(undefined, effect_clear);
                db[$ "ef_explosion"] = ef_explosion;
                db[$ "ef_ring"] = ef_ring;
                db[$ "ef_ellipse"] = ef_ellipse;
                db[$ "ef_firework"] = ef_firework;
                db[$ "ef_smoke"] = ef_smoke;
                db[$ "ef_smokeup"] = ef_smokeup;
                db[$ "ef_star"] = ef_star;
                db[$ "ef_spark"] = ef_spark;
                db[$ "ef_flare"] = ef_flare;
                db[$ "ef_cloud"] = ef_cloud;
                db[$ "ef_rain"] = ef_rain;
                db[$ "ef_snow"] = ef_snow;
                db[$ "part_type_create"] = method(undefined, part_type_create);
                db[$ "part_type_destroy"] = method(undefined, part_type_destroy);
                db[$ "part_type_exists"] = method(undefined, part_type_exists);
                db[$ "part_type_clear"] = method(undefined, part_type_clear);
                db[$ "part_type_shape"] = method(undefined, part_type_shape);
                db[$ "part_type_sprite"] = method(undefined, part_type_sprite);
                db[$ "part_type_size"] = method(undefined, part_type_size);
                db[$ "part_type_scale"] = method(undefined, part_type_scale);
                db[$ "part_type_orientation"] = method(undefined, part_type_orientation);
                db[$ "part_type_life"] = method(undefined, part_type_life);
                db[$ "part_type_step"] = method(undefined, part_type_step);
                db[$ "part_type_death"] = method(undefined, part_type_death);
                db[$ "part_type_speed"] = method(undefined, part_type_speed);
                db[$ "part_type_direction"] = method(undefined, part_type_direction);
                db[$ "part_type_gravity"] = method(undefined, part_type_gravity);
                db[$ "part_type_colour1"] = method(undefined, part_type_colour1);
                db[$ "part_type_colour2"] = method(undefined, part_type_colour2);
                db[$ "part_type_colour3"] = method(undefined, part_type_colour3);
                db[$ "part_type_colour_mix"] = method(undefined, part_type_colour_mix);
                db[$ "part_type_colour_rgb"] = method(undefined, part_type_colour_rgb);
                db[$ "part_type_colour_hsv"] = method(undefined, part_type_colour_hsv);
                db[$ "part_type_color1"] = method(undefined, part_type_color1);
                db[$ "part_type_color2"] = method(undefined, part_type_color2);
                db[$ "part_type_color3"] = method(undefined, part_type_color3);
                db[$ "part_type_color_mix"] = method(undefined, part_type_color_mix);
                db[$ "part_type_color_rgb"] = method(undefined, part_type_color_rgb);
                db[$ "part_type_color_hsv"] = method(undefined, part_type_color_hsv);
                db[$ "part_type_alpha1"] = method(undefined, part_type_alpha1);
                db[$ "part_type_alpha2"] = method(undefined, part_type_alpha2);
                db[$ "part_type_alpha3"] = method(undefined, part_type_alpha3);
                db[$ "part_type_blend"] = method(undefined, part_type_blend);
                db[$ "pt_shape_pixel"] = pt_shape_pixel;
                db[$ "pt_shape_disk"] = pt_shape_disk;
                db[$ "pt_shape_square"] = pt_shape_square;
                db[$ "pt_shape_line"] = pt_shape_line;
                db[$ "pt_shape_star"] = pt_shape_star;
                db[$ "pt_shape_circle"] = pt_shape_circle;
                db[$ "pt_shape_ring"] = pt_shape_ring;
                db[$ "pt_shape_sphere"] = pt_shape_sphere;
                db[$ "pt_shape_flare"] = pt_shape_flare;
                db[$ "pt_shape_spark"] = pt_shape_spark;
                db[$ "pt_shape_explosion"] = pt_shape_explosion;
                db[$ "pt_shape_cloud"] = pt_shape_cloud;
                db[$ "pt_shape_smoke"] = pt_shape_smoke;
                db[$ "pt_shape_snow"] = pt_shape_snow;
                db[$ "part_system_create"] = method(undefined, part_system_create);
                db[$ "part_system_create_layer"] = method(undefined, part_system_create_layer);
                db[$ "part_system_destroy"] = method(undefined, part_system_destroy);
                db[$ "part_system_exists"] = method(undefined, part_system_exists);
                db[$ "part_system_clear"] = method(undefined, part_system_clear);
                db[$ "part_system_draw_order"] = method(undefined, part_system_draw_order);
                db[$ "part_system_depth"] = method(undefined, part_system_depth);
                db[$ "part_system_position"] = method(undefined, part_system_position);
                db[$ "part_system_automatic_update"] = method(undefined, part_system_automatic_update);
                db[$ "part_system_automatic_draw"] = method(undefined, part_system_automatic_draw);
                db[$ "part_system_update"] = method(undefined, part_system_update);
                db[$ "part_system_drawit"] = method(undefined, part_system_drawit);
                db[$ "part_system_get_layer"] = method(undefined, part_system_get_layer);
                db[$ "part_system_layer"] = method(undefined, part_system_layer);
                db[$ "part_particles_create"] = method(undefined, part_particles_create);
                db[$ "part_particles_create_colour"] = method(undefined, part_particles_create_colour);
                db[$ "part_particles_create_color"] = method(undefined, part_particles_create_color);
                db[$ "part_particles_clear"] = method(undefined, part_particles_clear);
                db[$ "part_particles_count"] = method(undefined, part_particles_count);
                db[$ "part_emitter_create"] = method(undefined, part_emitter_create);
                db[$ "part_emitter_destroy"] = method(undefined, part_emitter_destroy);
                db[$ "part_emitter_destroy_all"] = method(undefined, part_emitter_destroy_all);
                db[$ "part_emitter_exists"] = method(undefined, part_emitter_exists);
                db[$ "part_emitter_clear"] = method(undefined, part_emitter_clear);
                db[$ "part_emitter_region"] = method(undefined, part_emitter_region);
                db[$ "part_emitter_burst"] = method(undefined, part_emitter_burst);
                db[$ "part_emitter_stream"] = method(undefined, part_emitter_stream);
                db[$ "ps_distr_linear"] = ps_distr_linear;
                db[$ "ps_distr_gaussian"] = ps_distr_gaussian;
                db[$ "ps_distr_invgaussian"] = ps_distr_invgaussian;
                db[$ "ps_shape_rectangle"] = ps_shape_rectangle;
                db[$ "ps_shape_ellipse"] = ps_shape_ellipse;
                db[$ "ps_shape_diamond"] = ps_shape_diamond;
                db[$ "ps_shape_line"] = ps_shape_line;
                db[$ "external_call"] = method(undefined, external_call);
                db[$ "external_define"] = method(undefined, external_define);
                db[$ "external_free"] = method(undefined, external_free);
                db[$ "window_handle"] = method(undefined, window_handle);
                db[$ "window_device"] = method(undefined, window_device);
                db[$ "ty_real"] = ty_real;
                db[$ "ty_string"] = ty_string;
                db[$ "dll_cdecl"] = dll_cdecl;
                db[$ "dll_stdcall"] = dll_stdcall;
                db[$ "matrix_view"] = matrix_view;
                db[$ "matrix_projection"] = matrix_projection;
                db[$ "matrix_world"] = matrix_world;
                db[$ "matrix_get"] = method(undefined, matrix_get);
                db[$ "matrix_set"] = method(undefined, matrix_set);
                db[$ "matrix_build_identity"] = method(undefined, matrix_build_identity);
                db[$ "matrix_build"] = method(undefined, matrix_build);
                db[$ "matrix_build_lookat"] = method(undefined, matrix_build_lookat);
                db[$ "matrix_build_projection_ortho"] = method(undefined, matrix_build_projection_ortho);
                db[$ "matrix_build_projection_perspective"] = method(undefined, matrix_build_projection_perspective);
                db[$ "matrix_build_projection_perspective_fov"] = method(undefined, matrix_build_projection_perspective_fov);
                db[$ "matrix_multiply"] = method(undefined, matrix_multiply);
                db[$ "matrix_transform_vertex"] = method(undefined, matrix_transform_vertex);
                db[$ "matrix_stack_push"] = method(undefined, matrix_stack_push);
                db[$ "matrix_stack_pop"] = method(undefined, matrix_stack_pop);
                db[$ "matrix_stack_set"] = method(undefined, matrix_stack_set);
                db[$ "matrix_stack_clear"] = method(undefined, matrix_stack_clear);
                db[$ "matrix_stack_top"] = method(undefined, matrix_stack_top);
                db[$ "matrix_stack_is_empty"] = method(undefined, matrix_stack_is_empty);
                db[$ "os_windows"] = os_windows;
                db[$ "os_macosx"] = os_macosx;
                db[$ "os_ios"] = os_ios;
                db[$ "os_android"] = os_android;
                db[$ "os_linux"] = os_linux;
                db[$ "os_unknown"] = os_unknown;
                db[$ "os_winphone"] = os_winphone;
                db[$ "os_win8native"] = os_win8native;
                db[$ "os_psvita"] = os_psvita;
                db[$ "os_ps4"] = os_ps4;
                db[$ "os_xboxone"] = os_xboxone;
                db[$ "os_ps3"] = os_ps3;
                db[$ "os_uwp"] = os_uwp;
                db[$ "os_tvos"] = os_tvos;
                db[$ "os_switch"] = os_switch;
                db[$ "os_ps5"] = os_ps5;
                db[$ "os_xboxseriesxs"] = os_xboxseriesxs;
                db[$ "os_gdk"] = os_gdk;
                db[$ "os_operagx"] = os_operagx;
                db[$ "os_gxgames"] = os_gxgames;
                db[$ "browser_not_a_browser"] = browser_not_a_browser;
                db[$ "browser_unknown"] = browser_unknown;
                db[$ "browser_ie"] = browser_ie;
                db[$ "browser_firefox"] = browser_firefox;
                db[$ "browser_chrome"] = browser_chrome;
                db[$ "browser_safari"] = browser_safari;
                db[$ "browser_safari_mobile"] = browser_safari_mobile;
                db[$ "browser_opera"] = browser_opera;
                db[$ "browser_tizen"] = browser_tizen;
                db[$ "browser_edge"] = browser_edge;
                db[$ "browser_windows_store"] = browser_windows_store;
                db[$ "browser_ie_mobile"] = browser_ie_mobile;
                db[$ "browser_width_get"] = method(undefined, function () { return browser_width });
                db[$ "browser_height_get"] = method(undefined, function () { return browser_height });
                db[$ "browser_input_capture"] = method(undefined, browser_input_capture);
                db[$ "device_ios_unknown"] = device_ios_unknown;
                db[$ "device_ios_iphone"] = device_ios_iphone;
                db[$ "device_ios_iphone_retina"] = device_ios_iphone_retina;
                db[$ "device_ios_ipad"] = device_ios_ipad;
                db[$ "device_ios_ipad_retina"] = device_ios_ipad_retina;
                db[$ "device_ios_iphone5"] = device_ios_iphone5;
                db[$ "device_ios_iphone6"] = device_ios_iphone6;
                db[$ "device_ios_iphone6plus"] = device_ios_iphone6plus;
                db[$ "device_emulator"] = device_emulator;
                db[$ "device_tablet"] = device_tablet;
                db[$ "display_landscape"] = display_landscape;
                db[$ "display_landscape_flipped"] = display_landscape_flipped;
                db[$ "display_portrait"] = display_portrait;
                db[$ "display_portrait_flipped"] = display_portrait_flipped;
                db[$ "os_type_get"] = method(undefined, function () { return os_type });
                db[$ "os_device_get"] = method(undefined, function () { return os_device });
                db[$ "os_browser_get"] = method(undefined, function () { return os_browser });
                db[$ "os_version_get"] = method(undefined, function () { return os_version });
                db[$ "os_get_config"] = method(undefined, os_get_config);
                db[$ "os_get_info"] = method(undefined, os_get_info);
                db[$ "os_get_language"] = method(undefined, os_get_language);
                db[$ "os_get_region"] = method(undefined, os_get_region);
                db[$ "os_check_permission"] = method(undefined, os_check_permission);
                db[$ "os_request_permission"] = method(undefined, os_request_permission);
                db[$ "os_lock_orientation"] = method(undefined, os_lock_orientation);
                db[$ "os_set_orientation_lock"] = method(undefined, os_set_orientation_lock);
                db[$ "display_get_dpi_x"] = method(undefined, display_get_dpi_x);
                db[$ "display_get_dpi_y"] = method(undefined, display_get_dpi_y);
                db[$ "display_set_gui_size"] = method(undefined, display_set_gui_size);
                db[$ "display_set_gui_maximise"] = method(undefined, display_set_gui_maximise);
                db[$ "display_set_gui_maximize"] = method(undefined, display_set_gui_maximize);
                db[$ "device_mouse_dbclick_enable"] = method(undefined, device_mouse_dbclick_enable);
                db[$ "display_aa_get"] = method(undefined, function () { return display_aa });
                db[$ "async_load_get"] = method(undefined, function () { return async_load });
                db[$ "delta_time_get"] = method(undefined, function () { return delta_time });
                db[$ "webgl_enabled_get"] = method(undefined, function () { return webgl_enabled });
                db[$ "event_data_get"] = method(undefined, function () { return event_data });
                db[$ "display_set_timing_method"] = method(undefined, display_set_timing_method);
                db[$ "display_get_timing_method"] = method(undefined, display_get_timing_method);
                db[$ "tm_sleep"] = tm_sleep;
                db[$ "tm_countvsyncs"] = tm_countvsyncs;
                db[$ "display_set_sleep_margin"] = method(undefined, display_set_sleep_margin);
                db[$ "display_get_sleep_margin"] = method(undefined, display_get_sleep_margin);
                db[$ "of_challenge_win"] = of_challenge_win;
                db[$ "of_challenge_lose"] = of_challenge_lose;
                db[$ "of_challenge_tie"] = of_challenge_tie;
                db[$ "leaderboard_type_number"] = leaderboard_type_number;
                db[$ "leaderboard_type_time_mins_secs"] = leaderboard_type_time_mins_secs;
                db[$ "virtual_key_add"] = method(undefined, virtual_key_add);
                db[$ "virtual_key_hide"] = method(undefined, virtual_key_hide);
                db[$ "virtual_key_delete"] = method(undefined, virtual_key_delete);
                db[$ "virtual_key_show"] = method(undefined, virtual_key_show);
                db[$ "draw_enable_drawevent"] = method(undefined, draw_enable_drawevent);
                db[$ "draw_enable_swf_aa"] = method(undefined, draw_enable_swf_aa);
                db[$ "draw_set_swf_aa_level"] = method(undefined, draw_set_swf_aa_level);
                db[$ "draw_get_swf_aa_level"] = method(undefined, draw_get_swf_aa_level);
                db[$ "draw_texture_flush"] = method(undefined, draw_texture_flush);
                db[$ "draw_flush"] = method(undefined, draw_flush);
                db[$ "cmpfunc_never"] = cmpfunc_never;
                db[$ "cmpfunc_less"] = cmpfunc_less;
                db[$ "cmpfunc_equal"] = cmpfunc_equal;
                db[$ "cmpfunc_lessequal"] = cmpfunc_lessequal;
                db[$ "cmpfunc_greater"] = cmpfunc_greater;
                db[$ "cmpfunc_notequal"] = cmpfunc_notequal;
                db[$ "cmpfunc_greaterequal"] = cmpfunc_greaterequal;
                db[$ "cmpfunc_always"] = cmpfunc_always;
                db[$ "cull_noculling"] = cull_noculling;
                db[$ "cull_clockwise"] = cull_clockwise;
                db[$ "cull_counterclockwise"] = cull_counterclockwise;
                db[$ "lighttype_dir"] = lighttype_dir;
                db[$ "lighttype_point"] = lighttype_point;
                db[$ "gpu_set_blendenable"] = method(undefined, gpu_set_blendenable);
                db[$ "gpu_set_ztestenable"] = method(undefined, gpu_set_ztestenable);
                db[$ "gpu_set_zfunc"] = method(undefined, gpu_set_zfunc);
                db[$ "gpu_set_zwriteenable"] = method(undefined, gpu_set_zwriteenable);
                db[$ "gpu_set_fog"] = method(undefined, gpu_set_fog);
                db[$ "gpu_set_cullmode"] = method(undefined, gpu_set_cullmode);
                db[$ "gpu_set_blendmode"] = method(undefined, gpu_set_blendmode);
                db[$ "gpu_set_blendmode_ext"] = method(undefined, gpu_set_blendmode_ext);
                db[$ "gpu_set_blendmode_ext_sepalpha"] = method(undefined, gpu_set_blendmode_ext_sepalpha);
                db[$ "gpu_set_colorwriteenable"] = method(undefined, gpu_set_colorwriteenable);
                db[$ "gpu_set_colourwriteenable"] = method(undefined, gpu_set_colourwriteenable);
                db[$ "gpu_set_alphatestenable"] = method(undefined, gpu_set_alphatestenable);
                db[$ "gpu_set_alphatestref"] = method(undefined, gpu_set_alphatestref);
                db[$ "gpu_set_texfilter"] = method(undefined, gpu_set_texfilter);
                db[$ "gpu_set_texfilter_ext"] = method(undefined, gpu_set_texfilter_ext);
                db[$ "gpu_set_texrepeat"] = method(undefined, gpu_set_texrepeat);
                db[$ "gpu_set_texrepeat_ext"] = method(undefined, gpu_set_texrepeat_ext);
                db[$ "gpu_set_tex_filter"] = method(undefined, gpu_set_tex_filter);
                db[$ "gpu_set_tex_filter_ext"] = method(undefined, gpu_set_tex_filter_ext);
                db[$ "gpu_set_tex_repeat"] = method(undefined, gpu_set_tex_repeat);
                db[$ "gpu_set_tex_repeat_ext"] = method(undefined, gpu_set_tex_repeat_ext);
                db[$ "gpu_set_tex_mip_filter"] = method(undefined, gpu_set_tex_mip_filter);
                db[$ "gpu_set_tex_mip_filter_ext"] = method(undefined, gpu_set_tex_mip_filter_ext);
                db[$ "gpu_set_tex_mip_bias"] = method(undefined, gpu_set_tex_mip_bias);
                db[$ "gpu_set_tex_mip_bias_ext"] = method(undefined, gpu_set_tex_mip_bias_ext);
                db[$ "gpu_set_tex_min_mip"] = method(undefined, gpu_set_tex_min_mip);
                db[$ "gpu_set_tex_min_mip_ext"] = method(undefined, gpu_set_tex_min_mip_ext);
                db[$ "gpu_set_tex_max_mip"] = method(undefined, gpu_set_tex_max_mip);
                db[$ "gpu_set_tex_max_mip_ext"] = method(undefined, gpu_set_tex_max_mip_ext);
                db[$ "gpu_set_tex_max_aniso"] = method(undefined, gpu_set_tex_max_aniso);
                db[$ "gpu_set_tex_max_aniso_ext"] = method(undefined, gpu_set_tex_max_aniso_ext);
                db[$ "gpu_set_tex_mip_enable"] = method(undefined, gpu_set_tex_mip_enable);
                db[$ "gpu_set_tex_mip_enable_ext"] = method(undefined, gpu_set_tex_mip_enable_ext);
                db[$ "gpu_get_blendenable"] = method(undefined, gpu_get_blendenable);
                db[$ "gpu_get_ztestenable"] = method(undefined, gpu_get_ztestenable);
                db[$ "gpu_get_zfunc"] = method(undefined, gpu_get_zfunc);
                db[$ "gpu_get_zwriteenable"] = method(undefined, gpu_get_zwriteenable);
                db[$ "gpu_get_fog"] = method(undefined, gpu_get_fog);
                db[$ "gpu_get_cullmode"] = method(undefined, gpu_get_cullmode);
                db[$ "gpu_get_blendmode"] = method(undefined, gpu_get_blendmode);
                db[$ "gpu_get_blendmode_ext"] = method(undefined, gpu_get_blendmode_ext);
                db[$ "gpu_get_blendmode_ext_sepalpha"] = method(undefined, gpu_get_blendmode_ext_sepalpha);
                db[$ "gpu_get_blendmode_src"] = method(undefined, gpu_get_blendmode_src);
                db[$ "gpu_get_blendmode_dest"] = method(undefined, gpu_get_blendmode_dest);
                db[$ "gpu_get_blendmode_srcalpha"] = method(undefined, gpu_get_blendmode_srcalpha);
                db[$ "gpu_get_blendmode_destalpha"] = method(undefined, gpu_get_blendmode_destalpha);
                db[$ "gpu_get_colorwriteenable"] = method(undefined, gpu_get_colorwriteenable);
                db[$ "gpu_get_colourwriteenable"] = method(undefined, gpu_get_colourwriteenable);
                db[$ "gpu_get_alphatestenable"] = method(undefined, gpu_get_alphatestenable);
                db[$ "gpu_get_alphatestref"] = method(undefined, gpu_get_alphatestref);
                db[$ "gpu_get_texfilter"] = method(undefined, gpu_get_texfilter);
                db[$ "gpu_get_texfilter_ext"] = method(undefined, gpu_get_texfilter_ext);
                db[$ "gpu_get_texrepeat"] = method(undefined, gpu_get_texrepeat);
                db[$ "gpu_get_texrepeat_ext"] = method(undefined, gpu_get_texrepeat_ext);
                db[$ "gpu_get_tex_filter"] = method(undefined, gpu_get_tex_filter);
                db[$ "gpu_get_tex_filter_ext"] = method(undefined, gpu_get_tex_filter_ext);
                db[$ "gpu_get_tex_repeat"] = method(undefined, gpu_get_tex_repeat);
                db[$ "gpu_get_tex_repeat_ext"] = method(undefined, gpu_get_tex_repeat_ext);
                db[$ "gpu_get_tex_mip_filter"] = method(undefined, gpu_get_tex_mip_filter);
                db[$ "gpu_get_tex_mip_filter_ext"] = method(undefined, gpu_get_tex_mip_filter_ext);
                db[$ "gpu_get_tex_mip_bias"] = method(undefined, gpu_get_tex_mip_bias);
                db[$ "gpu_get_tex_mip_bias_ext"] = method(undefined, gpu_get_tex_mip_bias_ext);
                db[$ "gpu_get_tex_min_mip"] = method(undefined, gpu_get_tex_min_mip);
                db[$ "gpu_get_tex_min_mip_ext"] = method(undefined, gpu_get_tex_min_mip_ext);
                db[$ "gpu_get_tex_max_mip"] = method(undefined, gpu_get_tex_max_mip);
                db[$ "gpu_get_tex_max_mip_ext"] = method(undefined, gpu_get_tex_max_mip_ext);
                db[$ "gpu_get_tex_max_aniso"] = method(undefined, gpu_get_tex_max_aniso);
                db[$ "gpu_get_tex_max_aniso_ext"] = method(undefined, gpu_get_tex_max_aniso_ext);
                db[$ "gpu_get_tex_mip_enable"] = method(undefined, gpu_get_tex_mip_enable);
                db[$ "gpu_get_tex_mip_enable_ext"] = method(undefined, gpu_get_tex_mip_enable_ext);
                db[$ "gpu_push_state"] = method(undefined, gpu_push_state);
                db[$ "gpu_pop_state"] = method(undefined, gpu_pop_state);
                db[$ "gpu_get_state"] = method(undefined, gpu_get_state);
                db[$ "gpu_set_state"] = method(undefined, gpu_set_state);
                db[$ "draw_light_define_ambient"] = method(undefined, draw_light_define_ambient);
                db[$ "draw_light_define_direction"] = method(undefined, draw_light_define_direction);
                db[$ "draw_light_define_point"] = method(undefined, draw_light_define_point);
                db[$ "draw_light_enable"] = method(undefined, draw_light_enable);
                db[$ "draw_set_lighting"] = method(undefined, draw_set_lighting);
                db[$ "draw_light_get_ambient"] = method(undefined, draw_light_get_ambient);
                db[$ "draw_light_get"] = method(undefined, draw_light_get);
                db[$ "draw_get_lighting"] = method(undefined, draw_get_lighting);
                db[$ "shop_leave_rating"] = method(undefined, shop_leave_rating);
                db[$ "url_get_domain"] = method(undefined, url_get_domain);
                db[$ "url_open"] = method(undefined, url_open);
                db[$ "url_open_ext"] = method(undefined, url_open_ext);
                db[$ "url_open_full"] = method(undefined, url_open_full);
                db[$ "get_timer"] = method(undefined, get_timer);
                db[$ "device_get_tilt_x"] = method(undefined, device_get_tilt_x);
                db[$ "device_get_tilt_y"] = method(undefined, device_get_tilt_y);
                db[$ "device_get_tilt_z"] = method(undefined, device_get_tilt_z);
                db[$ "device_is_keypad_open"] = method(undefined, device_is_keypad_open);
                db[$ "device_mouse_check_button"] = method(undefined, device_mouse_check_button);
                db[$ "device_mouse_check_button_pressed"] = method(undefined, device_mouse_check_button_pressed);
                db[$ "device_mouse_check_button_released"] = method(undefined, device_mouse_check_button_released);
                db[$ "device_mouse_x"] = method(undefined, device_mouse_x);
                db[$ "device_mouse_y"] = method(undefined, device_mouse_y);
                db[$ "device_mouse_raw_x"] = method(undefined, device_mouse_raw_x);
                db[$ "device_mouse_raw_y"] = method(undefined, device_mouse_raw_y);
                db[$ "device_mouse_x_to_gui"] = method(undefined, device_mouse_x_to_gui);
                db[$ "device_mouse_y_to_gui"] = method(undefined, device_mouse_y_to_gui);
                db[$ "iap_activate"] = method(undefined, iap_activate);
                db[$ "iap_status"] = method(undefined, iap_status);
                db[$ "iap_enumerate_products"] = method(undefined, iap_enumerate_products);
                db[$ "iap_restore_all"] = method(undefined, iap_restore_all);
                db[$ "iap_acquire"] = method(undefined, iap_acquire);
                db[$ "iap_consume"] = method(undefined, iap_consume);
                db[$ "iap_product_details"] = method(undefined, iap_product_details);
                db[$ "iap_purchase_details"] = method(undefined, iap_purchase_details);
                db[$ "iap_data_get"] = method(undefined, function () { return iap_data });
                db[$ "iap_ev_storeload"] = iap_ev_storeload;
                db[$ "iap_ev_product"] = iap_ev_product;
                db[$ "iap_ev_purchase"] = iap_ev_purchase;
                db[$ "iap_ev_consume"] = iap_ev_consume;
                db[$ "iap_ev_restore"] = iap_ev_restore;
                db[$ "iap_storeload_ok"] = iap_storeload_ok;
                db[$ "iap_storeload_failed"] = iap_storeload_failed;
                db[$ "iap_status_uninitialised"] = iap_status_uninitialised;
                db[$ "iap_status_unavailable"] = iap_status_unavailable;
                db[$ "iap_status_loading"] = iap_status_loading;
                db[$ "iap_status_available"] = iap_status_available;
                db[$ "iap_status_processing"] = iap_status_processing;
                db[$ "iap_status_restoring"] = iap_status_restoring;
                db[$ "iap_failed"] = iap_failed;
                db[$ "iap_unavailable"] = iap_unavailable;
                db[$ "iap_available"] = iap_available;
                db[$ "iap_purchased"] = iap_purchased;
                db[$ "iap_canceled"] = iap_canceled;
                db[$ "iap_refunded"] = iap_refunded;
                db[$ "gamepad_is_supported"] = method(undefined, gamepad_is_supported);
                db[$ "gamepad_get_device_count"] = method(undefined, gamepad_get_device_count);
                db[$ "gamepad_is_connected"] = method(undefined, gamepad_is_connected);
                db[$ "gamepad_get_description"] = method(undefined, gamepad_get_description);
                db[$ "gamepad_get_button_threshold"] = method(undefined, gamepad_get_button_threshold);
                db[$ "gamepad_set_button_threshold"] = method(undefined, gamepad_set_button_threshold);
                db[$ "gamepad_get_axis_deadzone"] = method(undefined, gamepad_get_axis_deadzone);
                db[$ "gamepad_set_axis_deadzone"] = method(undefined, gamepad_set_axis_deadzone);
                db[$ "gamepad_button_count"] = method(undefined, gamepad_button_count);
                db[$ "gamepad_button_check"] = method(undefined, gamepad_button_check);
                db[$ "gamepad_button_check_pressed"] = method(undefined, gamepad_button_check_pressed);
                db[$ "gamepad_button_check_released"] = method(undefined, gamepad_button_check_released);
                db[$ "gamepad_button_value"] = method(undefined, gamepad_button_value);
                db[$ "gamepad_axis_count"] = method(undefined, gamepad_axis_count);
                db[$ "gamepad_axis_value"] = method(undefined, gamepad_axis_value);
                db[$ "gamepad_set_vibration"] = method(undefined, gamepad_set_vibration);
                db[$ "gamepad_set_colour"] = method(undefined, gamepad_set_colour);
                db[$ "gamepad_set_color"] = method(undefined, gamepad_set_color);
                db[$ "gamepad_hat_count"] = method(undefined, gamepad_hat_count);
                db[$ "gamepad_hat_value"] = method(undefined, gamepad_hat_value);
                db[$ "gamepad_remove_mapping"] = method(undefined, gamepad_remove_mapping);
                db[$ "gamepad_test_mapping"] = method(undefined, gamepad_test_mapping);
                db[$ "gamepad_get_mapping"] = method(undefined, gamepad_get_mapping);
                db[$ "gamepad_get_guid"] = method(undefined, gamepad_get_guid);
                db[$ "gamepad_set_option"] = method(undefined, gamepad_set_option);
                db[$ "gamepad_get_option"] = method(undefined, gamepad_get_option);
                db[$ "os_is_paused"] = method(undefined, os_is_paused);
                db[$ "window_has_focus"] = method(undefined, window_has_focus);
                db[$ "code_is_compiled"] = method(undefined, code_is_compiled);
                db[$ "http_get"] = method(undefined, http_get);
                db[$ "http_get_file"] = method(undefined, http_get_file);
                db[$ "http_post_string"] = method(undefined, http_post_string);
                db[$ "http_request"] = method(undefined, http_request);
                db[$ "http_get_request_crossorigin"] = method(undefined, http_get_request_crossorigin);
                db[$ "http_set_request_crossorigin"] = method(undefined, http_set_request_crossorigin);
                db[$ "json_encode"] = method(undefined, json_encode);
                db[$ "json_decode"] = method(undefined, json_decode);
                db[$ "json_stringify"] = method(undefined, json_stringify);
                db[$ "json_parse"] = method(undefined, json_parse);
                db[$ "zip_unzip"] = method(undefined, zip_unzip);
                db[$ "load_csv"] = method(undefined, load_csv);
                db[$ "base64_encode"] = method(undefined, base64_encode);
                db[$ "base64_decode"] = method(undefined, base64_decode);
                db[$ "md5_string_unicode"] = method(undefined, md5_string_unicode);
                db[$ "md5_string_utf8"] = method(undefined, md5_string_utf8);
                db[$ "md5_file"] = method(undefined, md5_file);
                db[$ "os_is_network_connected"] = method(undefined, os_is_network_connected);
                db[$ "sha1_string_unicode"] = method(undefined, sha1_string_unicode);
                db[$ "sha1_string_utf8"] = method(undefined, sha1_string_utf8);
                db[$ "sha1_file"] = method(undefined, sha1_file);
                db[$ "os_powersave_enable"] = method(undefined, os_powersave_enable);
                db[$ "uwp_livetile_tile_clear"] = method(undefined, uwp_livetile_tile_clear);
                db[$ "uwp_livetile_badge_notification"] = method(undefined, uwp_livetile_badge_notification);
                db[$ "uwp_livetile_badge_clear"] = method(undefined, uwp_livetile_badge_clear);
                db[$ "uwp_livetile_queue_enable"] = method(undefined, uwp_livetile_queue_enable);
                db[$ "uwp_secondarytile_pin"] = method(undefined, uwp_secondarytile_pin);
                db[$ "uwp_secondarytile_badge_notification"] = method(undefined, uwp_secondarytile_badge_notification);
                db[$ "uwp_secondarytile_delete"] = method(undefined, uwp_secondarytile_delete);
                db[$ "uwp_secondarytile_badge_clear"] = method(undefined, uwp_secondarytile_badge_clear);
                db[$ "uwp_secondarytile_tile_clear"] = method(undefined, uwp_secondarytile_tile_clear);
                db[$ "uwp_livetile_notification_begin"] = method(undefined, uwp_livetile_notification_begin);
                db[$ "uwp_livetile_notification_secondary_begin"] = method(undefined, uwp_livetile_notification_secondary_begin);
                db[$ "uwp_livetile_notification_expiry"] = method(undefined, uwp_livetile_notification_expiry);
                db[$ "uwp_livetile_notification_tag"] = method(undefined, uwp_livetile_notification_tag);
                db[$ "uwp_livetile_notification_text_add"] = method(undefined, uwp_livetile_notification_text_add);
                db[$ "uwp_livetile_notification_image_add"] = method(undefined, uwp_livetile_notification_image_add);
                db[$ "uwp_livetile_notification_end"] = method(undefined, uwp_livetile_notification_end);
                db[$ "uwp_livetile_notification_template_add"] = method(undefined, uwp_livetile_notification_template_add);
                db[$ "uwp_device_touchscreen_available"] = method(undefined, uwp_device_touchscreen_available);
                db[$ "winphone_tile_background_colour"] = method(undefined, winphone_tile_background_colour);
                db[$ "winphone_tile_background_color"] = method(undefined, winphone_tile_background_color);
                db[$ "network_create_socket"] = method(undefined, network_create_socket);
                db[$ "network_create_socket_ext"] = method(undefined, network_create_socket_ext);
                db[$ "network_create_server"] = method(undefined, network_create_server);
                db[$ "network_create_server_raw"] = method(undefined, network_create_server_raw);
                db[$ "network_connect"] = method(undefined, network_connect);
                db[$ "network_connect_raw"] = method(undefined, network_connect_raw);
                db[$ "network_connect_async"] = method(undefined, network_connect_async);
                db[$ "network_connect_raw_async"] = method(undefined, network_connect_raw_async);
                db[$ "network_send_packet"] = method(undefined, network_send_packet);
                db[$ "network_send_raw"] = method(undefined, network_send_raw);
                db[$ "network_send_broadcast"] = method(undefined, network_send_broadcast);
                db[$ "network_send_udp"] = method(undefined, network_send_udp);
                db[$ "network_send_udp_raw"] = method(undefined, network_send_udp_raw);
                db[$ "network_set_timeout"] = method(undefined, network_set_timeout);
                db[$ "network_set_config"] = method(undefined, network_set_config);
                db[$ "network_resolve"] = method(undefined, network_resolve);
                db[$ "network_destroy"] = method(undefined, network_destroy);
                db[$ "network_socket_tcp"] = network_socket_tcp;
                db[$ "network_socket_udp"] = network_socket_udp;
                db[$ "network_socket_ws"] = network_socket_ws;
                db[$ "network_socket_wss"] = network_socket_wss;
                db[$ "network_socket_bluetooth"] = network_socket_bluetooth;
                db[$ "network_type_connect"] = network_type_connect;
                db[$ "network_type_disconnect"] = network_type_disconnect;
                db[$ "network_type_data"] = network_type_data;
                db[$ "network_type_non_blocking_connect"] = network_type_non_blocking_connect;
                db[$ "network_type_up"] = network_type_up;
                db[$ "network_type_up_failed"] = network_type_up_failed;
                db[$ "network_type_down"] = network_type_down;
                db[$ "network_send_binary"] = network_send_binary;
                db[$ "network_send_text"] = network_send_text;
                db[$ "network_config_connect_timeout"] = network_config_connect_timeout;
                db[$ "network_config_use_non_blocking_socket"] = network_config_use_non_blocking_socket;
                db[$ "network_config_enable_reliable_udp"] = network_config_enable_reliable_udp;
                db[$ "network_config_disable_reliable_udp"] = network_config_disable_reliable_udp;
                db[$ "network_config_avoid_time_wait"] = network_config_avoid_time_wait;
                db[$ "network_config_websocket_protocol"] = network_config_websocket_protocol;
                db[$ "network_connect_none"] = network_connect_none;
                db[$ "network_connect_blocking"] = network_connect_blocking;
                db[$ "network_connect_nonblocking"] = network_connect_nonblocking;
                db[$ "buffer_create"] = method(undefined, buffer_create);
                db[$ "buffer_write"] = method(undefined, buffer_write);
                db[$ "buffer_read"] = method(undefined, buffer_read);
                db[$ "buffer_seek"] = method(undefined, buffer_seek);
                db[$ "buffer_get_surface"] = method(undefined, buffer_get_surface);
                db[$ "buffer_set_surface"] = method(undefined, buffer_set_surface);
                db[$ "buffer_set_used_size"] = method(undefined, buffer_set_used_size);
                db[$ "buffer_delete"] = method(undefined, buffer_delete);
                db[$ "buffer_exists"] = method(undefined, buffer_exists);
                db[$ "buffer_get_type"] = method(undefined, buffer_get_type);
                db[$ "buffer_get_alignment"] = method(undefined, buffer_get_alignment);
                db[$ "buffer_poke"] = method(undefined, buffer_poke);
                db[$ "buffer_peek"] = method(undefined, buffer_peek);
                db[$ "buffer_save"] = method(undefined, buffer_save);
                db[$ "buffer_save_ext"] = method(undefined, buffer_save_ext);
                db[$ "buffer_load"] = method(undefined, buffer_load);
                db[$ "buffer_load_ext"] = method(undefined, buffer_load_ext);
                db[$ "buffer_load_partial"] = method(undefined, buffer_load_partial);
                db[$ "buffer_copy"] = method(undefined, buffer_copy);
                db[$ "buffer_fill"] = method(undefined, buffer_fill);
                db[$ "buffer_get_size"] = method(undefined, buffer_get_size);
                db[$ "buffer_tell"] = method(undefined, buffer_tell);
                db[$ "buffer_resize"] = method(undefined, buffer_resize);
                db[$ "buffer_md5"] = method(undefined, buffer_md5);
                db[$ "buffer_sha1"] = method(undefined, buffer_sha1);
                db[$ "buffer_crc32"] = method(undefined, buffer_crc32);
                db[$ "buffer_base64_encode"] = method(undefined, buffer_base64_encode);
                db[$ "buffer_base64_decode"] = method(undefined, buffer_base64_decode);
                db[$ "buffer_base64_decode_ext"] = method(undefined, buffer_base64_decode_ext);
                db[$ "buffer_sizeof"] = method(undefined, buffer_sizeof);
                db[$ "buffer_get_address"] = method(undefined, buffer_get_address);
                db[$ "buffer_create_from_vertex_buffer"] = method(undefined, buffer_create_from_vertex_buffer);
                db[$ "buffer_create_from_vertex_buffer_ext"] = method(undefined, buffer_create_from_vertex_buffer_ext);
                db[$ "buffer_copy_from_vertex_buffer"] = method(undefined, buffer_copy_from_vertex_buffer);
                db[$ "buffer_async_group_begin"] = method(undefined, buffer_async_group_begin);
                db[$ "buffer_async_group_option"] = method(undefined, buffer_async_group_option);
                db[$ "buffer_async_group_end"] = method(undefined, buffer_async_group_end);
                db[$ "buffer_load_async"] = method(undefined, buffer_load_async);
                db[$ "buffer_save_async"] = method(undefined, buffer_save_async);
                db[$ "buffer_compress"] = method(undefined, buffer_compress);
                db[$ "buffer_decompress"] = method(undefined, buffer_decompress);
                db[$ "buffer_fixed"] = buffer_fixed;
                db[$ "buffer_grow"] = buffer_grow;
                db[$ "buffer_wrap"] = buffer_wrap;
                db[$ "buffer_fast"] = buffer_fast;
                db[$ "buffer_vbuffer"] = buffer_vbuffer;
                db[$ "buffer_u8"] = buffer_u8;
                db[$ "buffer_s8"] = buffer_s8;
                db[$ "buffer_u16"] = buffer_u16;
                db[$ "buffer_s16"] = buffer_s16;
                db[$ "buffer_u32"] = buffer_u32;
                db[$ "buffer_s32"] = buffer_s32;
                db[$ "buffer_u64"] = buffer_u64;
                db[$ "buffer_f16"] = buffer_f16;
                db[$ "buffer_f32"] = buffer_f32;
                db[$ "buffer_f64"] = buffer_f64;
                db[$ "buffer_bool"] = buffer_bool;
                db[$ "buffer_text"] = buffer_text;
                db[$ "buffer_string"] = buffer_string;
                db[$ "buffer_seek_start"] = buffer_seek_start;
                db[$ "buffer_seek_relative"] = buffer_seek_relative;
                db[$ "buffer_seek_end"] = buffer_seek_end;
                db[$ "gp_face1"] = gp_face1;
                db[$ "gp_face2"] = gp_face2;
                db[$ "gp_face3"] = gp_face3;
                db[$ "gp_face4"] = gp_face4;
                db[$ "gp_shoulderl"] = gp_shoulderl;
                db[$ "gp_shoulderr"] = gp_shoulderr;
                db[$ "gp_shoulderlb"] = gp_shoulderlb;
                db[$ "gp_shoulderrb"] = gp_shoulderrb;
                db[$ "gp_select"] = gp_select;
                db[$ "gp_start"] = gp_start;
                db[$ "gp_stickl"] = gp_stickl;
                db[$ "gp_stickr"] = gp_stickr;
                db[$ "gp_padu"] = gp_padu;
                db[$ "gp_padd"] = gp_padd;
                db[$ "gp_padl"] = gp_padl;
                db[$ "gp_padr"] = gp_padr;
                db[$ "gp_axislh"] = gp_axislh;
                db[$ "gp_axislv"] = gp_axislv;
                db[$ "gp_axisrh"] = gp_axisrh;
                db[$ "gp_axisrv"] = gp_axisrv;
                db[$ "gp_axis_acceleration_x"] = gp_axis_acceleration_x;
                db[$ "gp_axis_acceleration_y"] = gp_axis_acceleration_y;
                db[$ "gp_axis_acceleration_z"] = gp_axis_acceleration_z;
                db[$ "gp_axis_angular_velocity_x"] = gp_axis_angular_velocity_x;
                db[$ "gp_axis_angular_velocity_y"] = gp_axis_angular_velocity_y;
                db[$ "gp_axis_angular_velocity_z"] = gp_axis_angular_velocity_z;
                db[$ "gp_axis_orientation_x"] = gp_axis_orientation_x;
                db[$ "gp_axis_orientation_y"] = gp_axis_orientation_y;
                db[$ "gp_axis_orientation_z"] = gp_axis_orientation_z;
                db[$ "gp_axis_orientation_w"] = gp_axis_orientation_w;
                db[$ "shader_set"] = method(undefined, shader_set);
                db[$ "shader_get_name"] = method(undefined, shader_get_name);
                db[$ "shader_reset"] = method(undefined, shader_reset);
                db[$ "shader_current"] = method(undefined, shader_current);
                db[$ "shader_is_compiled"] = method(undefined, shader_is_compiled);
                db[$ "shader_get_sampler_index"] = method(undefined, shader_get_sampler_index);
                db[$ "shader_get_uniform"] = method(undefined, shader_get_uniform);
                db[$ "shader_set_uniform_i"] = method(undefined, shader_set_uniform_i);
                db[$ "shader_set_uniform_i_array"] = method(undefined, shader_set_uniform_i_array);
                db[$ "shader_set_uniform_f"] = method(undefined, shader_set_uniform_f);
                db[$ "shader_set_uniform_f_array"] = method(undefined, shader_set_uniform_f_array);
                db[$ "shader_set_uniform_matrix"] = method(undefined, shader_set_uniform_matrix);
                db[$ "shader_set_uniform_matrix_array"] = method(undefined, shader_set_uniform_matrix_array);
                db[$ "shader_enable_corner_id"] = method(undefined, shader_enable_corner_id);
                db[$ "texture_set_stage"] = method(undefined, texture_set_stage);
                db[$ "texture_get_texel_width"] = method(undefined, texture_get_texel_width);
                db[$ "texture_get_texel_height"] = method(undefined, texture_get_texel_height);
                db[$ "shaders_are_supported"] = method(undefined, shaders_are_supported);
                db[$ "vertex_format_begin"] = method(undefined, vertex_format_begin);
                db[$ "vertex_format_end"] = method(undefined, vertex_format_end);
                db[$ "vertex_format_delete"] = method(undefined, vertex_format_delete);
                db[$ "vertex_format_add_position"] = method(undefined, vertex_format_add_position);
                db[$ "vertex_format_add_position_3d"] = method(undefined, vertex_format_add_position_3d);
                db[$ "vertex_format_add_colour"] = method(undefined, vertex_format_add_colour);
                db[$ "vertex_format_add_color"] = method(undefined, vertex_format_add_color);
                db[$ "vertex_format_add_normal"] = method(undefined, vertex_format_add_normal);
                db[$ "vertex_format_add_texcoord"] = method(undefined, vertex_format_add_texcoord);
                db[$ "vertex_format_add_custom"] = method(undefined, vertex_format_add_custom);
                db[$ "vertex_usage_position"] = vertex_usage_position;
                db[$ "vertex_usage_colour"] = vertex_usage_colour;
                db[$ "vertex_usage_color"] = vertex_usage_color;
                db[$ "vertex_usage_normal"] = vertex_usage_normal;
                db[$ "vertex_usage_texcoord"] = vertex_usage_texcoord;
                db[$ "vertex_usage_blendweight"] = vertex_usage_blendweight;
                db[$ "vertex_usage_blendindices"] = vertex_usage_blendindices;
                db[$ "vertex_usage_psize"] = vertex_usage_psize;
                db[$ "vertex_usage_tangent"] = vertex_usage_tangent;
                db[$ "vertex_usage_binormal"] = vertex_usage_binormal;
                db[$ "vertex_usage_fog"] = vertex_usage_fog;
                db[$ "vertex_usage_depth"] = vertex_usage_depth;
                db[$ "vertex_usage_sample"] = vertex_usage_sample;
                db[$ "vertex_type_float1"] = vertex_type_float1;
                db[$ "vertex_type_float2"] = vertex_type_float2;
                db[$ "vertex_type_float3"] = vertex_type_float3;
                db[$ "vertex_type_float4"] = vertex_type_float4;
                db[$ "vertex_type_colour"] = vertex_type_colour;
                db[$ "vertex_type_color"] = vertex_type_color;
                db[$ "vertex_type_ubyte4"] = vertex_type_ubyte4;
                db[$ "vertex_create_buffer"] = method(undefined, vertex_create_buffer);
                db[$ "vertex_create_buffer_ext"] = method(undefined, vertex_create_buffer_ext);
                db[$ "vertex_delete_buffer"] = method(undefined, vertex_delete_buffer);
                db[$ "vertex_begin"] = method(undefined, vertex_begin);
                db[$ "vertex_end"] = method(undefined, vertex_end);
                db[$ "vertex_position"] = method(undefined, vertex_position);
                db[$ "vertex_position_3d"] = method(undefined, vertex_position_3d);
                db[$ "vertex_colour"] = method(undefined, vertex_colour);
                db[$ "vertex_color"] = method(undefined, vertex_color);
                db[$ "vertex_argb"] = method(undefined, vertex_argb);
                db[$ "vertex_texcoord"] = method(undefined, vertex_texcoord);
                db[$ "vertex_normal"] = method(undefined, vertex_normal);
                db[$ "vertex_float1"] = method(undefined, vertex_float1);
                db[$ "vertex_float2"] = method(undefined, vertex_float2);
                db[$ "vertex_float3"] = method(undefined, vertex_float3);
                db[$ "vertex_float4"] = method(undefined, vertex_float4);
                db[$ "vertex_ubyte4"] = method(undefined, vertex_ubyte4);
                db[$ "vertex_submit"] = method(undefined, vertex_submit);
                db[$ "vertex_freeze"] = method(undefined, vertex_freeze);
                db[$ "vertex_get_number"] = method(undefined, vertex_get_number);
                db[$ "vertex_get_buffer_size"] = method(undefined, vertex_get_buffer_size);
                db[$ "vertex_create_buffer_from_buffer"] = method(undefined, vertex_create_buffer_from_buffer);
                db[$ "vertex_create_buffer_from_buffer_ext"] = method(undefined, vertex_create_buffer_from_buffer_ext);
                db[$ "skeleton_animation_set"] = method(undefined, skeleton_animation_set);
                db[$ "skeleton_animation_get"] = method(undefined, skeleton_animation_get);
                db[$ "skeleton_animation_mix"] = method(undefined, skeleton_animation_mix);
                db[$ "skeleton_animation_set_ext"] = method(undefined, skeleton_animation_set_ext);
                db[$ "skeleton_animation_get_ext"] = method(undefined, skeleton_animation_get_ext);
                db[$ "skeleton_animation_get_duration"] = method(undefined, skeleton_animation_get_duration);
                db[$ "skeleton_animation_get_frames"] = method(undefined, skeleton_animation_get_frames);
                db[$ "skeleton_animation_clear"] = method(undefined, skeleton_animation_clear);
                db[$ "skeleton_skin_set"] = method(undefined, skeleton_skin_set);
                db[$ "skeleton_skin_get"] = method(undefined, skeleton_skin_get);
                db[$ "skeleton_skin_create"] = method(undefined, skeleton_skin_create);
                db[$ "skeleton_attachment_set"] = method(undefined, skeleton_attachment_set);
                db[$ "skeleton_attachment_get"] = method(undefined, skeleton_attachment_get);
                db[$ "skeleton_attachment_create"] = method(undefined, skeleton_attachment_create);
                db[$ "skeleton_attachment_create_colour"] = method(undefined, skeleton_attachment_create_colour);
                db[$ "skeleton_attachment_create_color"] = method(undefined, skeleton_attachment_create_color);
                db[$ "skeleton_collision_draw_set"] = method(undefined, skeleton_collision_draw_set);
                db[$ "skeleton_bone_data_get"] = method(undefined, skeleton_bone_data_get);
                db[$ "skeleton_bone_data_set"] = method(undefined, skeleton_bone_data_set);
                db[$ "skeleton_bone_state_get"] = method(undefined, skeleton_bone_state_get);
                db[$ "skeleton_bone_state_set"] = method(undefined, skeleton_bone_state_set);
                db[$ "skeleton_slot_colour_set"] = method(undefined, skeleton_slot_colour_set);
                db[$ "skeleton_slot_color_set"] = method(undefined, skeleton_slot_color_set);
                db[$ "skeleton_slot_colour_get"] = method(undefined, skeleton_slot_colour_get);
                db[$ "skeleton_slot_color_get"] = method(undefined, skeleton_slot_color_get);
                db[$ "skeleton_slot_alpha_get"] = method(undefined, skeleton_slot_alpha_get);
                db[$ "skeleton_find_slot"] = method(undefined, skeleton_find_slot);
                db[$ "skeleton_get_minmax"] = method(undefined, skeleton_get_minmax);
                db[$ "skeleton_get_num_bounds"] = method(undefined, skeleton_get_num_bounds);
                db[$ "skeleton_get_bounds"] = method(undefined, skeleton_get_bounds);
                db[$ "skeleton_animation_get_frame"] = method(undefined, skeleton_animation_get_frame);
                db[$ "skeleton_animation_set_frame"] = method(undefined, skeleton_animation_set_frame);
                db[$ "skeleton_animation_get_position"] = method(undefined, skeleton_animation_get_position);
                db[$ "skeleton_animation_set_position"] = method(undefined, skeleton_animation_set_position);
                db[$ "skeleton_animation_get_event_frames"] = method(undefined, skeleton_animation_get_event_frames);
                db[$ "skeleton_animation_is_looping"] = method(undefined, skeleton_animation_is_looping);
                db[$ "skeleton_animation_is_finished"] = method(undefined, skeleton_animation_is_finished);
                db[$ "draw_skeleton"] = method(undefined, draw_skeleton);
                db[$ "draw_skeleton_time"] = method(undefined, draw_skeleton_time);
                db[$ "draw_skeleton_instance"] = method(undefined, draw_skeleton_instance);
                db[$ "draw_skeleton_collision"] = method(undefined, draw_skeleton_collision);
                db[$ "draw_enable_skeleton_blendmodes"] = method(undefined, draw_enable_skeleton_blendmodes);
                db[$ "draw_get_enable_skeleton_blendmodes"] = method(undefined, draw_get_enable_skeleton_blendmodes);
                db[$ "skeleton_animation_list"] = method(undefined, skeleton_animation_list);
                db[$ "skeleton_skin_list"] = method(undefined, skeleton_skin_list);
                db[$ "skeleton_bone_list"] = method(undefined, skeleton_bone_list);
                db[$ "skeleton_slot_list"] = method(undefined, skeleton_slot_list);
                db[$ "skeleton_slot_data"] = method(undefined, skeleton_slot_data);
                db[$ "skeleton_slot_data_instance"] = method(undefined, skeleton_slot_data_instance);
                db[$ "layer_get_id"] = method(undefined, layer_get_id);
                db[$ "layer_get_id_at_depth"] = method(undefined, layer_get_id_at_depth);
                db[$ "layer_get_depth"] = method(undefined, layer_get_depth);
                db[$ "layer_create"] = method(undefined, layer_create);
                db[$ "layer_destroy"] = method(undefined, layer_destroy);
                db[$ "layer_destroy_instances"] = method(undefined, layer_destroy_instances);
                db[$ "layer_add_instance"] = method(undefined, layer_add_instance);
                db[$ "layer_has_instance"] = method(undefined, layer_has_instance);
                db[$ "layer_set_visible"] = method(undefined, layer_set_visible);
                db[$ "layer_get_visible"] = method(undefined, layer_get_visible);
                db[$ "layer_exists"] = method(undefined, layer_exists);
                db[$ "layer_x"] = method(undefined, layer_x);
                db[$ "layer_y"] = method(undefined, layer_y);
                db[$ "layer_get_x"] = method(undefined, layer_get_x);
                db[$ "layer_get_y"] = method(undefined, layer_get_y);
                db[$ "layer_hspeed"] = method(undefined, layer_hspeed);
                db[$ "layer_vspeed"] = method(undefined, layer_vspeed);
                db[$ "layer_get_hspeed"] = method(undefined, layer_get_hspeed);
                db[$ "layer_get_vspeed"] = method(undefined, layer_get_vspeed);
                db[$ "layer_script_begin"] = method(undefined, layer_script_begin);
                db[$ "layer_script_end"] = method(undefined, layer_script_end);
                db[$ "layer_shader"] = method(undefined, layer_shader);
                db[$ "layer_get_script_begin"] = method(undefined, layer_get_script_begin);
                db[$ "layer_get_script_end"] = method(undefined, layer_get_script_end);
                db[$ "layer_get_shader"] = method(undefined, layer_get_shader);
                db[$ "layer_set_target_room"] = method(undefined, layer_set_target_room);
                db[$ "layer_get_target_room"] = method(undefined, layer_get_target_room);
                db[$ "layer_reset_target_room"] = method(undefined, layer_reset_target_room);
                db[$ "layer_get_all"] = method(undefined, layer_get_all);
                db[$ "layer_get_all_elements"] = method(undefined, layer_get_all_elements);
                db[$ "layer_get_name"] = method(undefined, layer_get_name);
                db[$ "layer_depth"] = method(undefined, layer_depth);
                db[$ "layer_get_element_layer"] = method(undefined, layer_get_element_layer);
                db[$ "layer_get_element_type"] = method(undefined, layer_get_element_type);
                db[$ "layer_element_move"] = method(undefined, layer_element_move);
                db[$ "layer_force_draw_depth"] = method(undefined, layer_force_draw_depth);
                db[$ "layer_is_draw_depth_forced"] = method(undefined, layer_is_draw_depth_forced);
                db[$ "layer_get_forced_depth"] = method(undefined, layer_get_forced_depth);
                db[$ "layerelementtype_undefined"] = layerelementtype_undefined;
                db[$ "layerelementtype_background"] = layerelementtype_background;
                db[$ "layerelementtype_instance"] = layerelementtype_instance;
                db[$ "layerelementtype_oldtilemap"] = layerelementtype_oldtilemap;
                db[$ "layerelementtype_sprite"] = layerelementtype_sprite;
                db[$ "layerelementtype_tilemap"] = layerelementtype_tilemap;
                db[$ "layerelementtype_particlesystem"] = layerelementtype_particlesystem;
                db[$ "layerelementtype_tile"] = layerelementtype_tile;
                db[$ "layerelementtype_sequence"] = layerelementtype_sequence;
                db[$ "layer_background_get_id"] = method(undefined, layer_background_get_id);
                db[$ "layer_background_exists"] = method(undefined, layer_background_exists);
                db[$ "layer_background_create"] = method(undefined, layer_background_create);
                db[$ "layer_background_destroy"] = method(undefined, layer_background_destroy);
                db[$ "layer_background_visible"] = method(undefined, layer_background_visible);
                db[$ "layer_background_change"] = method(undefined, layer_background_change);
                db[$ "layer_background_sprite"] = method(undefined, layer_background_sprite);
                db[$ "layer_background_htiled"] = method(undefined, layer_background_htiled);
                db[$ "layer_background_vtiled"] = method(undefined, layer_background_vtiled);
                db[$ "layer_background_stretch"] = method(undefined, layer_background_stretch);
                db[$ "layer_background_yscale"] = method(undefined, layer_background_yscale);
                db[$ "layer_background_xscale"] = method(undefined, layer_background_xscale);
                db[$ "layer_background_blend"] = method(undefined, layer_background_blend);
                db[$ "layer_background_alpha"] = method(undefined, layer_background_alpha);
                db[$ "layer_background_index"] = method(undefined, layer_background_index);
                db[$ "layer_background_speed"] = method(undefined, layer_background_speed);
                db[$ "layer_background_get_visible"] = method(undefined, layer_background_get_visible);
                db[$ "layer_background_get_sprite"] = method(undefined, layer_background_get_sprite);
                db[$ "layer_background_get_htiled"] = method(undefined, layer_background_get_htiled);
                db[$ "layer_background_get_vtiled"] = method(undefined, layer_background_get_vtiled);
                db[$ "layer_background_get_stretch"] = method(undefined, layer_background_get_stretch);
                db[$ "layer_background_get_yscale"] = method(undefined, layer_background_get_yscale);
                db[$ "layer_background_get_xscale"] = method(undefined, layer_background_get_xscale);
                db[$ "layer_background_get_blend"] = method(undefined, layer_background_get_blend);
                db[$ "layer_background_get_alpha"] = method(undefined, layer_background_get_alpha);
                db[$ "layer_background_get_index"] = method(undefined, layer_background_get_index);
                db[$ "layer_background_get_speed"] = method(undefined, layer_background_get_speed);
                db[$ "layer_sprite_get_id"] = method(undefined, layer_sprite_get_id);
                db[$ "layer_sprite_exists"] = method(undefined, layer_sprite_exists);
                db[$ "layer_sprite_create"] = method(undefined, layer_sprite_create);
                db[$ "layer_sprite_destroy"] = method(undefined, layer_sprite_destroy);
                db[$ "layer_sprite_change"] = method(undefined, layer_sprite_change);
                db[$ "layer_sprite_index"] = method(undefined, layer_sprite_index);
                db[$ "layer_sprite_speed"] = method(undefined, layer_sprite_speed);
                db[$ "layer_sprite_xscale"] = method(undefined, layer_sprite_xscale);
                db[$ "layer_sprite_yscale"] = method(undefined, layer_sprite_yscale);
                db[$ "layer_sprite_angle"] = method(undefined, layer_sprite_angle);
                db[$ "layer_sprite_blend"] = method(undefined, layer_sprite_blend);
                db[$ "layer_sprite_alpha"] = method(undefined, layer_sprite_alpha);
                db[$ "layer_sprite_x"] = method(undefined, layer_sprite_x);
                db[$ "layer_sprite_y"] = method(undefined, layer_sprite_y);
                db[$ "layer_sprite_get_sprite"] = method(undefined, layer_sprite_get_sprite);
                db[$ "layer_sprite_get_index"] = method(undefined, layer_sprite_get_index);
                db[$ "layer_sprite_get_speed"] = method(undefined, layer_sprite_get_speed);
                db[$ "layer_sprite_get_xscale"] = method(undefined, layer_sprite_get_xscale);
                db[$ "layer_sprite_get_yscale"] = method(undefined, layer_sprite_get_yscale);
                db[$ "layer_sprite_get_angle"] = method(undefined, layer_sprite_get_angle);
                db[$ "layer_sprite_get_blend"] = method(undefined, layer_sprite_get_blend);
                db[$ "layer_sprite_get_alpha"] = method(undefined, layer_sprite_get_alpha);
                db[$ "layer_sprite_get_x"] = method(undefined, layer_sprite_get_x);
                db[$ "layer_sprite_get_y"] = method(undefined, layer_sprite_get_y);
                db[$ "layer_tilemap_get_id"] = method(undefined, layer_tilemap_get_id);
                db[$ "layer_tilemap_exists"] = method(undefined, layer_tilemap_exists);
                db[$ "layer_tilemap_create"] = method(undefined, layer_tilemap_create);
                db[$ "layer_tilemap_destroy"] = method(undefined, layer_tilemap_destroy);
                db[$ "tilemap_tileset"] = method(undefined, tilemap_tileset);
                db[$ "tilemap_x"] = method(undefined, tilemap_x);
                db[$ "tilemap_y"] = method(undefined, tilemap_y);
                db[$ "tilemap_set"] = method(undefined, tilemap_set);
                db[$ "tilemap_set_at_pixel"] = method(undefined, tilemap_set_at_pixel);
                db[$ "tileset_get_texture"] = method(undefined, tileset_get_texture);
                db[$ "tileset_get_uvs"] = method(undefined, tileset_get_uvs);
                db[$ "tileset_get_name"] = method(undefined, tileset_get_name);
                db[$ "tilemap_get_tileset"] = method(undefined, tilemap_get_tileset);
                db[$ "tilemap_get_tile_width"] = method(undefined, tilemap_get_tile_width);
                db[$ "tilemap_get_tile_height"] = method(undefined, tilemap_get_tile_height);
                db[$ "tilemap_get_width"] = method(undefined, tilemap_get_width);
                db[$ "tilemap_get_height"] = method(undefined, tilemap_get_height);
                db[$ "tilemap_set_width"] = method(undefined, tilemap_set_width);
                db[$ "tilemap_set_height"] = method(undefined, tilemap_set_height);
                db[$ "tilemap_get_x"] = method(undefined, tilemap_get_x);
                db[$ "tilemap_get_y"] = method(undefined, tilemap_get_y);
                db[$ "tilemap_get"] = method(undefined, tilemap_get);
                db[$ "tilemap_get_at_pixel"] = method(undefined, tilemap_get_at_pixel);
                db[$ "tilemap_get_cell_x_at_pixel"] = method(undefined, tilemap_get_cell_x_at_pixel);
                db[$ "tilemap_get_cell_y_at_pixel"] = method(undefined, tilemap_get_cell_y_at_pixel);
                db[$ "tilemap_clear"] = method(undefined, tilemap_clear);
                db[$ "draw_tilemap"] = method(undefined, draw_tilemap);
                db[$ "draw_tile"] = method(undefined, draw_tile);
                db[$ "tilemap_set_global_mask"] = method(undefined, tilemap_set_global_mask);
                db[$ "tilemap_get_global_mask"] = method(undefined, tilemap_get_global_mask);
                db[$ "tilemap_set_mask"] = method(undefined, tilemap_set_mask);
                db[$ "tilemap_get_mask"] = method(undefined, tilemap_get_mask);
                db[$ "tilemap_get_frame"] = method(undefined, tilemap_get_frame);
                db[$ "tile_set_empty"] = method(undefined, tile_set_empty);
                db[$ "tile_set_index"] = method(undefined, tile_set_index);
                db[$ "tile_set_flip"] = method(undefined, tile_set_flip);
                db[$ "tile_set_mirror"] = method(undefined, tile_set_mirror);
                db[$ "tile_set_rotate"] = method(undefined, tile_set_rotate);
                db[$ "tile_get_empty"] = method(undefined, tile_get_empty);
                db[$ "tile_get_index"] = method(undefined, tile_get_index);
                db[$ "tile_get_flip"] = method(undefined, tile_get_flip);
                db[$ "tile_get_mirror"] = method(undefined, tile_get_mirror);
                db[$ "tile_get_rotate"] = method(undefined, tile_get_rotate);
                db[$ "tile_rotate"] = tile_rotate;
                db[$ "tile_flip"] = tile_flip;
                db[$ "tile_mirror"] = tile_mirror;
                db[$ "tile_index_mask"] = tile_index_mask;
                db[$ "layer_instance_get_instance"] = method(undefined, layer_instance_get_instance);
                db[$ "instance_activate_layer"] = method(undefined, instance_activate_layer);
                db[$ "instance_deactivate_layer"] = method(undefined, instance_deactivate_layer);
                db[$ "camera_create"] = method(undefined, camera_create);
                db[$ "camera_create_view"] = method(undefined, camera_create_view);
                db[$ "camera_destroy"] = method(undefined, camera_destroy);
                db[$ "camera_apply"] = method(undefined, camera_apply);
                db[$ "camera_get_active"] = method(undefined, camera_get_active);
                db[$ "camera_get_default"] = method(undefined, camera_get_default);
                db[$ "camera_set_default"] = method(undefined, camera_set_default);
                db[$ "camera_set_view_mat"] = method(undefined, camera_set_view_mat);
                db[$ "camera_set_proj_mat"] = method(undefined, camera_set_proj_mat);
                db[$ "camera_set_update_script"] = method(undefined, camera_set_update_script);
                db[$ "camera_set_begin_script"] = method(undefined, camera_set_begin_script);
                db[$ "camera_set_end_script"] = method(undefined, camera_set_end_script);
                db[$ "camera_set_view_pos"] = method(undefined, camera_set_view_pos);
                db[$ "camera_set_view_size"] = method(undefined, camera_set_view_size);
                db[$ "camera_set_view_speed"] = method(undefined, camera_set_view_speed);
                db[$ "camera_set_view_border"] = method(undefined, camera_set_view_border);
                db[$ "camera_set_view_angle"] = method(undefined, camera_set_view_angle);
                db[$ "camera_set_view_target"] = method(undefined, camera_set_view_target);
                db[$ "camera_get_view_mat"] = method(undefined, camera_get_view_mat);
                db[$ "camera_get_proj_mat"] = method(undefined, camera_get_proj_mat);
                db[$ "camera_get_update_script"] = method(undefined, camera_get_update_script);
                db[$ "camera_get_begin_script"] = method(undefined, camera_get_begin_script);
                db[$ "camera_get_end_script"] = method(undefined, camera_get_end_script);
                db[$ "camera_get_view_x"] = method(undefined, camera_get_view_x);
                db[$ "camera_get_view_y"] = method(undefined, camera_get_view_y);
                db[$ "camera_get_view_width"] = method(undefined, camera_get_view_width);
                db[$ "camera_get_view_height"] = method(undefined, camera_get_view_height);
                db[$ "camera_get_view_speed_x"] = method(undefined, camera_get_view_speed_x);
                db[$ "camera_get_view_speed_y"] = method(undefined, camera_get_view_speed_y);
                db[$ "camera_get_view_border_x"] = method(undefined, camera_get_view_border_x);
                db[$ "camera_get_view_border_y"] = method(undefined, camera_get_view_border_y);
                db[$ "camera_get_view_angle"] = method(undefined, camera_get_view_angle);
                db[$ "camera_get_view_target"] = method(undefined, camera_get_view_target);
                db[$ "view_get_camera"] = method(undefined, view_get_camera);
                db[$ "view_get_visible"] = method(undefined, view_get_visible);
                db[$ "view_get_xport"] = method(undefined, view_get_xport);
                db[$ "view_get_yport"] = method(undefined, view_get_yport);
                db[$ "view_get_wport"] = method(undefined, view_get_wport);
                db[$ "view_get_hport"] = method(undefined, view_get_hport);
                db[$ "view_get_surface_id"] = method(undefined, view_get_surface_id);
                db[$ "view_set_camera"] = method(undefined, view_set_camera);
                db[$ "view_set_visible"] = method(undefined, view_set_visible);
                db[$ "view_set_xport"] = method(undefined, view_set_xport);
                db[$ "view_set_yport"] = method(undefined, view_set_yport);
                db[$ "view_set_wport"] = method(undefined, view_set_wport);
                db[$ "view_set_hport"] = method(undefined, view_set_hport);
                db[$ "view_set_surface_id"] = method(undefined, view_set_surface_id);
                db[$ "gesture_drag_time"] = method(undefined, gesture_drag_time);
                db[$ "gesture_drag_distance"] = method(undefined, gesture_drag_distance);
                db[$ "gesture_flick_speed"] = method(undefined, gesture_flick_speed);
                db[$ "gesture_double_tap_time"] = method(undefined, gesture_double_tap_time);
                db[$ "gesture_double_tap_distance"] = method(undefined, gesture_double_tap_distance);
                db[$ "gesture_pinch_distance"] = method(undefined, gesture_pinch_distance);
                db[$ "gesture_pinch_angle_towards"] = method(undefined, gesture_pinch_angle_towards);
                db[$ "gesture_pinch_angle_away"] = method(undefined, gesture_pinch_angle_away);
                db[$ "gesture_rotate_time"] = method(undefined, gesture_rotate_time);
                db[$ "gesture_rotate_angle"] = method(undefined, gesture_rotate_angle);
                db[$ "gesture_tap_count"] = method(undefined, gesture_tap_count);
                db[$ "gesture_get_drag_time"] = method(undefined, gesture_get_drag_time);
                db[$ "gesture_get_drag_distance"] = method(undefined, gesture_get_drag_distance);
                db[$ "gesture_get_flick_speed"] = method(undefined, gesture_get_flick_speed);
                db[$ "gesture_get_double_tap_time"] = method(undefined, gesture_get_double_tap_time);
                db[$ "gesture_get_double_tap_distance"] = method(undefined, gesture_get_double_tap_distance);
                db[$ "gesture_get_pinch_distance"] = method(undefined, gesture_get_pinch_distance);
                db[$ "gesture_get_pinch_angle_towards"] = method(undefined, gesture_get_pinch_angle_towards);
                db[$ "gesture_get_pinch_angle_away"] = method(undefined, gesture_get_pinch_angle_away);
                db[$ "gesture_get_rotate_time"] = method(undefined, gesture_get_rotate_time);
                db[$ "gesture_get_rotate_angle"] = method(undefined, gesture_get_rotate_angle);
                db[$ "gesture_get_tap_count"] = method(undefined, gesture_get_tap_count);
                db[$ "keyboard_virtual_show"] = method(undefined, keyboard_virtual_show);
                db[$ "keyboard_virtual_hide"] = method(undefined, keyboard_virtual_hide);
                db[$ "keyboard_virtual_status"] = method(undefined, keyboard_virtual_status);
                db[$ "keyboard_virtual_height"] = method(undefined, keyboard_virtual_height);
                db[$ "kbv_type_default"] = kbv_type_default;
                db[$ "kbv_type_ascii"] = kbv_type_ascii;
                db[$ "kbv_type_url"] = kbv_type_url;
                db[$ "kbv_type_email"] = kbv_type_email;
                db[$ "kbv_type_numbers"] = kbv_type_numbers;
                db[$ "kbv_type_phone"] = kbv_type_phone;
                db[$ "kbv_type_phone_name"] = kbv_type_phone_name;
                db[$ "kbv_returnkey_default"] = kbv_returnkey_default;
                db[$ "kbv_returnkey_go"] = kbv_returnkey_go;
                db[$ "kbv_returnkey_google"] = kbv_returnkey_google;
                db[$ "kbv_returnkey_join"] = kbv_returnkey_join;
                db[$ "kbv_returnkey_next"] = kbv_returnkey_next;
                db[$ "kbv_returnkey_route"] = kbv_returnkey_route;
                db[$ "kbv_returnkey_search"] = kbv_returnkey_search;
                db[$ "kbv_returnkey_send"] = kbv_returnkey_send;
                db[$ "kbv_returnkey_yahoo"] = kbv_returnkey_yahoo;
                db[$ "kbv_returnkey_done"] = kbv_returnkey_done;
                db[$ "kbv_returnkey_continue"] = kbv_returnkey_continue;
                db[$ "kbv_returnkey_emergency"] = kbv_returnkey_emergency;
                db[$ "kbv_autocapitalize_none"] = kbv_autocapitalize_none;
                db[$ "kbv_autocapitalize_words"] = kbv_autocapitalize_words;
                db[$ "kbv_autocapitalize_sentences"] = kbv_autocapitalize_sentences;
                db[$ "kbv_autocapitalize_characters"] = kbv_autocapitalize_characters;
                db[$ "os_permission_denied_dont_request"] = os_permission_denied_dont_request;
                db[$ "os_permission_denied"] = os_permission_denied;
                db[$ "os_permission_granted"] = os_permission_granted;
                db[$ "nineslice_left"] = nineslice_left;
                db[$ "nineslice_top"] = nineslice_top;
                db[$ "nineslice_right"] = nineslice_right;
                db[$ "nineslice_bottom"] = nineslice_bottom;
                db[$ "nineslice_centre"] = nineslice_centre;
                db[$ "nineslice_center"] = nineslice_center;
                db[$ "nineslice_stretch"] = nineslice_stretch;
                db[$ "nineslice_repeat"] = nineslice_repeat;
                db[$ "nineslice_mirror"] = nineslice_mirror;
                db[$ "nineslice_blank"] = nineslice_blank;
                db[$ "nineslice_hide"] = nineslice_hide;
                db[$ "texturegroup_status_unloaded"] = texturegroup_status_unloaded;
                db[$ "texturegroup_status_loading"] = texturegroup_status_loading;
                db[$ "texturegroup_status_loaded"] = texturegroup_status_loaded;
                db[$ "texturegroup_status_fetched"] = texturegroup_status_fetched;
                db[$ "tag_get_asset_ids"] = method(undefined, tag_get_asset_ids);
                db[$ "tag_get_assets"] = method(undefined, tag_get_assets);
                db[$ "asset_get_tags"] = method(undefined, asset_get_tags);
                db[$ "asset_add_tags"] = method(undefined, asset_add_tags);
                db[$ "asset_remove_tags"] = method(undefined, asset_remove_tags);
                db[$ "asset_has_tags"] = method(undefined, asset_has_tags);
                db[$ "asset_has_any_tag"] = method(undefined, asset_has_any_tag);
                db[$ "asset_clear_tags"] = method(undefined, asset_clear_tags);
                db[$ "extension_exists"] = method(undefined, extension_exists);
                db[$ "extension_get_option_count"] = method(undefined, extension_get_option_count);
                db[$ "extension_get_option_names"] = method(undefined, extension_get_option_names);
                db[$ "extension_get_option_value"] = method(undefined, extension_get_option_value);
                db[$ "extension_get_options"] = method(undefined, extension_get_options);
                db[$ "layer_sequence_get_instance"] = method(undefined, layer_sequence_get_instance);
                db[$ "layer_sequence_create"] = method(undefined, layer_sequence_create);
                db[$ "layer_sequence_destroy"] = method(undefined, layer_sequence_destroy);
                db[$ "layer_sequence_exists"] = method(undefined, layer_sequence_exists);
                db[$ "layer_sequence_x"] = method(undefined, layer_sequence_x);
                db[$ "layer_sequence_y"] = method(undefined, layer_sequence_y);
                db[$ "layer_sequence_angle"] = method(undefined, layer_sequence_angle);
                db[$ "layer_sequence_xscale"] = method(undefined, layer_sequence_xscale);
                db[$ "layer_sequence_yscale"] = method(undefined, layer_sequence_yscale);
                db[$ "layer_sequence_headpos"] = method(undefined, layer_sequence_headpos);
                db[$ "layer_sequence_headdir"] = method(undefined, layer_sequence_headdir);
                db[$ "layer_sequence_pause"] = method(undefined, layer_sequence_pause);
                db[$ "layer_sequence_play"] = method(undefined, layer_sequence_play);
                db[$ "layer_sequence_speedscale"] = method(undefined, layer_sequence_speedscale);
                db[$ "layer_sequence_get_x"] = method(undefined, layer_sequence_get_x);
                db[$ "layer_sequence_get_y"] = method(undefined, layer_sequence_get_y);
                db[$ "layer_sequence_get_angle"] = method(undefined, layer_sequence_get_angle);
                db[$ "layer_sequence_get_xscale"] = method(undefined, layer_sequence_get_xscale);
                db[$ "layer_sequence_get_yscale"] = method(undefined, layer_sequence_get_yscale);
                db[$ "layer_sequence_get_headpos"] = method(undefined, layer_sequence_get_headpos);
                db[$ "layer_sequence_get_headdir"] = method(undefined, layer_sequence_get_headdir);
                db[$ "layer_sequence_get_sequence"] = method(undefined, layer_sequence_get_sequence);
                db[$ "layer_sequence_is_paused"] = method(undefined, layer_sequence_is_paused);
                db[$ "layer_sequence_is_finished"] = method(undefined, layer_sequence_is_finished);
                db[$ "layer_sequence_get_speedscale"] = method(undefined, layer_sequence_get_speedscale);
                db[$ "layer_sequence_get_length"] = method(undefined, layer_sequence_get_length);
                db[$ "animcurve_get"] = method(undefined, animcurve_get);
                db[$ "animcurve_get_channel"] = method(undefined, animcurve_get_channel);
                db[$ "animcurve_get_channel_index"] = method(undefined, animcurve_get_channel_index);
                db[$ "animcurve_channel_evaluate"] = method(undefined, animcurve_channel_evaluate);
                db[$ "sequence_create"] = method(undefined, sequence_create);
                db[$ "sequence_destroy"] = method(undefined, sequence_destroy);
                db[$ "sequence_exists"] = method(undefined, sequence_exists);
                db[$ "sequence_get"] = method(undefined, sequence_get);
                db[$ "sequence_keyframe_new"] = method(undefined, sequence_keyframe_new);
                db[$ "sequence_keyframedata_new"] = method(undefined, sequence_keyframedata_new);
                db[$ "sequence_track_new"] = method(undefined, sequence_track_new);
                db[$ "sequence_get_objects"] = method(undefined, sequence_get_objects);
                db[$ "sequence_instance_override_object"] = method(undefined, sequence_instance_override_object);
                db[$ "animcurve_create"] = method(undefined, animcurve_create);
                db[$ "animcurve_destroy"] = method(undefined, animcurve_destroy);
                db[$ "animcurve_exists"] = method(undefined, animcurve_exists);
                db[$ "animcurve_channel_new"] = method(undefined, animcurve_channel_new);
                db[$ "animcurve_point_new"] = method(undefined, animcurve_point_new);
                db[$ "fx_create"] = method(undefined, fx_create);
                db[$ "fx_get_name"] = method(undefined, fx_get_name);
                db[$ "fx_get_parameter_names"] = method(undefined, fx_get_parameter_names);
                db[$ "fx_get_parameter"] = method(undefined, fx_get_parameter);
                db[$ "fx_get_parameters"] = method(undefined, fx_get_parameters);
                db[$ "fx_get_single_layer"] = method(undefined, fx_get_single_layer);
                db[$ "fx_set_parameter"] = method(undefined, fx_set_parameter);
                db[$ "fx_set_parameters"] = method(undefined, fx_set_parameters);
                db[$ "fx_set_single_layer"] = method(undefined, fx_set_single_layer);
                db[$ "layer_set_fx"] = method(undefined, layer_set_fx);
                db[$ "layer_get_fx"] = method(undefined, layer_get_fx);
                db[$ "layer_clear_fx"] = method(undefined, layer_clear_fx);
                db[$ "layer_enable_fx"] = method(undefined, layer_enable_fx);
                db[$ "layer_fx_is_enabled"] = method(undefined, layer_fx_is_enabled);
                db[$ "seqtracktype_graphic"] = seqtracktype_graphic;
                db[$ "seqtracktype_audio"] = seqtracktype_audio;
                db[$ "seqtracktype_real"] = seqtracktype_real;
                db[$ "seqtracktype_color"] = seqtracktype_color;
                db[$ "seqtracktype_colour"] = seqtracktype_colour;
                db[$ "seqtracktype_bool"] = seqtracktype_bool;
                db[$ "seqtracktype_string"] = seqtracktype_string;
                db[$ "seqtracktype_sequence"] = seqtracktype_sequence;
                db[$ "seqtracktype_clipmask"] = seqtracktype_clipmask;
                db[$ "seqtracktype_clipmask_mask"] = seqtracktype_clipmask_mask;
                db[$ "seqtracktype_clipmask_subject"] = seqtracktype_clipmask_subject;
                db[$ "seqtracktype_group"] = seqtracktype_group;
                db[$ "seqtracktype_empty"] = seqtracktype_empty;
                db[$ "seqtracktype_spriteframes"] = seqtracktype_spriteframes;
                db[$ "seqtracktype_instance"] = seqtracktype_instance;
                db[$ "seqtracktype_message"] = seqtracktype_message;
                db[$ "seqtracktype_moment"] = seqtracktype_moment;
                db[$ "seqtracktype_text"] = seqtracktype_text;
                db[$ "seqplay_oneshot"] = seqplay_oneshot;
                db[$ "seqplay_loop"] = seqplay_loop;
                db[$ "seqplay_pingpong"] = seqplay_pingpong;
                db[$ "seqdir_right"] = seqdir_right;
                db[$ "seqdir_left"] = seqdir_left;
                db[$ "seqinterpolation_assign"] = seqinterpolation_assign;
                db[$ "seqinterpolation_lerp"] = seqinterpolation_lerp;
                db[$ "seqaudiokey_loop"] = seqaudiokey_loop;
                db[$ "seqaudiokey_oneshot"] = seqaudiokey_oneshot;
                db[$ "seqtextkey_left"] = seqtextkey_left;
                db[$ "seqtextkey_center"] = seqtextkey_center;
                db[$ "seqtextkey_right"] = seqtextkey_right;
                db[$ "seqtextkey_justify"] = seqtextkey_justify;
                db[$ "seqtextkey_top"] = seqtextkey_top;
                db[$ "seqtextkey_middle"] = seqtextkey_middle;
                db[$ "seqtextkey_bottom"] = seqtextkey_bottom;
                db[$ "animcurvetype_linear"] = animcurvetype_linear;
                db[$ "animcurvetype_catmullrom"] = animcurvetype_catmullrom;
                db[$ "animcurvetype_bezier"] = animcurvetype_bezier;
                db[$ "gc_collect"] = method(undefined, gc_collect);
                db[$ "gc_enable"] = method(undefined, gc_enable);
                db[$ "gc_is_enabled"] = method(undefined, gc_is_enabled);
                db[$ "gc_get_stats"] = method(undefined, gc_get_stats);
                db[$ "gc_target_frame_time"] = method(undefined, gc_target_frame_time);
                db[$ "gc_get_target_frame_time"] = method(undefined, gc_get_target_frame_time);
                db[$ "weak_ref_create"] = method(undefined, weak_ref_create);
                db[$ "weak_ref_alive"] = method(undefined, weak_ref_alive);
                db[$ "weak_ref_any_alive"] = method(undefined, weak_ref_any_alive);
                db[$ "time_source_global"] = time_source_global;
                db[$ "time_source_game"] = time_source_game;
                db[$ "time_source_units_seconds"] = time_source_units_seconds;
                db[$ "time_source_units_frames"] = time_source_units_frames;
                db[$ "time_source_expire_nearest"] = time_source_expire_nearest;
                db[$ "time_source_expire_after"] = time_source_expire_after;
                db[$ "time_source_state_initial"] = time_source_state_initial;
                db[$ "time_source_state_active"] = time_source_state_active;
                db[$ "time_source_state_paused"] = time_source_state_paused;
                db[$ "time_source_state_stopped"] = time_source_state_stopped;
                db[$ "time_source_create"] = method(undefined, time_source_create);
                db[$ "time_source_destroy"] = method(undefined, time_source_destroy);
                db[$ "time_source_start"] = method(undefined, time_source_start);
                db[$ "time_source_stop"] = method(undefined, time_source_stop);
                db[$ "time_source_pause"] = method(undefined, time_source_pause);
                db[$ "time_source_resume"] = method(undefined, time_source_resume);
                db[$ "time_source_reset"] = method(undefined, time_source_reset);
                db[$ "time_source_reconfigure"] = method(undefined, time_source_reconfigure);
                db[$ "time_source_get_period"] = method(undefined, time_source_get_period);
                db[$ "time_source_get_reps_completed"] = method(undefined, time_source_get_reps_completed);
                db[$ "time_source_get_reps_remaining"] = method(undefined, time_source_get_reps_remaining);
                db[$ "time_source_get_units"] = method(undefined, time_source_get_units);
                db[$ "time_source_get_time_remaining"] = method(undefined, time_source_get_time_remaining);
                db[$ "time_source_get_state"] = method(undefined, time_source_get_state);
                db[$ "time_source_get_parent"] = method(undefined, time_source_get_parent);
                db[$ "time_source_get_children"] = method(undefined, time_source_get_children);
                db[$ "time_source_exists"] = method(undefined, time_source_exists);
                db[$ "time_seconds_to_bpm"] = method(undefined, time_seconds_to_bpm);
                db[$ "time_bpm_to_seconds"] = method(undefined, time_bpm_to_seconds);
                db[$ "call_later"] = method(undefined, call_later);
                db[$ "call_cancel"] = method(undefined, call_cancel);
            } catch (__err) {
               __catspeak_error_silent("skipping GML API versions: fnames-2022-lts, fnames-2024-2-0-163 (your GameMaker version may be out of date) reason: ", __err.message);
            }
            try {
                db[$ "is_vec3"] = method(undefined, is_vec3);
                db[$ "is_vec4"] = method(undefined, is_vec4);
                db[$ "audio_3d"] = audio_3d;
                db[$ "get_integer"] = method(undefined, get_integer);
                db[$ "get_string"] = method(undefined, get_string);
                db[$ "cloud_file_save"] = method(undefined, cloud_file_save);
                db[$ "cloud_string_save"] = method(undefined, cloud_string_save);
                db[$ "cloud_synchronise"] = method(undefined, cloud_synchronise);
            } catch (__err) {
               __catspeak_error_silent("skipping GML API versions: fnames-2022-lts (your GameMaker version may be out of date) reason: ", __err.message);
            }
            try {
                db[$ "GM_is_sandboxed"] = GM_is_sandboxed;
                db[$ "_GMLINE_"] = _GMLINE_;
                db[$ "_GMFILE_"] = _GMFILE_;
                db[$ "_GMFUNCTION_"] = _GMFUNCTION_;
                db[$ "is_instanceof"] = method(undefined, is_instanceof);
                db[$ "is_callable"] = method(undefined, is_callable);
                db[$ "is_handle"] = method(undefined, is_handle);
                db[$ "static_get"] = method(undefined, static_get);
                db[$ "static_set"] = method(undefined, static_set);
                db[$ "variable_get_hash"] = method(undefined, variable_get_hash);
                db[$ "variable_clone"] = method(undefined, variable_clone);
                db[$ "struct_exists"] = method(undefined, struct_exists);
                db[$ "struct_get"] = method(undefined, struct_get);
                db[$ "struct_set"] = method(undefined, struct_set);
                db[$ "struct_get_names"] = method(undefined, struct_get_names);
                db[$ "struct_names_count"] = method(undefined, struct_names_count);
                db[$ "struct_remove"] = method(undefined, struct_remove);
                db[$ "struct_foreach"] = method(undefined, struct_foreach);
                db[$ "struct_get_from_hash"] = method(undefined, struct_get_from_hash);
                db[$ "struct_set_from_hash"] = method(undefined, struct_set_from_hash);
                db[$ "array_shift"] = method(undefined, array_shift);
                db[$ "array_shuffle"] = method(undefined, array_shuffle);
                db[$ "array_shuffle_ext"] = method(undefined, array_shuffle_ext);
                db[$ "array_get_index"] = method(undefined, array_get_index);
                db[$ "array_contains"] = method(undefined, array_contains);
                db[$ "array_contains_ext"] = method(undefined, array_contains_ext);
                db[$ "array_first"] = method(undefined, array_first);
                db[$ "array_last"] = method(undefined, array_last);
                db[$ "array_create_ext"] = method(undefined, array_create_ext);
                db[$ "array_find_index"] = method(undefined, array_find_index);
                db[$ "array_any"] = method(undefined, array_any);
                db[$ "array_all"] = method(undefined, array_all);
                db[$ "array_foreach"] = method(undefined, array_foreach);
                db[$ "array_reduce"] = method(undefined, array_reduce);
                db[$ "array_filter"] = method(undefined, array_filter);
                db[$ "array_filter_ext"] = method(undefined, array_filter_ext);
                db[$ "array_map"] = method(undefined, array_map);
                db[$ "array_map_ext"] = method(undefined, array_map_ext);
                db[$ "array_copy_while"] = method(undefined, array_copy_while);
                db[$ "array_unique"] = method(undefined, array_unique);
                db[$ "array_unique_ext"] = method(undefined, array_unique_ext);
                db[$ "array_reverse"] = method(undefined, array_reverse);
                db[$ "array_reverse_ext"] = method(undefined, array_reverse_ext);
                db[$ "array_concat"] = method(undefined, array_concat);
                db[$ "array_union"] = method(undefined, array_union);
                db[$ "array_intersection"] = method(undefined, array_intersection);
                db[$ "handle_parse"] = method(undefined, handle_parse);
                db[$ "game_change"] = method(undefined, game_change);
                db[$ "ev_draw_normal"] = ev_draw_normal;
                db[$ "ev_audio_playback_ended"] = ev_audio_playback_ended;
                db[$ "ev_async_audio_playback_ended"] = ev_async_audio_playback_ended;
                db[$ "show_debug_message_ext"] = method(undefined, show_debug_message_ext);
                db[$ "is_debug_overlay_open"] = method(undefined, is_debug_overlay_open);
                db[$ "is_mouse_over_debug_overlay"] = method(undefined, is_mouse_over_debug_overlay);
                db[$ "is_keyboard_used_debug_overlay"] = method(undefined, is_keyboard_used_debug_overlay);
                db[$ "show_debug_log"] = method(undefined, show_debug_log);
                db[$ "dbg_view"] = method(undefined, dbg_view);
                db[$ "dbg_section"] = method(undefined, dbg_section);
                db[$ "dbg_view_delete"] = method(undefined, dbg_view_delete);
                db[$ "dbg_section_delete"] = method(undefined, dbg_section_delete);
                db[$ "dbg_slider"] = method(undefined, dbg_slider);
                db[$ "dbg_slider_int"] = method(undefined, dbg_slider_int);
                db[$ "dbg_drop_down"] = method(undefined, dbg_drop_down);
                db[$ "dbg_watch"] = method(undefined, dbg_watch);
                db[$ "dbg_text"] = method(undefined, dbg_text);
                db[$ "dbg_sprite"] = method(undefined, dbg_sprite);
                db[$ "dbg_text_input"] = method(undefined, dbg_text_input);
                db[$ "dbg_checkbox"] = method(undefined, dbg_checkbox);
                db[$ "dbg_colour"] = method(undefined, dbg_colour);
                db[$ "dbg_color"] = method(undefined, dbg_color);
                db[$ "dbg_button"] = method(undefined, dbg_button);
                db[$ "dbg_same_line"] = method(undefined, dbg_same_line);
                db[$ "dbg_add_font_glyphs"] = method(undefined, dbg_add_font_glyphs);
                db[$ "ref_create"] = method(undefined, ref_create);
                db[$ "audio_3D"] = audio_3D;
                db[$ "surface_get_format"] = method(undefined, surface_get_format);
                db[$ "surface_format_is_supported"] = method(undefined, surface_format_is_supported);
                db[$ "surface_rgba8unorm"] = surface_rgba8unorm;
                db[$ "surface_r16float"] = surface_r16float;
                db[$ "surface_r32float"] = surface_r32float;
                db[$ "surface_rgba4unorm"] = surface_rgba4unorm;
                db[$ "surface_r8unorm"] = surface_r8unorm;
                db[$ "surface_rg8unorm"] = surface_rg8unorm;
                db[$ "surface_rgba16float"] = surface_rgba16float;
                db[$ "surface_rgba32float"] = surface_rgba32float;
                db[$ "window_set_showborder"] = method(undefined, window_set_showborder);
                db[$ "window_get_showborder"] = method(undefined, window_get_showborder);
                db[$ "window_enable_borderless_fullscreen"] = method(undefined, window_enable_borderless_fullscreen);
                db[$ "window_get_borderless_fullscreen"] = method(undefined, window_get_borderless_fullscreen);
                db[$ "window_mouse_set_locked"] = method(undefined, window_mouse_set_locked);
                db[$ "window_mouse_get_locked"] = method(undefined, window_mouse_get_locked);
                db[$ "window_mouse_get_delta_x"] = method(undefined, window_mouse_get_delta_x);
                db[$ "window_mouse_get_delta_y"] = method(undefined, window_mouse_get_delta_y);
                db[$ "audio_play_sound_ext"] = method(undefined, audio_play_sound_ext);
                db[$ "audio_system_is_initialised"] = method(undefined, audio_system_is_initialised);
                db[$ "audio_sound_loop"] = method(undefined, audio_sound_loop);
                db[$ "audio_sound_get_loop"] = method(undefined, audio_sound_get_loop);
                db[$ "audio_sound_loop_start"] = method(undefined, audio_sound_loop_start);
                db[$ "audio_sound_get_loop_start"] = method(undefined, audio_sound_get_loop_start);
                db[$ "audio_sound_loop_end"] = method(undefined, audio_sound_loop_end);
                db[$ "audio_sound_get_loop_end"] = method(undefined, audio_sound_get_loop_end);
                db[$ "audio_sync_group_is_paused"] = method(undefined, audio_sync_group_is_paused);
                db[$ "audio_group_get_gain"] = method(undefined, audio_group_get_gain);
                db[$ "audio_group_get_assets"] = method(undefined, audio_group_get_assets);
                db[$ "audio_sound_get_audio_group"] = method(undefined, audio_sound_get_audio_group);
                db[$ "texturegroup_get_names"] = method(undefined, texturegroup_get_names);
                db[$ "room_get_info"] = method(undefined, room_get_info);
                db[$ "sprite_add_ext"] = method(undefined, sprite_add_ext);
                db[$ "sprite_add_ext_error_unknown"] = sprite_add_ext_error_unknown;
                db[$ "sprite_add_ext_error_cancelled"] = sprite_add_ext_error_cancelled;
                db[$ "sprite_add_ext_error_spritenotfound"] = sprite_add_ext_error_spritenotfound;
                db[$ "sprite_add_ext_error_loadfailed"] = sprite_add_ext_error_loadfailed;
                db[$ "sprite_add_ext_error_decompressfailed"] = sprite_add_ext_error_decompressfailed;
                db[$ "sprite_add_ext_error_setupfailed"] = sprite_add_ext_error_setupfailed;
                db[$ "font_enable_sdf"] = method(undefined, font_enable_sdf);
                db[$ "font_get_sdf_enabled"] = method(undefined, font_get_sdf_enabled);
                db[$ "font_sdf_spread"] = method(undefined, font_sdf_spread);
                db[$ "font_get_sdf_spread"] = method(undefined, font_get_sdf_spread);
                db[$ "font_enable_effects"] = method(undefined, font_enable_effects);
                db[$ "method_call"] = method(undefined, method_call);
                db[$ "asset_get_ids"] = method(undefined, asset_get_ids);
                db[$ "fa_none"] = fa_none;
                db[$ "cache_directory_get"] = method(undefined, function () { return cache_directory });
                db[$ "ds_grid_to_mp_grid"] = method(undefined, ds_grid_to_mp_grid);
                db[$ "effect_create_layer"] = method(undefined, effect_create_layer);
                db[$ "effect_create_depth"] = method(undefined, effect_create_depth);
                db[$ "part_type_subimage"] = method(undefined, part_type_subimage);
                db[$ "part_type_size_x"] = method(undefined, part_type_size_x);
                db[$ "part_type_size_y"] = method(undefined, part_type_size_y);
                db[$ "particle_get_info"] = method(undefined, particle_get_info);
                db[$ "particle_exists"] = method(undefined, particle_exists);
                db[$ "part_system_color"] = method(undefined, part_system_color);
                db[$ "part_system_colour"] = method(undefined, part_system_colour);
                db[$ "part_system_angle"] = method(undefined, part_system_angle);
                db[$ "part_system_global_space"] = method(undefined, part_system_global_space);
                db[$ "part_system_get_info"] = method(undefined, part_system_get_info);
                db[$ "part_particles_burst"] = method(undefined, part_particles_burst);
                db[$ "part_emitter_enable"] = method(undefined, part_emitter_enable);
                db[$ "part_emitter_delay"] = method(undefined, part_emitter_delay);
                db[$ "part_emitter_interval"] = method(undefined, part_emitter_interval);
                db[$ "part_emitter_relative"] = method(undefined, part_emitter_relative);
                db[$ "ps_mode_stream"] = ps_mode_stream;
                db[$ "ps_mode_burst"] = ps_mode_burst;
                db[$ "tm_systemtiming"] = tm_systemtiming;
                db[$ "gpu_set_depth"] = method(undefined, gpu_set_depth);
                db[$ "gpu_get_depth"] = method(undefined, gpu_get_depth);
                db[$ "zip_unzip_async"] = method(undefined, zip_unzip_async);
                db[$ "zip_create"] = method(undefined, zip_create);
                db[$ "zip_add_file"] = method(undefined, zip_add_file);
                db[$ "zip_save"] = method(undefined, zip_save);
                db[$ "network_config_enable_multicast"] = network_config_enable_multicast;
                db[$ "network_config_disable_multicast"] = network_config_disable_multicast;
                db[$ "network_connect_active"] = network_connect_active;
                db[$ "network_connect_passive"] = network_connect_passive;
                db[$ "buffer_copy_stride"] = method(undefined, buffer_copy_stride);
                db[$ "shader_set_uniform_f_buffer"] = method(undefined, shader_set_uniform_f_buffer);
                db[$ "vertex_format_get_info"] = method(undefined, vertex_format_get_info);
                db[$ "vertex_submit_ext"] = method(undefined, vertex_submit_ext);
                db[$ "vertex_update_buffer_from_buffer"] = method(undefined, vertex_update_buffer_from_buffer);
                db[$ "vertex_update_buffer_from_vertex"] = method(undefined, vertex_update_buffer_from_vertex);
                db[$ "skeleton_attachment_exists"] = method(undefined, skeleton_attachment_exists);
                db[$ "skeleton_attachment_replace"] = method(undefined, skeleton_attachment_replace);
                db[$ "skeleton_attachment_replace_colour"] = method(undefined, skeleton_attachment_replace_colour);
                db[$ "skeleton_attachment_replace_color"] = method(undefined, skeleton_attachment_replace_color);
                db[$ "skeleton_attachment_destroy"] = method(undefined, skeleton_attachment_destroy);
                db[$ "tileset_get_info"] = method(undefined, tileset_get_info);
                db[$ "camera_copy_transforms"] = method(undefined, camera_copy_transforms);
                db[$ "extension_get_version"] = method(undefined, extension_get_version);
                db[$ "seqtracktype_particlesystem"] = seqtracktype_particlesystem;
                db[$ "seqtracktype_audioeffect"] = seqtracktype_audioeffect;
                db[$ "audio_bus_main"] = audio_bus_main;
                db[$ "audio_bus_create"] = method(undefined, audio_bus_create);
                db[$ "audio_effect_create"] = method(undefined, audio_effect_create);
                db[$ "audio_emitter_bus"] = method(undefined, audio_emitter_bus);
                db[$ "audio_emitter_get_bus"] = method(undefined, audio_emitter_get_bus);
                db[$ "audio_bus_get_emitters"] = method(undefined, audio_bus_get_emitters);
                db[$ "audio_bus_clear_emitters"] = method(undefined, audio_bus_clear_emitters);
                db[$ "lin_to_db"] = method(undefined, lin_to_db);
                db[$ "db_to_lin"] = method(undefined, db_to_lin);
            } catch (__err) {
               __catspeak_error_silent("skipping GML API versions: fnames-2024-2-0-163 (your GameMaker version may be out of date) reason: ", __err.message);
            }
        }
    }
    return db;
}