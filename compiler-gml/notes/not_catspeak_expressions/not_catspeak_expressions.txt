An expression is is a term which always produces a value, and may be composed
of many sub-expressions. Most statements you would typically find in GameMaker
Language (GML) appear as expressions in Catspeak. This includes [Break Expressions](#break-expressions), [Return Expressions](#return-expressions), and
[Continue Expressions](#continue-expressions).

For the precedence of many of these expressions, see the [**precedence table**](./lan-lexical-grammar.html#operators) in the [Lexical Grammar](./lan-lexical-grammar.html)
chapter.

# Terminal Expressions

Terminal expressions are either [Identifiers](./lan-lexical-grammar.html#identifiers) or literals (e.g. [Numbers](./lan-lexical-grammar.html#numbers) and [Strings](./lan-lexical-grammar.html#strings)).
These expressions have no further sub-expressions, hence the name.

Examples of terminal expressions:

```meow
"2036-02-03" -- string literal
#BBE31A      -- colour code
3.1415       -- numeric literal
'K'          -- character literal
0b0011_1110  -- binary literal
true         -- boolean True
undefined
player_name  -- variable identifier
NaN          -- not a number
```

# Self Expressions

`self` is a special built-in value which refers to the current context a piece
of code is being executed in. For example, the current GML instance, or current
struct a method is bound to.

This behaves similarly to `self` from GML and `this` from JavaScript. However,
unlike GML `self` is **required** in order to access instance variables:

```meow
my_var      -- this refers to a LOCAL variable called 'my_var'
self.my_var -- this refers to an INSTANCE variable on self called 'my_var'

-- they are NOT the same
```

# Other Expressions

`other` is a special built-in value similar to [Self](#self-expressions), except
it refers to the **previous** context a piece of code is being executed in.

The values of `self` and `other` get updated whenever a [With expression](#with-expressions)
is used, or a method call `container.functionName()` is performed. _You cannot
set the values of `self` and `other` directly._ (See the [GameMaker docs](https://manual.gamemaker.io/monthly/en/GameMaker_Language/GML_Overview/Instance%20Keywords/self.htm)
for more information.)

```meow
let s1 = { a : "hi" }
let s2 = { b : "bye" }
with s1 {
  with s2 {
    show_message(other) -- this will show { a : "hi" }
    show_message(self)  -- this will show { b : "bye" }
  }
}
```

# Grouped Expressions

Grouped expressions wrap a single sub-expression between `(` and `)`,
evaluating the sub-expression. This is typically used to make the precedence of
the inner expression clear:

```meow
let a = 1 + 2 * 3   -- a = 7
let b = (1 + 2) * 3 -- b = 9
```

# Array Expressions

Arrays are a sequence of comma-separated sub-expressions wrapped between `[`
and `]`:

```meow
let array = [1, 2, 3]
```

The order of evaluation of sub-expressions `[a, b, c]` is **left-to-right**, i.e.
`a` is evaluated first, then `b`, and finally `c`.

**Whitespace does not matter**, and the elements of an array can be split over
multiple lines if needed (including a trailing comma on the final element if
desired):

```meow
let names = [
  "Jane",
  "June",
  "Jake",
  "Jade",
]
```

For information on how to modify the elements of an array, see the section on
[Accessor Expressions](#accessor-expressions).

# Struct Expressions

Structs are a sequence of comma-separated key-value pairs (`key: value`) wrapped
between `{` and `}`:

```meow
let struct = { x: 1, y: 2 }
```

Just like [Array Expressions](#array-expressions) **whitespace does not matter**,
and the order of evaluation for sub-expressions is **left-to-right**.

Struct keys (seen on the left-hand-side of the `:` symbol) can be any valid
[Terminal Expression](#terminal-expressions):

```meow
let metadata = {
  name   : "Roxy", -- identifier 'name' used as a key
  "age"  : 21,     -- string "age" used as a key
  0b0110 : 0x42,   -- the binary number '0b0110' used as a key
}
```

Any non-string key will be implicitly converted into a string before being
assigned its value. For example, the identifier `name` becomes `"name"`, and the
binary number `0b0110` becomes `"6"`.

Using an expression for a struct key (so-called _"computed keys"_) is allowed, so
long as the expression is surrounded with `[` and `]`:

```meow
{ ["hello" + "world"]: 123 }
```

If the key and value are both the same identifier `{ x: x, y: y }`, then the
**key can be omitted** in a short-hand initialisation syntax like `{ x, y }`:

```meow
let a = 1
let b = 2
let c = 3

return { a, b, c } -- this is short for { a: a, b: b, c: c }
```

For information on how to modify the elements of a struct, see the section on
[Accessor Expressions](#accessor-expressions).

# Call Expressions

A call expression is a single sub-expression (the _callee_) followed by a
sequence of comma-separated sub-expressions (the _arguments_) wrapped between
`(` and `)`:

```meow
show_message("hello from Catspeak!")

-- 'show_message' is the callee
-- "hello from Catspeak!" is the argument
```

If the callee is a constructor function from GML, then it can be constructed
by prefixing a call expression with the `new` keyword:

```meow
let v = new Vec2(13, 12)
```

If the constructor does not have any parameters, then the `()` can be omited:

```meow
let player = new Player -- instead of `new Player()`
```

# Accessor Expressions

An accessor expression will allow you to access or modify the elements of an
array or struct. They consist of a single sub-expression (the array or struct)
followed by a sequence of comma-separated sub-expressions (the indices) wrapped
between `[` and `]`:

```meow
array[0]
struct["y"]
```

If the index is a valid identifier, the `.` symbol can be used for short-hand
member access `vec.x`, which is the same as `vec["x"]`. This is useful
when working with structs:

```meow
let vec = { x: 0, y: 0 }

vec.x = 10
vec.y = vec.x + 12
```

Depending on which side of an [Assignment Operator](#assignment-operators)
the accessor expression is on, determines whether to read or assign a value.

# Unary Operators

Unary operators are made up of a single sub-expression prefixed by one of
`!`, `~`, `-`, or `+`.

They have the highest [precedence](./lan-lexical-grammar.html#op-unary) of all
operators, even greater than the [Multiplicative Operators](#multiplicative-operators):

```meow
+a - b -- same as (+a) - b, NOT +(a - b)
-a * d -- same as (-a) * d, NOT -(a * d)

+-a -- not valid, unary operators cannot be chained together
     -- parenthesis should be used to resolve ambiguity: +(-a)
```

| Operator | Description |
| -------- | ----------- |
| `!a` | Converts `a` into a Boolean value (True or False), returning `false` if `a` evaluates to True and `true` if `a` evaluates to False. |
| `~a` | Converts `a` into a 32-bit integer, returning a new number whose binary representation flips every 0 to a 1 and every 1 to a 0. e.g. `~0b1010` becomes `0b0101`. |
| `-a` | Converts `a` into a number, returning the number with the opposite sign. If `a` is positive then its negative counterpart is returned, and vice versa. |
| `+a` | Converts `a` into a number, returning that number. |

# Multiplicative Operators

Multiplicative operators are made up of two sub-expressions separated by one of
`*`, `/`, `//`, or `%`.

They have the highest [precedence](./lan-lexical-grammar.html#op-mult) of all
the binary operators:

```meow
a + b * c -- same as a + (b * c), NOT (a + b) * c
a / b - c -- same as (a * b) - c, NOT a / (b - c)

a * b / c * d -- same as ((a * b) / c) * d, NOT (a * b) / (c * d)
```

| Operator | Description |
| -------- | ----------- |
| `a * b` | Converts `a` and `b` into numbers, returning the result of multiplying them together. |
| `a / b` | Converts `a` and `b` into numbers, returning the result of dividing `a` by `b`. |
| `a // b` | Converts `a` and `b` into 32-bit integers, returning the quotient after dividing `a` by `b`. |
| `a % b` | Converts `a` and `b` into numbers, returning the remainder after dividing `a` by `b`. <br><br> _The remainder has the **same sign as `a`**; if `a` is positive then the remainder will be positive, and if `a` is negative then the remainder will be negative._ |

# Additive Operators

Additive operators are made up of two sub-expressions separated by one of
`+` or `-`.

They have higher [precedence](./lan-lexical-grammar.html#op-add)
than all other binary operators except the [Multiplicative Operators](#multiplicative-operators):

```meow
a * b + c -- same as (a * b) + c, NOT a * (b + c)
a - b / c -- same as a - (b / c), NOT (a - b) / c

a + b - c + d -- same as ((a + b) - c) + d, NOT (a + b) - (c + d)
```

| Operator | Description |
| -------- | ----------- |
| `a + b` | Converts `a` and `b` into numbers, returning their sum. |
| `a - b` | Converts `a` and `b` into numbers, returning the result of subtracting `b` from `a`. |

# Bitwise Operators

Bitwise operators are made up of two sub-expressions separated by one of
`&`, `|`, `^`, `<<`, or `>>`.

They have a higher [precedence](./lan-lexical-grammar.html#op-bitwise) than
[Relational Operators](#relational-operators), but a lower precedence than
[Additive Operators](#additive-operators).

| Operator | Description |
| -------- | ----------- |
| `a & b` | Converts `a` and `b` to 32-bit integers, returning a new number whose binary representation is the logical **AND** of every bit from `a` and `b`. e.g. `0b1110 & 0b0111` becomes `0b0110`, since: <br><br>1 AND 0 = 0<br>1 AND 1 = 1<br>1 AND 1 = 1<br>0 AND 1 = 0 |
| `a &#124; b` | Converts `a` and `b` to 32-bit integers, returning a new number whose binary representation is the logical **OR** of every bit from `a` and `b`. e.g. `0b1110 &#124; 0b0111` becomes `0b1111`, since: <br><br>1 OR 0 = 1<br>1 OR 1 = 1<br>1 OR 1 = 1<br>0 OR 1 = 1 |
| `a ^ b` | Converts `a` and `b` to 32-bit integers, returning a new number whose binary representation is the logical **XOR** (exclusive **OR**) of every bit from `a` and `b`. e.g. `0b1110 ^ 0b0111` becomes `0b1001`, since: <br><br>1 XOR 0 = 1<br>1 XOR 1 = 0<br>1 XOR 1 = 0<br>0 XOR 1 = 1 |
| `a << b` | Converts `a` and `b` to 32-bit integers, shifting the binary representation of the value `a` to the **left** by `b`-many bits. e.g. `b0110 << 1` becomes `0b1100`. <br><br> _This has the effect of multiplying `a` by 2<sup><code>b</code></sup>._ |
| `a >> b` | Converts `a` and `b` to 32-bit integers, shifting the binary representation of the value `a` to the **right** by `b`-many bits. |


# Relational Operators

Relational operators are made up of two sub-expressions separated by one of
`<`, `<=`, `>`, or `>=`.

They have a higher [precedence](./lan-lexical-grammar.html#op-relation) than
[Equality Operators](#equality-operators), but a lower precedence than
[Bitwise Operators](#bitwise-operators):

```meow
a * b < c  -- same as (a * b) < c, NOT a * (b < c)
a >= b / c -- same as a >= (b / c), NOT (a >= b) / c

a < b < c -- same as (a < b) < c, NOT (a < b) and (b < c)
```

| Operator | Description |
| -------- | ----------- |
| `a < b` | Converts `a` and `b` into numbers, returning whether `a` is less than `b`. |
| `a <= b` | Converts `a` and `b` into numbers, returning whether `a` is less than or equal to `b` |
| `a > b` | Converts `a` and `b` into numbers, returning whether `a` is greater than `b`. |
| `a >= b` | Converts `a` and `b` into numbers, returning whether `a` is greater than or equal to `b` |

# Equality Operators

Equality operators are made up of two sub-expressions separated by one of `==`
or `!=`.

They have a higher [precedence](./lan-lexical-grammar.html#op-equal) than
[Bitwise Operators](#bitwise-operators), but a lower precedence than
[Relational Operators](#relational-operators):

```meow
a * b == c -- same as (a * b) == c, NOT a * (b == c)
a != b < c -- same as a != (b < c), NOT (a != b) < c

a == b == c -- same as ((a == b) == c), NOT (a == b) and (b == c)
```

| Operator | Description |
| -------- | ----------- |
| `a == b` | Compares the values of `a` and `b`, returning `true` if they are equal. <br><br> _Equivalence is determined by the behaviour of GML equality._ |
| `a != b` | Compares the values of `a` and `b`, returning `true` if they are not equal. |

# Pipe Operators

Pipe operators are made up of two sub-expressions separated by one of
`<|` or `|>`.

They have a higher [precedence](./lan-lexical-grammar.html#op-pipe) than
[Logical Operators](#logical-operators), but a lower precedence than
[Bitwise Operators](#bitwise-operators).

| Operator | Description |
| -------- | ----------- |
| `a <&#124; b` | Syntactic sugar for a function call `a(b)`. |
| `a &#124;> b` | Syntactic sugar for a function call `b(a)`. |

# Logical Operators

Logical operators are made up of two sub-expressions separated by one of
`and`, `or`, or `xor`.

They have a higher [precedence](./lan-lexical-grammar.html#op-logical) than
[Assignment Operators](#assignment-operators), but a lower precedence than
[Pipe Operators](#pipe-operators). Additionally, the `and` operator takes precedence over `or` and `xor`:

```meow
a and b or c -- same as (a and b) or c, NOT a and (b or c)
a or b and c -- same as a or (b and c), NOT (a or b) and c

a and b or c and d -- same as (a and b) or (c and d), NOT ((a and b) or c) and d
```

| Operator | Description |
| -------- | ----------- |
| `a and b` | Converts `a` to a Boolean value, returning `b` if `a` evaluates to True. Returns `a` otherwise. <br><br> _Does not evaluate `b` if `a` evaluates to False. This is called [short-circuit evaluation](https://en.wikipedia.org/wiki/Short-circuit_evaluation)._ |
| `a or b` | Converts `a` to a Boolean value, returning `b` if `a` evaluates to False. Returns `a` otherwise. <br><br> _Just like the `and` operator, `b` is not evaluated if `a` evaluates to True._ |
| `a xor b` | Converts `a` and `b` to a Boolean values, returning `true` if the values of `a` and `b` are different. Returns `false` otherwise. <br><br> _Unlike `and` and `or`, the `xor` operator is **not short-circuiting**._ |

# Assignment Operators

Assignment operators are made up of two sub-expressions separated by one of
`=`, `*=`, `/=`, `-=`, or `+=`.

They have the lowest [precedence](./lan-lexical-grammar.html#op-assign) of all
binary operators:

```meow
a = b = c -- same as a = (b = c), NOT a = c; b = c

-- the result of an assignment operator is always 'undefined'
let a
let b = (a = 2) -- a is 2, b is undefined
```

The value of the right-hand-side expression will be written to the left-hand-side
assignment target expression.

| Operator | Description |
| -------- | ----------- |
| `a = b` | Writes the value of `b` to `a` |
| `a *= b` | Writes the value of `a * b` to `a` |
| `a /= b` | Writes the value of `a / b` to `a` |
| `a -= b` | Writes the value of `a - b` to `a` |
| `a += b` | Writes the value of `a + b` to `a` |

Valid assignment targets for the expression `a` include [Identifiers](./lan-lexical-grammar.html#identifiers)
(if they refer to a writable variable), and [Accessor Expressions](#accessor-expression).

# If Expressions

Simple if expressions start with the `if` keyword, followed by a single
sub-expression (the _condition_), and finally a [block](#block-expressions)
containing code to run when the condition evaluates to True:

```meow
if a > b {
  show_message("a is greater than b")
}
```

An optional `else` keyword can be used, followed by another block or if
expression, to handle the case where the condition evaluates to False:

```meow
if a > b {
  show_message("a is greater than b")
} else if a < b {
  show_message("a is less than b")
} else {
  show_message("a and b are equal")
}
```

Unlike GML, only a block or another if expression can follow the `else` keyword.
So shortcuts like `else while` or `else do` are not allowed.

As mentioned on the page about [Statements](./lan-statements.html), almost all
statements found in GML are allowed to be used as expressions in Catspeak. This
allows Catspeak to imitate **ternary operators** from GML:

```meow
let max = if a > b { a } else { b }

-- instead of a > b ? a : e
```

# While Loops

While loops start with the `while` keyword, followed by a single
sub-expression (the _condition_), and finally a [block](#block-expressions)
containing code to run whilst the condition evaluates to True:

```meow
-- counts down from 100
let n = 100
while n > 0 {
  show_message(n)
  n -= 1
}
```

[Continue Expressions](#continue-expressions) and [Break Expressions](#break-expressions)
are also valid from within while loops, allowing for a loop iteration to be
skipped using `continue` or to break out of the loop early using `break`.

# With Loops

With loops behave similarly to GML. They start with the `with` keyword, followed
by a single sub-expression (the _context_), and finally a [block](#block-expressions)
containing code to run in that context. This basically modifies the value
returned by [Self Expressions](#self-expressions) to instead return the context:

```meow
let vec = { x : 1, y : 2 }
with vec {
  show_message(self.x * self.y) -- 'self' here refers to the 'vec' struct
}
```

Unlike GML, **the `self` keyword is not optional**.

[Continue Expressions](#continue-expressions) and [Break Expressions](#break-expressions)
are also valid from within while loops, allowing for a loop iteration to be
skipped using `continue` or to break out of the loop early using `break`. These
only really become useful when using an [GML object asset](https://manual.gamemaker.io/monthly/en/Quick_Start_Guide/Objects_And_Instances.htm)
as the context, as it will loop over every active instance of that object that
exists in the current room.

# Continue Expressions

The `continue` expression will immediately jump to the start of the current
[While Loop](#while-loops) or [With Loop](#with-loops), entering the next
iteration of the loop if one exists.

```meow
let n = 10
while n > 0 {
  n -= 1
  continue -- will skip the remainder of the loop
  n += 1   -- this line will never be evaluated
}
```

# Break Expressions

The `break` expression will immediately terminate the execution of the current
[While Loop](#while-loops) or [With Loop](#with-loops), skipping the rest of
the current iteration.

```meow
let n = 0
while true {
  n += 1
  if n > 10 {
    -- break out of the loop when the number is greater than 10
    break
  }
}

show_message(n) -- n = 11
```

Break expressions start with the `break` keyword, optionally followed by a
single sub-expression. If this sub-expression is supplied then then it is used
as the result of loop it broke out of:

```meow
-- loop until some random number greater than 75 is generated, then
-- store it inside of the 'random_result' variable
let random_result = while true {
  let n = irandom_range(0, 100)
  if n > 75 {
    break n
  }
}
```

# Block Expressions

Blocks in Catspeak are made up of a sequence of [Statements](./lan-statements.html)
wrapped between `{` and `}`. Many expressions (such as [If Expressions](#if-expressions),
[While Loops](#while-loops), and [Function Expressions](#function-expressions))
use blocks for the purposes of control flow.

Block expressions start with the `do` keyword
(_not to be confused with `do` loops from GML_) followed by a block:

```meow
let r = do {
  let a = 1
  let b = 2
  a + b -- a + b is used as the value of the whole block expression
}

-- r is 3 here, because a + b = 3
```

Each statement in a block is evaluated in sequence from top-to-bottom, with the
last value (if one exists) being used as the result. If the last statement of
a block expression is not an expression, then the result of the block is `undefined`.

Unlike other expressions which use blocks, block expressions have no control
flow mechanism. In many cases, using a block expression or not has no real
impact on the behaviour of the code:

```meow
-- with a block expression
do {
  let message = "five pebbles"
  something()
  something_else(message)
}
another_thing()

-- without a block expression
let message = "five pebbles"
something()
something_else(message)
another_thing()
```

However, reiterating what was said in the section on [Let Statements](./lan-statements.html#let-statements),
all local variables defined within a block will become inaccessible after the
block has ended. This is different from GML variables, whose definitions are
hoisted.

# Function Expressions

Function expressions start with the `fun` keyword, followed by an optional
sequence of comma-separated identifiers (the _parameters_) between `(` and `)`,
and finally a single [block](#block-expressions) containing the _function body_:

```meow
let add = fun (a, b) {
  return a + b
}

show_message(add(1, 2)) -- prints '3'
```

Unlike GML, **all functions in Catspeak are anonymous**. There is no such thing
as a "named function" (i.e. `function foo() { }` in GML). 

# Return Expressions

Return expressions start with the `return` keyword, optionally followed by a
single sub-expression (the _return value_). A return expression will
immediately terminate the current function call, using the return value as the
result of the function call.

```meow
let max = fun (a, b) {
    if (a > b) {
        return a
    }
    return b
}

let max_of_12_9 = max(12, 9) -- 12
let max_of_5_8 = max(5, 8)   -- 8
```

If no return value exists, then `undefined` is returned instead.

# Catch Expressions

Catch expressions are made up of a sub-expression, followed by the `catch`
keyword, an (optional) identifier, and finally a single [block](#block-expressions)
containing the code to run if an exception is caught.

```meow
-- GML-style try/catch (instead of `try`, use a `do` block)
do {
  something()
} catch err {
  show_debug_message("something went wrong!:")
  show_debug_message(err.messaage)
}
```

The identifier following the `catch` keyword is optional, and can be omitted if
you don't need it:

```meow
-- if an exception occurs, use a default value instead
let result = could_throw() catch { default }
```

# Throw Expressions

The `throw` expression will immediately terminate the execution of the current
function, unwinding the callstack until the exception is caught.

```meow
if a < b {
  throw "a is less than b"
}
```

Throw expressions start with the `throw` keyword, followed by a single
sub-expression. If the exception is caught, then this expression will be
passed to the associated [Catch expression](#catch-expressions) that caught it.

```meow
do {
  throw "something"
} catch ex {
  show_message(ex) -- prints "something"
}
```

# Match Expressions

Match expressions start with the `match` keyword, followed by a
single sub-expression (the _condition_), and then zero or more _match cases_
wrapped between `{` and `}`:

```meow
let colour
match player {
  case "Dave" { colour = #e00707 }
  case "Rose" { colour = #b536da }
  case "Dash" { colour = #f2a400 }
  case "Roxy" { colour = #ff6ff2 }
  else        { show_message("invalid player") }
}
```

A match case can be one of two things:

 - A sequence of cases starting with the `case` keyword, followed by a single
   sub-expression representing the expected value of the match condition.

 - Or the `else` keyword, representing the _default case_.

Every match case ends in a [block](#block-expressions) containing code to run
if that case is satisfies. The default case only runs its code if no other case
is satisfied.

For most intents and purposes, match expressions are syntactic sugar for [If Expressions](#if-expressions):

```meow
-- match expression
let result = match chr {
  case 'A' { some_a() }
  case 'B' { some_b() }
  case 'C' { some_c() }
  else     { some_else() }
}

-- equivalent if expression
let result = if chr == 'A' {
  some_a()
} else if chr == 'B' {
  some_b()
} else if chr == 'C' {
  some_c()
} else {
  some_else()
}
```