Catspeak source code is stored as a sequence of Unicode characters using
UTF-8 encoding. This means that most text rendered in the GameMaker IDE or
an external text editor will be interpreted as individual characters. Unicode
character clusters (such as skin tone emojis) are an exception to this, and
are instead interpreted as multiple characters, depending on the size of the
cluster.

In order for the computer to understand what these characters mean, they first
need to be transformed into larger groups of characters called [tokens](https://en.wikipedia.org/wiki/Lexical_analysis#Lexical_token_and_lexical_tokenization).
The following sections will cover what each of these tokens are, and how they
are parsed.

# Whitespace

For the most part Catspeak is whitespace insensitive, ignoring any of the
following characters:

 - **Character tabulation** `'\t'` (U+0009)
 - **Line feed**            `'\n'` (U+000A)
 - **Line tabulation**      `'\v'` (U+000B)
 - **Form feed**            `'\f'` (U+000C)
 - **Carriage return**      `'\r'` (U+000D)
 - **Space**                       (U+0020)
 - **Next Line**                   (U+0085)

[Comments](#comments) are also ignored by the Catspeak parser.

# Comments

Comments in Catspeak are prefixed by `--`. This will ignore all of the
characters following it until a new line is reached:

```meow
-- this is a Catspeak comment!
```

_(Catspeak reserves the `//` syntax for integer division. See the section on
[Operators](#operators) for more information.)_

Unlike GML, the Catspeak programming language **does not** include multi-line
comments. Use multiple comments instead:

```meow
-- comment
-- split
-- over multiple
-- lines
--
-- ~(￣▽￣)~*
```

# Numbers

Simple numbers like `123` are a sequence of ASCII digits (0&#8209;9),
optionally separated by a single decimal point `3.1415`.

Catspeak also supports writing numbers in [binary](https://en.wikipedia.org/wiki/Binary_number)
or [hexadecimal](https://en.wikipedia.org/wiki/Hexadecimal) notation, by
prefixing the number literal with either `0b` or `0x`. For example, the binary
representation of the number 10 is `0b1010`, and its hexadecimal representation
is `0xA`. _Catspeak also supports CSS-style colour literals by prefixing a
number with `#` instead of `0x`. See the [Colour Codes](#colour-codes) section
for more information._

Numbers may also contain underscores `_` to improve readability. For example,
`1_000` is the same as `1000`, and `0b0111_1000` is the same as `0b01111000`.

```meow
1_000_000   -- integer number
6.2831      -- fractional number
0b0110      -- binary number
0xDEAD_BEEF -- hexadecimal number
```

# Colour Codes

Just like [GameMaker Language](https://manual.gamemaker.io/monthly/en/GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm#hex_colours) (GML)
and [CSS](https://developer.mozilla.org/en-US/docs/Web/CSS/hex-color), Catspeak
supports colour codes by typing a `#` symbol, followed by three, four, six, or
eight [hexadecimal](https://en.wikipedia.org/wiki/Hexadecimal) digits which
express the colour:

_(`RR` is the red colour channel value, written in hexadecimal; `GG` is the
green colour channel, `BB` is the blue colour channel, and `AA` is the (optional)
alpha colour channel.)_

 - `#RGB`
   Three-value colour syntax: same as `#RRGGBB`.

 - `#RGBA`
   Four-value colour syntax: same as `#RRGGBBAA`, includes an alpha channel.

 - `#RRGGBB`
   Six-value colour syntax: creates an RGB colour from the red, green, and blue
   colour values.

 - `#RRGGBBAA`
   Eight-value colour syntax: creates an RGBA colour with transparency from the
   red, green, blue, and alpha colour values.


If a colour channel is only one character wide `R`, then it is repeated as `RR`.
For example, the colour `#1AF` is the same as the colour `#11AAFF`.

```meow
#A83256 -- represents the colour rbg(168, 50, 86)
#FAE    -- represents the colour rbg(255, 170, 238)
#FFAAEE -- ALSO represents the colour rbg(255, 170, 238)
```

# Character Literals

A common pattern in GML is to use `ord("A")` for keyboard input, for example:

```gml
if (keyboard_check(ord("A"))) {
  do_stuff();
}
```

Catspeak has a special syntax for `ord("A")` in the form of character literals
`'A'`. These are a single UTF-8 encoded character surrounded by apostrophes `'`.

Character literals are converted into numbers by the Catspeak programming language,
and as a result you can do arithmetic on them:

```meow
'A' + 1 == 'B' -- since 'A' == 65, 'B' == 66, and 65 + 1 == 66
```

This allows the previous GML code to be written as

```meow
if keyboard_check('A') {
  do_stuff()
}
```

in Catspeak.

# Strings

There are two types of string literal in Catspeak. The most common is a sequence
of characters starting and ending in double quotes (`"`):

```meow
let hi = "hello world"
```

This type of string allows the following escape sequences to be used:

- `\"` Quotation mark
- `\`  Escape new line
- `\\` Backslash
- `\t` Character tabulation
- `\n` Line feed
- `\v` Line tabulation
- `\f` Form feed
- `\r` Carriage return

The other type of string is the **raw string**. [Similarly to GML](https://manual.gamemaker.io/monthly/en/GameMaker_Language/GML_Reference/Strings/Strings.htm#h2),
a raw string is prefixed by the address symbol `@`, and does not interpret any
of the previously mentioned escape sequences:

```meow
let hi_again = @"\hello\" -- \h and \" here are not escape sequences
```

All strings in Catspeak can be multi-line.

# Identifiers

Mostly used for variable names; identifiers start with either a letter
(A&#8209;Z or a&#8209;z) or an underscore (`_`), followed by a sequence of other
letters, numbers, or underscores.

Examples of valid identifiers are:

```meow
bag_pipes
oneShot
__IMPALA_666__
abc123XYZ
```

Normal identifiers **can not** start with numbers, e.g. `1st` is not a valid
identifier. In this case, you can use **raw identifiers**:

```meow
let `1st-of-march` = "2022-03-01"
```

Where raw identifiers start and end with a backtick symbol (`` ` ``).
`1st-of-march` may not be a valid identifier, but it is a valid raw identifier.

You can use any non-whitespace, non-backtick character between the backticks
when writing a raw identifier.

# Keywords

Keywords are special identifiers which are reserved for use by Catspeak, and
cannot be used as variables; these are:

 - `true`      Evaluates to boolean True.
 - `false`     Evaluates to boolean False.
 - `undefined` GameMaker `undefined`.
 - `infinity`  Floating-point positive infinity.
 - `NaN`       Floating-point NaN.
 - `and`       See [Logical Expressions](./lan-expressions.html#logical-expressions).
 - `or`        See [Logical Expressions](./lan-expressions.html#logical-expressions).
 - `xor`       See [Logical Expressions](./lan-expressions.html#logical-expressions).
 - `do`        See [Block Expressions](./lan-expressions.html#block-expressions).
 - `catch`     See [Catch Expressions](./lan-expressions.html#catch-expressions).
 - `if`        See [If Expressions](./lan-expressions.html#if-expressions).
 - `else`      See [If Expressions](./lan-expressions.html#if-expressions).
 - `while`     See [While Expressions](./lan-expressions.html#while-expressions).
 - `for`       Reserved in case of `for` loops.
 - `loop`      Reserved in case of infinite loops.
 - `with`      See [With Expressions](./lan-expressions.html#with-expressions).
 - `match`     See [Match Expressions](./lan-expressions.html#match-expressions).
 - `let`       See [Let Statements](./lan-statements.html#let-statements).
 - `fun`       See [Function Expressions](./lan-expressions.html#function-expressions).
 - `params`    Reserved in case of spread operator.
 - `break`     See [Break Expressions](./lan-expressions.html#break-expressions).
 - `continue`  See [Continue Expressions](./lan-expressions.html#continue-expressions).
 - `return`    See [Return Expressions](./lan-expressions.html#return-expressions).
 - `throw`     See [Throw Expressions](./lan-expressions.html#throw-expressions).
 - `new`       See [New Expressions](./lan-expressions.html#new-expressions).
 - `impl`      Reserved in case of constructor functions.
 - `self`      See [Self Expressions](./lan-expressions.html#self-expressions).
 - `other`     See [Other Expressions](./lan-expressions.html#other-expressions).

If you ever need to use one of these keywords as a variable name, you should
use [Raw Identifiers](#raw-identifiers) instead.

# Operators

Catspeak shares many operators with GML, but there are some differences. Below
is a table of all operators, organised from highest-to-lowest [precedence](https://en.wikipedia.org/wiki/Order_of_operations)
(which operators are evaluated first when there are no parenthesis); including
information about each operators [associativity](https://en.wikipedia.org/wiki/Operator_associativity),
usage, and syntax:

<div class="responsive-overflow">
  <table>
    <tr>
      <th>Precedence</th>
      <th>Operator</th>
      <th>Description</th>
      <th>Associativity</th>
    </tr>
    <tr>
      <td><b>12<b></td>
      <td>
          <code>(a)</code><br>
          <code>[a,&nbsp;...]</code><br>
          <code>{&nbsp;k&nbsp;:&nbsp;v,&nbsp;...&nbsp;}</code><br>
      </td>
      <td>
          <a href="./lan-expressions.html#grouped-expressions">Grouping</a><br>
          <a href="./lan-expressions.html#array-expressions">Array initialisation</a><br>
          <a href="./lan-expressions.html#struct-expressions">Struct/object initialisation</a>
      </td>
      <td>N/a</td>
    </tr>
    <tr>
      <td><b>11<b></td>
      <td>
          <code>a(...)</code><br>
          <code>new&nbsp;a(...)</code><br>
          <code>a.b</code><br>
          <code>a[i]</code>
      </td>
      <td>
          <a href="./lan-expressions.html#call-expressions">Function call</a><br>
          <a href="./lan-expressions.html#call-expressions">Constructor function call</a><br>
          <a href="./lan-expressions.html#accessor-expressions">Member access</a><br>
          <a href="./lan-expressions.html#accessor-expressions">Collection indexing</a> (computed member access)<br>
      </td>
      <td>Left&#8209;to&#8209;right&nbsp;→</td>
    </tr>
    <tr id="op-unary">
      <td><b>10</b> <a href="./lan-expressions.html#unary-operators">Unary</a></td>
      <td>
          <code>!a</code><br>
          <code>~a</code><br>
          <code>-a</code><br>
          <code>+a</code>
      </td>
      <td>
          Logical <b>NOT</b><br>
          Bitwise <b>NOT</b><br>
          Unary minus (negation)<br>
          Unary plus
      </td>
      <td>N/a</td>
    </tr>
    <tr id="op-mult">
      <td><b>9</b> <a href="./lan-expressions.html#multiplicative-operators">Multiplicative</a></td>
      <td>
          <code>a&nbsp;*&nbsp;b</code><br>
          <code>a&nbsp;/&nbsp;b</code><br>
          <code>a&nbsp;//&nbsp;b</code><br>
          <code>a&nbsp;%&nbsp;b</code>
      </td>
      <td>
          Multiplication<br>
          Division<br>
          Integer division<br>
          Remainder
      </td>
      <td>Left&#8209;to&#8209;right&nbsp;→</td>
    </tr>
    <tr id="op-add">
      <td><b>8</b> <a href="./lan-expressions.html#additive-operators">Additive</a></td>
      <td><code>a&nbsp;+&nbsp;b</code><br><code>a&nbsp;-&nbsp;b</code></td>
      <td>Addition<br>Subtraction</td>
      <td>Left&#8209;to&#8209;right&nbsp;→</td>
    </tr>
    <tr id="op-bitwise">
      <td><b>7</b> <a href="./lan-expressions.html#bitwise-operators">Bitwise</a></td>
      <td>
          <code>a&nbsp;&amp;&nbsp;b</code><br>
          <code>a&nbsp;|&nbsp;b</code><br>
          <code>a&nbsp;^&nbsp;b</code><br>
          <code>a&nbsp;&lt;&lt;&nbsp;b</code><br>
          <code>a&nbsp;&gt;&gt;&nbsp;b</code>
      </td>
      <td>
          Bitwise <b>AND</b><br>
          Bitwise <b>OR</b><br>
          Bitwise <b>XOR</b><br>
          Bitwise left shift<br>
          Bitwise right shift
      </td>
      <td>Left&#8209;to&#8209;right&nbsp;→</td>
    </tr>
    <tr id="op-relation">
      <td><b>6</b> <a href="./lan-expressions.html#relational-operators">Relational</a></td>
      <td>
          <code>a&nbsp;&lt;&nbsp;b</code><br>
          <code>a&nbsp;&lt;=&nbsp;b</code><br>
          <code>a&nbsp;&gt;&nbsp;b</code><br>
          <code>a&nbsp;&gt;=&nbsp;b</code>
      </td>
      <td>
          Relational less-than &lt;<br>
          Relational less-than-or-equal ≤<br>
          Relational greater-than &gt;<br>
          Relational greater-than-or-equal ≥
      </td>
      <td>Left&#8209;to&#8209;right&nbsp;→</td>
    </tr>
    <tr id="op-equal">
      <td><b>5</b> <a href="./lan-expressions.html#equality-operators">Equality</a></td>
      <td><code>a&nbsp;==&nbsp;b</code><br><code>a&nbsp;!=&nbsp;b</code></td>
      <td>Equality =<br>Inequality ≠</td>
      <td>Left&#8209;to&#8209;right&nbsp;→</td>
    </tr>
    <tr id="op-pipe">
      <td><b>4</b> <a href="./lan-expressions.html#pipe-operators">Pipe</a></td>
      <td><code>a&nbsp;&lt;|&nbsp;b</code><br><code>a&nbsp;|&gt;&nbsp;b</code></td>
      <td>Left pipe<br>Right pipe</td>
      <td>Left&#8209;to&#8209;right&nbsp;→</td>
    </tr>
    <tr id="op-logical">
      <td><b>3</b> <a href="./lan-expressions.html#logical-operators">Logical</a></td>
      <td><code>a&nbsp;and&nbsp;b</code></td>
      <td>Logical <b>AND</b></td>
      <td>Left&#8209;to&#8209;right&nbsp;→</td>
    </tr>
    <tr>
      <td><b>2</b> <a href="./lan-expressions.html#logical-operators">Logical</a></td>
      <td>
          <code>a&nbsp;or&nbsp;b</code><br>
          <code>a&nbsp;xor&nbsp;b</code>
      </td>
      <td>
          Logical <b>OR</b><br>
          Logical <b>XOR</b>
      </td>
      <td>Left&#8209;to&#8209;right&nbsp;→</td>
    </tr>
    <tr id="op-assign">
      <td><b>1</b> <a href="./lan-expressions.html#assignment-operators">Assignment</a></td>
      <td>
          <code>a&nbsp;=&nbsp;b</code><br>
          <code>a&nbsp;*=&nbsp;b</code><br>
          <code>a&nbsp;/=&nbsp;b</code><br>
          <code>a&nbsp;-=&nbsp;b</code><br>
          <code>a&nbsp;+=&nbsp;b</code>
      </td>
      <td>
          Direct assignment<br>
          Multiplication assignment<br>
          Division assignment<br>
          Subtraction assignment<br>
          Addition assignment
      </td>
      <td>Right&#8209;to&#8209;left&nbsp;←</td>
    </tr>
    <tr>
      <td><b>0</b></td>
      <td>N/a</td>
      <td>
        Control flow (e.g.
          <a href="./lan-expressions.html#return-expressions"><code>return</code></a>,
          <a href="./lan-expressions.html#if-expressions"><code>if</code></a>, and
          <a href="./lan-expressions.html#while-expressions"><code>while</code></a>)
      </td>
      <td>N/a</td>
    </tr>
  </table>
</div>